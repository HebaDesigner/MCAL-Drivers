
EXTI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d94  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  00000e08  2**0
                  ALLOC
  2 .stab         00001170  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c24  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_1>
   8:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__vector_2>
   c:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a5 06 	call	0xd4a	; 0xd4a <main>
  74:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8_SetPin_value>:
#include"BIT_CALC.h"
#include"DIO_Private.h"
#include"DIO_Interface.h"

u8 DIO_u8_SetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Val)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_u8_SetPin_value+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_u8_SetPin_value+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <DIO_u8_SetPin_value+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	6a 83       	std	Y+2, r22	; 0x02
  8e:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_u8_SetPin_value+0x1c>
  96:	e0 c0       	rjmp	.+448    	; 0x258 <DIO_u8_SetPin_value+0x1dc>

		if( (Copy_u8_Pin_Val == DIO_u8_Low) || (Copy_u8_Pin_Val == DIO_u8_High) ){
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 23       	and	r24, r24
  9c:	21 f0       	breq	.+8      	; 0xa6 <DIO_u8_SetPin_value+0x2a>
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_u8_SetPin_value+0x2a>
  a4:	d7 c0       	rjmp	.+430    	; 0x254 <DIO_u8_SetPin_value+0x1d8>

			switch(Copy_u8_PortID){
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	3e 83       	std	Y+6, r19	; 0x06
  ae:	2d 83       	std	Y+5, r18	; 0x05
  b0:	8d 81       	ldd	r24, Y+5	; 0x05
  b2:	9e 81       	ldd	r25, Y+6	; 0x06
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_u8_SetPin_value+0x40>
  ba:	43 c0       	rjmp	.+134    	; 0x142 <DIO_u8_SetPin_value+0xc6>
  bc:	2d 81       	ldd	r18, Y+5	; 0x05
  be:	3e 81       	ldd	r19, Y+6	; 0x06
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8_SetPin_value+0x54>
  c6:	8d 81       	ldd	r24, Y+5	; 0x05
  c8:	9e 81       	ldd	r25, Y+6	; 0x06
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	71 f0       	breq	.+28     	; 0xea <DIO_u8_SetPin_value+0x6e>
  ce:	bd c0       	rjmp	.+378    	; 0x24a <DIO_u8_SetPin_value+0x1ce>
  d0:	2d 81       	ldd	r18, Y+5	; 0x05
  d2:	3e 81       	ldd	r19, Y+6	; 0x06
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <DIO_u8_SetPin_value+0x60>
  da:	5f c0       	rjmp	.+190    	; 0x19a <DIO_u8_SetPin_value+0x11e>
  dc:	8d 81       	ldd	r24, Y+5	; 0x05
  de:	9e 81       	ldd	r25, Y+6	; 0x06
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_u8_SetPin_value+0x6c>
  e6:	85 c0       	rjmp	.+266    	; 0x1f2 <DIO_u8_SetPin_value+0x176>
  e8:	b0 c0       	rjmp	.+352    	; 0x24a <DIO_u8_SetPin_value+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_PORTA, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	a1 f4       	brne	.+40     	; 0x118 <DIO_u8_SetPin_value+0x9c>
  f0:	ab e3       	ldi	r26, 0x3B	; 59
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	eb e3       	ldi	r30, 0x3B	; 59
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	48 2f       	mov	r20, r24
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 2e       	mov	r0, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_u8_SetPin_value+0x92>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_u8_SetPin_value+0x8e>
 112:	84 2b       	or	r24, r20
 114:	8c 93       	st	X, r24
 116:	9b c0       	rjmp	.+310    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
 118:	ab e3       	ldi	r26, 0x3B	; 59
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	eb e3       	ldi	r30, 0x3B	; 59
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 2e       	mov	r0, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_u8_SetPin_value+0xba>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_u8_SetPin_value+0xb6>
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	8c 93       	st	X, r24
 140:	86 c0       	rjmp	.+268    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_PORTB, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	a1 f4       	brne	.+40     	; 0x170 <DIO_u8_SetPin_value+0xf4>
 148:	a8 e3       	ldi	r26, 0x38	; 56
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e8 e3       	ldi	r30, 0x38	; 56
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 2e       	mov	r0, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_u8_SetPin_value+0xea>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_u8_SetPin_value+0xe6>
 16a:	84 2b       	or	r24, r20
 16c:	8c 93       	st	X, r24
 16e:	6f c0       	rjmp	.+222    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
 170:	a8 e3       	ldi	r26, 0x38	; 56
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e8 e3       	ldi	r30, 0x38	; 56
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	48 2f       	mov	r20, r24
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	28 2f       	mov	r18, r24
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 2e       	mov	r0, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_u8_SetPin_value+0x112>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_u8_SetPin_value+0x10e>
 192:	80 95       	com	r24
 194:	84 23       	and	r24, r20
 196:	8c 93       	st	X, r24
 198:	5a c0       	rjmp	.+180    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_PORTC, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	a1 f4       	brne	.+40     	; 0x1c8 <DIO_u8_SetPin_value+0x14c>
 1a0:	a5 e3       	ldi	r26, 0x35	; 53
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e5 e3       	ldi	r30, 0x35	; 53
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	48 2f       	mov	r20, r24
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 2e       	mov	r0, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_u8_SetPin_value+0x142>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_u8_SetPin_value+0x13e>
 1c2:	84 2b       	or	r24, r20
 1c4:	8c 93       	st	X, r24
 1c6:	43 c0       	rjmp	.+134    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
 1c8:	a5 e3       	ldi	r26, 0x35	; 53
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	e5 e3       	ldi	r30, 0x35	; 53
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	48 2f       	mov	r20, r24
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 2e       	mov	r0, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_u8_SetPin_value+0x16a>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_u8_SetPin_value+0x166>
 1ea:	80 95       	com	r24
 1ec:	84 23       	and	r24, r20
 1ee:	8c 93       	st	X, r24
 1f0:	2e c0       	rjmp	.+92     	; 0x24e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_PORTD, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	a1 f4       	brne	.+40     	; 0x220 <DIO_u8_SetPin_value+0x1a4>
 1f8:	a2 e3       	ldi	r26, 0x32	; 50
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e2 e3       	ldi	r30, 0x32	; 50
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_u8_SetPin_value+0x19a>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_u8_SetPin_value+0x196>
 21a:	84 2b       	or	r24, r20
 21c:	8c 93       	st	X, r24
 21e:	17 c0       	rjmp	.+46     	; 0x24e <DIO_u8_SetPin_value+0x1d2>
 220:	a2 e3       	ldi	r26, 0x32	; 50
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e2 e3       	ldi	r30, 0x32	; 50
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	48 2f       	mov	r20, r24
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	28 2f       	mov	r18, r24
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_u8_SetPin_value+0x1c2>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_u8_SetPin_value+0x1be>
 242:	80 95       	com	r24
 244:	84 23       	and	r24, r20
 246:	8c 93       	st	X, r24
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_u8_SetPin_value+0x1d2>
			break;

			default: return Invalid_u8_Error ;
 24a:	1c 82       	std	Y+4, r1	; 0x04
 24c:	06 c0       	rjmp	.+12     	; 0x25a <DIO_u8_SetPin_value+0x1de>
			}
		}else
             return Invalid_u8_Error ;
	}else
         return Invalid_u8_Error ;
	return Valid;
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	9c 83       	std	Y+4, r25	; 0x04
 252:	03 c0       	rjmp	.+6      	; 0x25a <DIO_u8_SetPin_value+0x1de>
			break;

			default: return Invalid_u8_Error ;
			}
		}else
             return Invalid_u8_Error ;
 254:	1c 82       	std	Y+4, r1	; 0x04
 256:	01 c0       	rjmp	.+2      	; 0x25a <DIO_u8_SetPin_value+0x1de>
	}else
         return Invalid_u8_Error ;
 258:	1c 82       	std	Y+4, r1	; 0x04
 25a:	8c 81       	ldd	r24, Y+4	; 0x04
	return Valid;
}
 25c:	26 96       	adiw	r28, 0x06	; 6
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	de bf       	out	0x3e, r29	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	cd bf       	out	0x3d, r28	; 61
 268:	cf 91       	pop	r28
 26a:	df 91       	pop	r29
 26c:	08 95       	ret

0000026e <DIO_u8_SetPin_Dir>:

u8 DIO_u8_SetPin_Dir(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Dir)
{
 26e:	df 93       	push	r29
 270:	cf 93       	push	r28
 272:	00 d0       	rcall	.+0      	; 0x274 <DIO_u8_SetPin_Dir+0x6>
 274:	00 d0       	rcall	.+0      	; 0x276 <DIO_u8_SetPin_Dir+0x8>
 276:	00 d0       	rcall	.+0      	; 0x278 <DIO_u8_SetPin_Dir+0xa>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	6a 83       	std	Y+2, r22	; 0x02
 280:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	88 30       	cpi	r24, 0x08	; 8
 286:	08 f0       	brcs	.+2      	; 0x28a <DIO_u8_SetPin_Dir+0x1c>
 288:	e0 c0       	rjmp	.+448    	; 0x44a <DIO_u8_SetPin_Dir+0x1dc>

		if((Copy_u8_Pin_Dir == DIO_u8_Input) || (Copy_u8_Pin_Dir == DIO_u8_Output)){
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	88 23       	and	r24, r24
 28e:	21 f0       	breq	.+8      	; 0x298 <DIO_u8_SetPin_Dir+0x2a>
 290:	8b 81       	ldd	r24, Y+3	; 0x03
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	09 f0       	breq	.+2      	; 0x298 <DIO_u8_SetPin_Dir+0x2a>
 296:	d7 c0       	rjmp	.+430    	; 0x446 <DIO_u8_SetPin_Dir+0x1d8>

			switch(Copy_u8_PortID){
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	3e 83       	std	Y+6, r19	; 0x06
 2a0:	2d 83       	std	Y+5, r18	; 0x05
 2a2:	8d 81       	ldd	r24, Y+5	; 0x05
 2a4:	9e 81       	ldd	r25, Y+6	; 0x06
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	91 05       	cpc	r25, r1
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_u8_SetPin_Dir+0x40>
 2ac:	43 c0       	rjmp	.+134    	; 0x334 <DIO_u8_SetPin_Dir+0xc6>
 2ae:	2d 81       	ldd	r18, Y+5	; 0x05
 2b0:	3e 81       	ldd	r19, Y+6	; 0x06
 2b2:	22 30       	cpi	r18, 0x02	; 2
 2b4:	31 05       	cpc	r19, r1
 2b6:	2c f4       	brge	.+10     	; 0x2c2 <DIO_u8_SetPin_Dir+0x54>
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ba:	9e 81       	ldd	r25, Y+6	; 0x06
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	71 f0       	breq	.+28     	; 0x2dc <DIO_u8_SetPin_Dir+0x6e>
 2c0:	bd c0       	rjmp	.+378    	; 0x43c <DIO_u8_SetPin_Dir+0x1ce>
 2c2:	2d 81       	ldd	r18, Y+5	; 0x05
 2c4:	3e 81       	ldd	r19, Y+6	; 0x06
 2c6:	22 30       	cpi	r18, 0x02	; 2
 2c8:	31 05       	cpc	r19, r1
 2ca:	09 f4       	brne	.+2      	; 0x2ce <DIO_u8_SetPin_Dir+0x60>
 2cc:	5f c0       	rjmp	.+190    	; 0x38c <DIO_u8_SetPin_Dir+0x11e>
 2ce:	8d 81       	ldd	r24, Y+5	; 0x05
 2d0:	9e 81       	ldd	r25, Y+6	; 0x06
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	91 05       	cpc	r25, r1
 2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_u8_SetPin_Dir+0x6c>
 2d8:	85 c0       	rjmp	.+266    	; 0x3e4 <DIO_u8_SetPin_Dir+0x176>
 2da:	b0 c0       	rjmp	.+352    	; 0x43c <DIO_u8_SetPin_Dir+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_DDRA, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	a1 f4       	brne	.+40     	; 0x30a <DIO_u8_SetPin_Dir+0x9c>
 2e2:	aa e3       	ldi	r26, 0x3A	; 58
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	ea e3       	ldi	r30, 0x3A	; 58
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_u8_SetPin_Dir+0x92>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_u8_SetPin_Dir+0x8e>
 304:	84 2b       	or	r24, r20
 306:	8c 93       	st	X, r24
 308:	9b c0       	rjmp	.+310    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
 30a:	aa e3       	ldi	r26, 0x3A	; 58
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	ea e3       	ldi	r30, 0x3A	; 58
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8_SetPin_Dir+0xba>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8_SetPin_Dir+0xb6>
 32c:	80 95       	com	r24
 32e:	84 23       	and	r24, r20
 330:	8c 93       	st	X, r24
 332:	86 c0       	rjmp	.+268    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_DDRB, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	a1 f4       	brne	.+40     	; 0x362 <DIO_u8_SetPin_Dir+0xf4>
 33a:	a7 e3       	ldi	r26, 0x37	; 55
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	e7 e3       	ldi	r30, 0x37	; 55
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	48 2f       	mov	r20, r24
 346:	8a 81       	ldd	r24, Y+2	; 0x02
 348:	28 2f       	mov	r18, r24
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 2e       	mov	r0, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8_SetPin_Dir+0xea>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8_SetPin_Dir+0xe6>
 35c:	84 2b       	or	r24, r20
 35e:	8c 93       	st	X, r24
 360:	6f c0       	rjmp	.+222    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
 362:	a7 e3       	ldi	r26, 0x37	; 55
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	e7 e3       	ldi	r30, 0x37	; 55
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	48 2f       	mov	r20, r24
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 2e       	mov	r0, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_u8_SetPin_Dir+0x112>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_u8_SetPin_Dir+0x10e>
 384:	80 95       	com	r24
 386:	84 23       	and	r24, r20
 388:	8c 93       	st	X, r24
 38a:	5a c0       	rjmp	.+180    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_DDRC, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	a1 f4       	brne	.+40     	; 0x3ba <DIO_u8_SetPin_Dir+0x14c>
 392:	a4 e3       	ldi	r26, 0x34	; 52
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	e4 e3       	ldi	r30, 0x34	; 52
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	48 2f       	mov	r20, r24
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 2e       	mov	r0, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_u8_SetPin_Dir+0x142>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_u8_SetPin_Dir+0x13e>
 3b4:	84 2b       	or	r24, r20
 3b6:	8c 93       	st	X, r24
 3b8:	43 c0       	rjmp	.+134    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
 3ba:	a4 e3       	ldi	r26, 0x34	; 52
 3bc:	b0 e0       	ldi	r27, 0x00	; 0
 3be:	e4 e3       	ldi	r30, 0x34	; 52
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	48 2f       	mov	r20, r24
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	28 2f       	mov	r18, r24
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 2e       	mov	r0, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8_SetPin_Dir+0x16a>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8_SetPin_Dir+0x166>
 3dc:	80 95       	com	r24
 3de:	84 23       	and	r24, r20
 3e0:	8c 93       	st	X, r24
 3e2:	2e c0       	rjmp	.+92     	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_DDRD, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	a1 f4       	brne	.+40     	; 0x412 <DIO_u8_SetPin_Dir+0x1a4>
 3ea:	a1 e3       	ldi	r26, 0x31	; 49
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e1 e3       	ldi	r30, 0x31	; 49
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 2e       	mov	r0, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_u8_SetPin_Dir+0x19a>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_u8_SetPin_Dir+0x196>
 40c:	84 2b       	or	r24, r20
 40e:	8c 93       	st	X, r24
 410:	17 c0       	rjmp	.+46     	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
 412:	a1 e3       	ldi	r26, 0x31	; 49
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e1 e3       	ldi	r30, 0x31	; 49
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 2e       	mov	r0, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8_SetPin_Dir+0x1c2>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_u8_SetPin_Dir+0x1be>
 434:	80 95       	com	r24
 436:	84 23       	and	r24, r20
 438:	8c 93       	st	X, r24
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
			break;

			default: return Invalid_u8_Error;
 43c:	1c 82       	std	Y+4, r1	; 0x04
 43e:	06 c0       	rjmp	.+12     	; 0x44c <DIO_u8_SetPin_Dir+0x1de>
		}else
			return Invalid_u8_Error;
	}else
		return Invalid_u8_Error;

	return Valid;
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	9c 83       	std	Y+4, r25	; 0x04
 444:	03 c0       	rjmp	.+6      	; 0x44c <DIO_u8_SetPin_Dir+0x1de>
			break;

			default: return Invalid_u8_Error;
			}
		}else
			return Invalid_u8_Error;
 446:	1c 82       	std	Y+4, r1	; 0x04
 448:	01 c0       	rjmp	.+2      	; 0x44c <DIO_u8_SetPin_Dir+0x1de>
	}else
		return Invalid_u8_Error;
 44a:	1c 82       	std	Y+4, r1	; 0x04
 44c:	8c 81       	ldd	r24, Y+4	; 0x04

	return Valid;
}
 44e:	26 96       	adiw	r28, 0x06	; 6
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	cf 91       	pop	r28
 45c:	df 91       	pop	r29
 45e:	08 95       	ret

00000460 <DIO_u8_SetPort_value>:

u8 DIO_u8_SetPort_value(u8 Copy_u8_PortID, u8 Copy_u8_Port_Val)
{
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	00 d0       	rcall	.+0      	; 0x466 <DIO_u8_SetPort_value+0x6>
 466:	00 d0       	rcall	.+0      	; 0x468 <DIO_u8_SetPort_value+0x8>
 468:	0f 92       	push	r0
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	89 83       	std	Y+1, r24	; 0x01
 470:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	3d 83       	std	Y+5, r19	; 0x05
 47a:	2c 83       	std	Y+4, r18	; 0x04
 47c:	8c 81       	ldd	r24, Y+4	; 0x04
 47e:	9d 81       	ldd	r25, Y+5	; 0x05
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	91 05       	cpc	r25, r1
 484:	d1 f0       	breq	.+52     	; 0x4ba <DIO_u8_SetPort_value+0x5a>
 486:	2c 81       	ldd	r18, Y+4	; 0x04
 488:	3d 81       	ldd	r19, Y+5	; 0x05
 48a:	22 30       	cpi	r18, 0x02	; 2
 48c:	31 05       	cpc	r19, r1
 48e:	2c f4       	brge	.+10     	; 0x49a <DIO_u8_SetPort_value+0x3a>
 490:	8c 81       	ldd	r24, Y+4	; 0x04
 492:	9d 81       	ldd	r25, Y+5	; 0x05
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_u8_SetPort_value+0x50>
 498:	1f c0       	rjmp	.+62     	; 0x4d8 <DIO_u8_SetPort_value+0x78>
 49a:	2c 81       	ldd	r18, Y+4	; 0x04
 49c:	3d 81       	ldd	r19, Y+5	; 0x05
 49e:	22 30       	cpi	r18, 0x02	; 2
 4a0:	31 05       	cpc	r19, r1
 4a2:	81 f0       	breq	.+32     	; 0x4c4 <DIO_u8_SetPort_value+0x64>
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	9d 81       	ldd	r25, Y+5	; 0x05
 4a8:	83 30       	cpi	r24, 0x03	; 3
 4aa:	91 05       	cpc	r25, r1
 4ac:	81 f0       	breq	.+32     	; 0x4ce <DIO_u8_SetPort_value+0x6e>
 4ae:	14 c0       	rjmp	.+40     	; 0x4d8 <DIO_u8_SetPort_value+0x78>
	{
	case Group_A: DIO_u8_PORTA = Copy_u8_Port_Val;
 4b0:	eb e3       	ldi	r30, 0x3B	; 59
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	80 83       	st	Z, r24
 4b8:	11 c0       	rjmp	.+34     	; 0x4dc <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_B: DIO_u8_PORTB = Copy_u8_Port_Val;
 4ba:	e8 e3       	ldi	r30, 0x38	; 56
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	80 83       	st	Z, r24
 4c2:	0c c0       	rjmp	.+24     	; 0x4dc <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_C: DIO_u8_PORTC = Copy_u8_Port_Val;
 4c4:	e5 e3       	ldi	r30, 0x35	; 53
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	80 83       	st	Z, r24
 4cc:	07 c0       	rjmp	.+14     	; 0x4dc <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_D: DIO_u8_PORTD = Copy_u8_Port_Val;
 4ce:	e2 e3       	ldi	r30, 0x32	; 50
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	80 83       	st	Z, r24
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8_SetPort_value+0x7c>
			break;
	default: return Invalid_u8_Error ;
 4d8:	1b 82       	std	Y+3, r1	; 0x03
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_u8_SetPort_value+0x80>
	}
	return Valid;
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	9b 83       	std	Y+3, r25	; 0x03
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	cf 91       	pop	r28
 4ee:	df 91       	pop	r29
 4f0:	08 95       	ret

000004f2 <DIO_u8_SetPort_Dir>:

u8 DIO_u8_SetPort_Dir(u8 Copy_u8_PortID, u8 Copy_u8_Port_Dir)
{
 4f2:	df 93       	push	r29
 4f4:	cf 93       	push	r28
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <DIO_u8_SetPort_Dir+0x6>
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <DIO_u8_SetPort_Dir+0x8>
 4fa:	0f 92       	push	r0
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	89 83       	std	Y+1, r24	; 0x01
 502:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	3d 83       	std	Y+5, r19	; 0x05
 50c:	2c 83       	std	Y+4, r18	; 0x04
 50e:	8c 81       	ldd	r24, Y+4	; 0x04
 510:	9d 81       	ldd	r25, Y+5	; 0x05
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	91 05       	cpc	r25, r1
 516:	d1 f0       	breq	.+52     	; 0x54c <DIO_u8_SetPort_Dir+0x5a>
 518:	2c 81       	ldd	r18, Y+4	; 0x04
 51a:	3d 81       	ldd	r19, Y+5	; 0x05
 51c:	22 30       	cpi	r18, 0x02	; 2
 51e:	31 05       	cpc	r19, r1
 520:	2c f4       	brge	.+10     	; 0x52c <DIO_u8_SetPort_Dir+0x3a>
 522:	8c 81       	ldd	r24, Y+4	; 0x04
 524:	9d 81       	ldd	r25, Y+5	; 0x05
 526:	00 97       	sbiw	r24, 0x00	; 0
 528:	61 f0       	breq	.+24     	; 0x542 <DIO_u8_SetPort_Dir+0x50>
 52a:	1f c0       	rjmp	.+62     	; 0x56a <DIO_u8_SetPort_Dir+0x78>
 52c:	2c 81       	ldd	r18, Y+4	; 0x04
 52e:	3d 81       	ldd	r19, Y+5	; 0x05
 530:	22 30       	cpi	r18, 0x02	; 2
 532:	31 05       	cpc	r19, r1
 534:	81 f0       	breq	.+32     	; 0x556 <DIO_u8_SetPort_Dir+0x64>
 536:	8c 81       	ldd	r24, Y+4	; 0x04
 538:	9d 81       	ldd	r25, Y+5	; 0x05
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	91 05       	cpc	r25, r1
 53e:	81 f0       	breq	.+32     	; 0x560 <DIO_u8_SetPort_Dir+0x6e>
 540:	14 c0       	rjmp	.+40     	; 0x56a <DIO_u8_SetPort_Dir+0x78>
	{
	case Group_A: DIO_u8_DDRA = Copy_u8_Port_Dir;
 542:	ea e3       	ldi	r30, 0x3A	; 58
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	8a 81       	ldd	r24, Y+2	; 0x02
 548:	80 83       	st	Z, r24
 54a:	11 c0       	rjmp	.+34     	; 0x56e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_B: DIO_u8_DDRB = Copy_u8_Port_Dir;
 54c:	e7 e3       	ldi	r30, 0x37	; 55
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	80 83       	st	Z, r24
 554:	0c c0       	rjmp	.+24     	; 0x56e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_C: DIO_u8_DDRC = Copy_u8_Port_Dir;
 556:	e4 e3       	ldi	r30, 0x34	; 52
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	8a 81       	ldd	r24, Y+2	; 0x02
 55c:	80 83       	st	Z, r24
 55e:	07 c0       	rjmp	.+14     	; 0x56e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_D: DIO_u8_DDRD = Copy_u8_Port_Dir;
 560:	e1 e3       	ldi	r30, 0x31	; 49
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	80 83       	st	Z, r24
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_u8_SetPort_Dir+0x7c>
			break;
	default: return Invalid_u8_Error ;
 56a:	1b 82       	std	Y+3, r1	; 0x03
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_u8_SetPort_Dir+0x80>
	}

	return Valid;
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	9b 83       	std	Y+3, r25	; 0x03
 572:	8b 81       	ldd	r24, Y+3	; 0x03
}
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	cf 91       	pop	r28
 580:	df 91       	pop	r29
 582:	08 95       	ret

00000584 <DIO_u8_GetPin_value>:

u8 DIO_u8_GetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID, u8 *Copy_Pu8_u8_Pin_Val)
{
 584:	df 93       	push	r29
 586:	cf 93       	push	r28
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	27 97       	sbiw	r28, 0x07	; 7
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	89 83       	std	Y+1, r24	; 0x01
 59a:	6a 83       	std	Y+2, r22	; 0x02
 59c:	5c 83       	std	Y+4, r21	; 0x04
 59e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8_PortID)
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	3f 83       	std	Y+7, r19	; 0x07
 5a8:	2e 83       	std	Y+6, r18	; 0x06
 5aa:	4e 81       	ldd	r20, Y+6	; 0x06
 5ac:	5f 81       	ldd	r21, Y+7	; 0x07
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	51 05       	cpc	r21, r1
 5b2:	59 f1       	breq	.+86     	; 0x60a <DIO_u8_GetPin_value+0x86>
 5b4:	8e 81       	ldd	r24, Y+6	; 0x06
 5b6:	9f 81       	ldd	r25, Y+7	; 0x07
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	91 05       	cpc	r25, r1
 5bc:	34 f4       	brge	.+12     	; 0x5ca <DIO_u8_GetPin_value+0x46>
 5be:	2e 81       	ldd	r18, Y+6	; 0x06
 5c0:	3f 81       	ldd	r19, Y+7	; 0x07
 5c2:	21 15       	cp	r18, r1
 5c4:	31 05       	cpc	r19, r1
 5c6:	69 f0       	breq	.+26     	; 0x5e2 <DIO_u8_GetPin_value+0x5e>
 5c8:	5c c0       	rjmp	.+184    	; 0x682 <DIO_u8_GetPin_value+0xfe>
 5ca:	4e 81       	ldd	r20, Y+6	; 0x06
 5cc:	5f 81       	ldd	r21, Y+7	; 0x07
 5ce:	42 30       	cpi	r20, 0x02	; 2
 5d0:	51 05       	cpc	r21, r1
 5d2:	79 f1       	breq	.+94     	; 0x632 <DIO_u8_GetPin_value+0xae>
 5d4:	8e 81       	ldd	r24, Y+6	; 0x06
 5d6:	9f 81       	ldd	r25, Y+7	; 0x07
 5d8:	83 30       	cpi	r24, 0x03	; 3
 5da:	91 05       	cpc	r25, r1
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <DIO_u8_GetPin_value+0x5c>
 5de:	3d c0       	rjmp	.+122    	; 0x65a <DIO_u8_GetPin_value+0xd6>
 5e0:	50 c0       	rjmp	.+160    	; 0x682 <DIO_u8_GetPin_value+0xfe>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINA,Copy_u8_Pin_ID);
 5e2:	e9 e3       	ldi	r30, 0x39	; 57
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	88 2f       	mov	r24, r24
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	a9 01       	movw	r20, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_u8_GetPin_value+0x76>
 5f6:	55 95       	asr	r21
 5f8:	47 95       	ror	r20
 5fa:	8a 95       	dec	r24
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_u8_GetPin_value+0x72>
 5fe:	ca 01       	movw	r24, r20
 600:	81 70       	andi	r24, 0x01	; 1
 602:	eb 81       	ldd	r30, Y+3	; 0x03
 604:	fc 81       	ldd	r31, Y+4	; 0x04
 606:	80 83       	st	Z, r24
 608:	3e c0       	rjmp	.+124    	; 0x686 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINB,Copy_u8_Pin_ID);
 60a:	e6 e3       	ldi	r30, 0x36	; 54
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	a9 01       	movw	r20, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_u8_GetPin_value+0x9e>
 61e:	55 95       	asr	r21
 620:	47 95       	ror	r20
 622:	8a 95       	dec	r24
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_u8_GetPin_value+0x9a>
 626:	ca 01       	movw	r24, r20
 628:	81 70       	andi	r24, 0x01	; 1
 62a:	eb 81       	ldd	r30, Y+3	; 0x03
 62c:	fc 81       	ldd	r31, Y+4	; 0x04
 62e:	80 83       	st	Z, r24
 630:	2a c0       	rjmp	.+84     	; 0x686 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINC,Copy_u8_Pin_ID);
 632:	e3 e3       	ldi	r30, 0x33	; 51
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	8a 81       	ldd	r24, Y+2	; 0x02
 63e:	88 2f       	mov	r24, r24
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	a9 01       	movw	r20, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_u8_GetPin_value+0xc6>
 646:	55 95       	asr	r21
 648:	47 95       	ror	r20
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_u8_GetPin_value+0xc2>
 64e:	ca 01       	movw	r24, r20
 650:	81 70       	andi	r24, 0x01	; 1
 652:	eb 81       	ldd	r30, Y+3	; 0x03
 654:	fc 81       	ldd	r31, Y+4	; 0x04
 656:	80 83       	st	Z, r24
 658:	16 c0       	rjmp	.+44     	; 0x686 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PIND,Copy_u8_Pin_ID);
 65a:	e0 e3       	ldi	r30, 0x30	; 48
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	28 2f       	mov	r18, r24
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	88 2f       	mov	r24, r24
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	a9 01       	movw	r20, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_u8_GetPin_value+0xee>
 66e:	55 95       	asr	r21
 670:	47 95       	ror	r20
 672:	8a 95       	dec	r24
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_u8_GetPin_value+0xea>
 676:	ca 01       	movw	r24, r20
 678:	81 70       	andi	r24, 0x01	; 1
 67a:	eb 81       	ldd	r30, Y+3	; 0x03
 67c:	fc 81       	ldd	r31, Y+4	; 0x04
 67e:	80 83       	st	Z, r24
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_u8_GetPin_value+0x102>
			break;
	default: return Invalid_u8_Error ;
 682:	1d 82       	std	Y+5, r1	; 0x05
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_u8_GetPin_value+0x106>
	}
	return Valid;
 686:	51 e0       	ldi	r21, 0x01	; 1
 688:	5d 83       	std	Y+5, r21	; 0x05
 68a:	8d 81       	ldd	r24, Y+5	; 0x05
}
 68c:	27 96       	adiw	r28, 0x07	; 7
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	f8 94       	cli
 692:	de bf       	out	0x3e, r29	; 62
 694:	0f be       	out	0x3f, r0	; 63
 696:	cd bf       	out	0x3d, r28	; 61
 698:	cf 91       	pop	r28
 69a:	df 91       	pop	r29
 69c:	08 95       	ret

0000069e <DIO_u8_GetPort_value>:

u8 DIO_u8_GetPort_value(u8 Copy_u8_PortID, u8 *Copy_Pu8_u8_Pin_Val)
{
 69e:	df 93       	push	r29
 6a0:	cf 93       	push	r28
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <DIO_u8_GetPort_value+0x6>
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <DIO_u8_GetPort_value+0x8>
 6a6:	00 d0       	rcall	.+0      	; 0x6a8 <DIO_u8_GetPort_value+0xa>
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	7b 83       	std	Y+3, r23	; 0x03
 6b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	28 2f       	mov	r18, r24
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	3e 83       	std	Y+6, r19	; 0x06
 6ba:	2d 83       	std	Y+5, r18	; 0x05
 6bc:	8d 81       	ldd	r24, Y+5	; 0x05
 6be:	9e 81       	ldd	r25, Y+6	; 0x06
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	91 05       	cpc	r25, r1
 6c4:	e1 f0       	breq	.+56     	; 0x6fe <DIO_u8_GetPort_value+0x60>
 6c6:	2d 81       	ldd	r18, Y+5	; 0x05
 6c8:	3e 81       	ldd	r19, Y+6	; 0x06
 6ca:	22 30       	cpi	r18, 0x02	; 2
 6cc:	31 05       	cpc	r19, r1
 6ce:	2c f4       	brge	.+10     	; 0x6da <DIO_u8_GetPort_value+0x3c>
 6d0:	8d 81       	ldd	r24, Y+5	; 0x05
 6d2:	9e 81       	ldd	r25, Y+6	; 0x06
 6d4:	00 97       	sbiw	r24, 0x00	; 0
 6d6:	61 f0       	breq	.+24     	; 0x6f0 <DIO_u8_GetPort_value+0x52>
 6d8:	27 c0       	rjmp	.+78     	; 0x728 <DIO_u8_GetPort_value+0x8a>
 6da:	2d 81       	ldd	r18, Y+5	; 0x05
 6dc:	3e 81       	ldd	r19, Y+6	; 0x06
 6de:	22 30       	cpi	r18, 0x02	; 2
 6e0:	31 05       	cpc	r19, r1
 6e2:	a1 f0       	breq	.+40     	; 0x70c <DIO_u8_GetPort_value+0x6e>
 6e4:	8d 81       	ldd	r24, Y+5	; 0x05
 6e6:	9e 81       	ldd	r25, Y+6	; 0x06
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	91 05       	cpc	r25, r1
 6ec:	b1 f0       	breq	.+44     	; 0x71a <DIO_u8_GetPort_value+0x7c>
 6ee:	1c c0       	rjmp	.+56     	; 0x728 <DIO_u8_GetPort_value+0x8a>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTA;
 6f0:	eb e3       	ldi	r30, 0x3B	; 59
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	ea 81       	ldd	r30, Y+2	; 0x02
 6f8:	fb 81       	ldd	r31, Y+3	; 0x03
 6fa:	80 83       	st	Z, r24
 6fc:	17 c0       	rjmp	.+46     	; 0x72c <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTB;
 6fe:	e8 e3       	ldi	r30, 0x38	; 56
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	ea 81       	ldd	r30, Y+2	; 0x02
 706:	fb 81       	ldd	r31, Y+3	; 0x03
 708:	80 83       	st	Z, r24
 70a:	10 c0       	rjmp	.+32     	; 0x72c <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTC;
 70c:	e5 e3       	ldi	r30, 0x35	; 53
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	ea 81       	ldd	r30, Y+2	; 0x02
 714:	fb 81       	ldd	r31, Y+3	; 0x03
 716:	80 83       	st	Z, r24
 718:	09 c0       	rjmp	.+18     	; 0x72c <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTD;
 71a:	e2 e3       	ldi	r30, 0x32	; 50
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	ea 81       	ldd	r30, Y+2	; 0x02
 722:	fb 81       	ldd	r31, Y+3	; 0x03
 724:	80 83       	st	Z, r24
 726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_u8_GetPort_value+0x8e>
			break;
	default: return Invalid_u8_Error ;
 728:	1c 82       	std	Y+4, r1	; 0x04
 72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_u8_GetPort_value+0x92>
	}
	return Valid;
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	9c 83       	std	Y+4, r25	; 0x04
 730:	8c 81       	ldd	r24, Y+4	; 0x04
}
 732:	26 96       	adiw	r28, 0x06	; 6
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	f8 94       	cli
 738:	de bf       	out	0x3e, r29	; 62
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	cd bf       	out	0x3d, r28	; 61
 73e:	cf 91       	pop	r28
 740:	df 91       	pop	r29
 742:	08 95       	ret

00000744 <EXTI_voidINT0_Init>:
void (*EXTI_pvINT1Func)(void) = NULL;
void (*EXTI_pvINT2Func)(void) = NULL;


void EXTI_voidINT0_Init(void)
{
 744:	df 93       	push	r29
 746:	cf 93       	push	r28
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE == On_Change
	SET_BIT(MCUCR,MCUCR_ISC00_INT0);
	CLR_BIT(MCUCR,MCUCR_ISC01_INT0);

#elif INT0_SENSE == Falling_Edge
	CLR_BIT(MCUCR,MCUCR_ISC00_INT0);
 74c:	a5 e5       	ldi	r26, 0x55	; 85
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	e5 e5       	ldi	r30, 0x55	; 85
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	8e 7f       	andi	r24, 0xFE	; 254
 758:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01_INT0);
 75a:	a5 e5       	ldi	r26, 0x55	; 85
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	e5 e5       	ldi	r30, 0x55	; 85
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	82 60       	ori	r24, 0x02	; 2
 766:	8c 93       	st	X, r24
#endif

	//check Peripherals interrupt enable Initial state for INT0
#if INT0_INITIAL_STATE == Enabled_INT0
	//Peripherals interrupt enable for INT0
	SET_BIT(GICR,GICR_INT0);
 768:	ab e5       	ldi	r26, 0x5B	; 91
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	eb e5       	ldi	r30, 0x5B	; 91
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	80 64       	ori	r24, 0x40	; 64
 774:	8c 93       	st	X, r24

#else
#error "Wrong INT0_INITIAL_STATE configuration option"
#endif

}
 776:	cf 91       	pop	r28
 778:	df 91       	pop	r29
 77a:	08 95       	ret

0000077c <EXTI_voidINT1_Init>:

void EXTI_voidINT1_Init(void)
{
 77c:	df 93       	push	r29
 77e:	cf 93       	push	r28
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
	#elif INT1_SENSE == On_Change
		SET_BIT(MCUCR,MCUCR_ISC10_INT1);
		CLR_BIT(MCUCR,MCUCR_ISC11_INT1);

	#elif INT1_SENSE == Falling_Edge
		CLR_BIT(MCUCR,MCUCR_ISC10_INT1);
 784:	a5 e5       	ldi	r26, 0x55	; 85
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	e5 e5       	ldi	r30, 0x55	; 85
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	8b 7f       	andi	r24, 0xFB	; 251
 790:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11_INT1);
 792:	a5 e5       	ldi	r26, 0x55	; 85
 794:	b0 e0       	ldi	r27, 0x00	; 0
 796:	e5 e5       	ldi	r30, 0x55	; 85
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	88 60       	ori	r24, 0x08	; 8
 79e:	8c 93       	st	X, r24
	#endif

		//check Peripherals interrupt enable Initial state for INT1
	#if INT1_INITIAL_STATE == Enabled_INT1
		//Peripherals interrupt enable for INT1
		SET_BIT(GICR,GICR_INT1);
 7a0:	ab e5       	ldi	r26, 0x5B	; 91
 7a2:	b0 e0       	ldi	r27, 0x00	; 0
 7a4:	eb e5       	ldi	r30, 0x5B	; 91
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
 7aa:	80 68       	ori	r24, 0x80	; 128
 7ac:	8c 93       	st	X, r24

	#else
	#error "Wrong INT1_INITIAL_STATE configuration option"
	#endif

}
 7ae:	cf 91       	pop	r28
 7b0:	df 91       	pop	r29
 7b2:	08 95       	ret

000007b4 <EXTI_voidINT2_Init>:

void EXTI_voidINT2_Init(void)
{
 7b4:	df 93       	push	r29
 7b6:	cf 93       	push	r28
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
	//check sense control
#if INT2_SENSE == Falling_Edge
		CLR_BIT(MCUCR,MCUCSR_INT2);
 7bc:	a5 e5       	ldi	r26, 0x55	; 85
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	e5 e5       	ldi	r30, 0x55	; 85
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	80 81       	ld	r24, Z
 7c6:	8f 7b       	andi	r24, 0xBF	; 191
 7c8:	8c 93       	st	X, r24
	#endif

		//check Peripherals interrupt enable Initial state for INT1
	#if INT2_INITIAL_STATE == Enabled_INT2
		//Peripherals interrupt enable for INT2
		SET_BIT(GICR,GICR_INT2);
 7ca:	ab e5       	ldi	r26, 0x5B	; 91
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	eb e5       	ldi	r30, 0x5B	; 91
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	80 62       	ori	r24, 0x20	; 32
 7d6:	8c 93       	st	X, r24

	#else
	#error "Wrong INT2_INITIAL_STATE configuration option"
	#endif

}
 7d8:	cf 91       	pop	r28
 7da:	df 91       	pop	r29
 7dc:	08 95       	ret

000007de <EXTI_u8INT0SetSenseControl>:

u8 EXTI_u8INT0SetSenseControl(u8 Copy_u8Sense_INT0)
{
 7de:	df 93       	push	r29
 7e0:	cf 93       	push	r28
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <EXTI_u8INT0SetSenseControl+0x6>
 7e4:	00 d0       	rcall	.+0      	; 0x7e6 <EXTI_u8INT0SetSenseControl+0x8>
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Sense_INT0)
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
 7f2:	28 2f       	mov	r18, r24
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	3c 83       	std	Y+4, r19	; 0x04
 7f8:	2b 83       	std	Y+3, r18	; 0x03
 7fa:	8b 81       	ldd	r24, Y+3	; 0x03
 7fc:	9c 81       	ldd	r25, Y+4	; 0x04
 7fe:	82 30       	cpi	r24, 0x02	; 2
 800:	91 05       	cpc	r25, r1
 802:	29 f1       	breq	.+74     	; 0x84e <EXTI_u8INT0SetSenseControl+0x70>
 804:	2b 81       	ldd	r18, Y+3	; 0x03
 806:	3c 81       	ldd	r19, Y+4	; 0x04
 808:	23 30       	cpi	r18, 0x03	; 3
 80a:	31 05       	cpc	r19, r1
 80c:	34 f4       	brge	.+12     	; 0x81a <EXTI_u8INT0SetSenseControl+0x3c>
 80e:	8b 81       	ldd	r24, Y+3	; 0x03
 810:	9c 81       	ldd	r25, Y+4	; 0x04
 812:	81 30       	cpi	r24, 0x01	; 1
 814:	91 05       	cpc	r25, r1
 816:	61 f0       	breq	.+24     	; 0x830 <EXTI_u8INT0SetSenseControl+0x52>
 818:	47 c0       	rjmp	.+142    	; 0x8a8 <__stack+0x49>
 81a:	2b 81       	ldd	r18, Y+3	; 0x03
 81c:	3c 81       	ldd	r19, Y+4	; 0x04
 81e:	23 30       	cpi	r18, 0x03	; 3
 820:	31 05       	cpc	r19, r1
 822:	21 f1       	breq	.+72     	; 0x86c <__stack+0xd>
 824:	8b 81       	ldd	r24, Y+3	; 0x03
 826:	9c 81       	ldd	r25, Y+4	; 0x04
 828:	84 30       	cpi	r24, 0x04	; 4
 82a:	91 05       	cpc	r25, r1
 82c:	71 f1       	breq	.+92     	; 0x88a <__stack+0x2b>
 82e:	3c c0       	rjmp	.+120    	; 0x8a8 <__stack+0x49>
	{
	case Low_Level:	CLR_BIT(MCUCR,MCUCR_ISC00_INT0); CLR_BIT(MCUCR,MCUCR_ISC01_INT0); break;
 830:	a5 e5       	ldi	r26, 0x55	; 85
 832:	b0 e0       	ldi	r27, 0x00	; 0
 834:	e5 e5       	ldi	r30, 0x55	; 85
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	8e 7f       	andi	r24, 0xFE	; 254
 83c:	8c 93       	st	X, r24
 83e:	a5 e5       	ldi	r26, 0x55	; 85
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	e5 e5       	ldi	r30, 0x55	; 85
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	8d 7f       	andi	r24, 0xFD	; 253
 84a:	8c 93       	st	X, r24
 84c:	2e c0       	rjmp	.+92     	; 0x8aa <__stack+0x4b>
	case On_Change: SET_BIT(MCUCR,MCUCR_ISC00_INT0); CLR_BIT(MCUCR,MCUCR_ISC01_INT0); break;
 84e:	a5 e5       	ldi	r26, 0x55	; 85
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	e5 e5       	ldi	r30, 0x55	; 85
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	81 60       	ori	r24, 0x01	; 1
 85a:	8c 93       	st	X, r24
 85c:	a5 e5       	ldi	r26, 0x55	; 85
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e5 e5       	ldi	r30, 0x55	; 85
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	8d 7f       	andi	r24, 0xFD	; 253
 868:	8c 93       	st	X, r24
 86a:	1f c0       	rjmp	.+62     	; 0x8aa <__stack+0x4b>
	case Falling_Edge: CLR_BIT(MCUCR,MCUCR_ISC00_INT0); SET_BIT(MCUCR,MCUCR_ISC01_INT0); break;
 86c:	a5 e5       	ldi	r26, 0x55	; 85
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	e5 e5       	ldi	r30, 0x55	; 85
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	8e 7f       	andi	r24, 0xFE	; 254
 878:	8c 93       	st	X, r24
 87a:	a5 e5       	ldi	r26, 0x55	; 85
 87c:	b0 e0       	ldi	r27, 0x00	; 0
 87e:	e5 e5       	ldi	r30, 0x55	; 85
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	82 60       	ori	r24, 0x02	; 2
 886:	8c 93       	st	X, r24
 888:	10 c0       	rjmp	.+32     	; 0x8aa <__stack+0x4b>
	case Rising_Edge: SET_BIT(MCUCR,MCUCR_ISC00_INT0); SET_BIT(MCUCR,MCUCR_ISC01_INT0); break;
 88a:	a5 e5       	ldi	r26, 0x55	; 85
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	e5 e5       	ldi	r30, 0x55	; 85
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	81 60       	ori	r24, 0x01	; 1
 896:	8c 93       	st	X, r24
 898:	a5 e5       	ldi	r26, 0x55	; 85
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	e5 e5       	ldi	r30, 0x55	; 85
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	82 60       	ori	r24, 0x02	; 2
 8a4:	8c 93       	st	X, r24
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__stack+0x4b>
	default: Local_u8ErrorState = NOK;
 8a8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 8ac:	0f 90       	pop	r0
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	0f 90       	pop	r0
 8b4:	cf 91       	pop	r28
 8b6:	df 91       	pop	r29
 8b8:	08 95       	ret

000008ba <EXTI_u8INT1SetSenseControl>:

u8 EXTI_u8INT1SetSenseControl(u8 Copy_u8Sense_INT1)
{
 8ba:	df 93       	push	r29
 8bc:	cf 93       	push	r28
 8be:	00 d0       	rcall	.+0      	; 0x8c0 <EXTI_u8INT1SetSenseControl+0x6>
 8c0:	00 d0       	rcall	.+0      	; 0x8c2 <EXTI_u8INT1SetSenseControl+0x8>
 8c2:	cd b7       	in	r28, 0x3d	; 61
 8c4:	de b7       	in	r29, 0x3e	; 62
 8c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Sense_INT1)
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	28 2f       	mov	r18, r24
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	3c 83       	std	Y+4, r19	; 0x04
 8d4:	2b 83       	std	Y+3, r18	; 0x03
 8d6:	8b 81       	ldd	r24, Y+3	; 0x03
 8d8:	9c 81       	ldd	r25, Y+4	; 0x04
 8da:	82 30       	cpi	r24, 0x02	; 2
 8dc:	91 05       	cpc	r25, r1
 8de:	29 f1       	breq	.+74     	; 0x92a <EXTI_u8INT1SetSenseControl+0x70>
 8e0:	2b 81       	ldd	r18, Y+3	; 0x03
 8e2:	3c 81       	ldd	r19, Y+4	; 0x04
 8e4:	23 30       	cpi	r18, 0x03	; 3
 8e6:	31 05       	cpc	r19, r1
 8e8:	34 f4       	brge	.+12     	; 0x8f6 <EXTI_u8INT1SetSenseControl+0x3c>
 8ea:	8b 81       	ldd	r24, Y+3	; 0x03
 8ec:	9c 81       	ldd	r25, Y+4	; 0x04
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	91 05       	cpc	r25, r1
 8f2:	61 f0       	breq	.+24     	; 0x90c <EXTI_u8INT1SetSenseControl+0x52>
 8f4:	47 c0       	rjmp	.+142    	; 0x984 <EXTI_u8INT1SetSenseControl+0xca>
 8f6:	2b 81       	ldd	r18, Y+3	; 0x03
 8f8:	3c 81       	ldd	r19, Y+4	; 0x04
 8fa:	23 30       	cpi	r18, 0x03	; 3
 8fc:	31 05       	cpc	r19, r1
 8fe:	21 f1       	breq	.+72     	; 0x948 <EXTI_u8INT1SetSenseControl+0x8e>
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	9c 81       	ldd	r25, Y+4	; 0x04
 904:	84 30       	cpi	r24, 0x04	; 4
 906:	91 05       	cpc	r25, r1
 908:	71 f1       	breq	.+92     	; 0x966 <EXTI_u8INT1SetSenseControl+0xac>
 90a:	3c c0       	rjmp	.+120    	; 0x984 <EXTI_u8INT1SetSenseControl+0xca>
	{
	case Low_Level:	CLR_BIT(MCUCR,MCUCR_ISC10_INT1); CLR_BIT(MCUCR,MCUCR_ISC11_INT1); break;
 90c:	a5 e5       	ldi	r26, 0x55	; 85
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	e5 e5       	ldi	r30, 0x55	; 85
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	8b 7f       	andi	r24, 0xFB	; 251
 918:	8c 93       	st	X, r24
 91a:	a5 e5       	ldi	r26, 0x55	; 85
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	e5 e5       	ldi	r30, 0x55	; 85
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	87 7f       	andi	r24, 0xF7	; 247
 926:	8c 93       	st	X, r24
 928:	2e c0       	rjmp	.+92     	; 0x986 <EXTI_u8INT1SetSenseControl+0xcc>
	case On_Change: SET_BIT(MCUCR,MCUCR_ISC10_INT1); CLR_BIT(MCUCR,MCUCR_ISC11_INT1); break;
 92a:	a5 e5       	ldi	r26, 0x55	; 85
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	e5 e5       	ldi	r30, 0x55	; 85
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	84 60       	ori	r24, 0x04	; 4
 936:	8c 93       	st	X, r24
 938:	a5 e5       	ldi	r26, 0x55	; 85
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	e5 e5       	ldi	r30, 0x55	; 85
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	87 7f       	andi	r24, 0xF7	; 247
 944:	8c 93       	st	X, r24
 946:	1f c0       	rjmp	.+62     	; 0x986 <EXTI_u8INT1SetSenseControl+0xcc>
	case Falling_Edge: CLR_BIT(MCUCR,MCUCR_ISC10_INT1); SET_BIT(MCUCR,MCUCR_ISC11_INT1); break;
 948:	a5 e5       	ldi	r26, 0x55	; 85
 94a:	b0 e0       	ldi	r27, 0x00	; 0
 94c:	e5 e5       	ldi	r30, 0x55	; 85
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	8b 7f       	andi	r24, 0xFB	; 251
 954:	8c 93       	st	X, r24
 956:	a5 e5       	ldi	r26, 0x55	; 85
 958:	b0 e0       	ldi	r27, 0x00	; 0
 95a:	e5 e5       	ldi	r30, 0x55	; 85
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	88 60       	ori	r24, 0x08	; 8
 962:	8c 93       	st	X, r24
 964:	10 c0       	rjmp	.+32     	; 0x986 <EXTI_u8INT1SetSenseControl+0xcc>
	case Rising_Edge: SET_BIT(MCUCR,MCUCR_ISC10_INT1); SET_BIT(MCUCR,MCUCR_ISC11_INT1); break;
 966:	a5 e5       	ldi	r26, 0x55	; 85
 968:	b0 e0       	ldi	r27, 0x00	; 0
 96a:	e5 e5       	ldi	r30, 0x55	; 85
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	84 60       	ori	r24, 0x04	; 4
 972:	8c 93       	st	X, r24
 974:	a5 e5       	ldi	r26, 0x55	; 85
 976:	b0 e0       	ldi	r27, 0x00	; 0
 978:	e5 e5       	ldi	r30, 0x55	; 85
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	88 60       	ori	r24, 0x08	; 8
 980:	8c 93       	st	X, r24
 982:	01 c0       	rjmp	.+2      	; 0x986 <EXTI_u8INT1SetSenseControl+0xcc>
	default: Local_u8ErrorState = NOK;
 984:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 986:	89 81       	ldd	r24, Y+1	; 0x01
}
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	cf 91       	pop	r28
 992:	df 91       	pop	r29
 994:	08 95       	ret

00000996 <EXTI_u8INT2SetSenseControl>:

u8 EXTI_u8INT2SetSenseControl(u8 Copy_u8Sense_INT2)
{
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	00 d0       	rcall	.+0      	; 0x99c <EXTI_u8INT2SetSenseControl+0x6>
 99c:	00 d0       	rcall	.+0      	; 0x99e <EXTI_u8INT2SetSenseControl+0x8>
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Sense_INT2)
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	28 2f       	mov	r18, r24
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	3c 83       	std	Y+4, r19	; 0x04
 9b0:	2b 83       	std	Y+3, r18	; 0x03
 9b2:	8b 81       	ldd	r24, Y+3	; 0x03
 9b4:	9c 81       	ldd	r25, Y+4	; 0x04
 9b6:	83 30       	cpi	r24, 0x03	; 3
 9b8:	91 05       	cpc	r25, r1
 9ba:	31 f0       	breq	.+12     	; 0x9c8 <EXTI_u8INT2SetSenseControl+0x32>
 9bc:	2b 81       	ldd	r18, Y+3	; 0x03
 9be:	3c 81       	ldd	r19, Y+4	; 0x04
 9c0:	24 30       	cpi	r18, 0x04	; 4
 9c2:	31 05       	cpc	r19, r1
 9c4:	49 f0       	breq	.+18     	; 0x9d8 <EXTI_u8INT2SetSenseControl+0x42>
 9c6:	10 c0       	rjmp	.+32     	; 0x9e8 <EXTI_u8INT2SetSenseControl+0x52>
	{
	case Falling_Edge: CLR_BIT(MCUCR,MCUCSR_INT2); break;
 9c8:	a5 e5       	ldi	r26, 0x55	; 85
 9ca:	b0 e0       	ldi	r27, 0x00	; 0
 9cc:	e5 e5       	ldi	r30, 0x55	; 85
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	80 81       	ld	r24, Z
 9d2:	8f 7b       	andi	r24, 0xBF	; 191
 9d4:	8c 93       	st	X, r24
 9d6:	09 c0       	rjmp	.+18     	; 0x9ea <EXTI_u8INT2SetSenseControl+0x54>
	case Rising_Edge: SET_BIT(MCUCR,MCUCSR_INT2); break;
 9d8:	a5 e5       	ldi	r26, 0x55	; 85
 9da:	b0 e0       	ldi	r27, 0x00	; 0
 9dc:	e5 e5       	ldi	r30, 0x55	; 85
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	80 64       	ori	r24, 0x40	; 64
 9e4:	8c 93       	st	X, r24
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <EXTI_u8INT2SetSenseControl+0x54>
	default: Local_u8ErrorState = NOK;
 9e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 9ec:	0f 90       	pop	r0
 9ee:	0f 90       	pop	r0
 9f0:	0f 90       	pop	r0
 9f2:	0f 90       	pop	r0
 9f4:	cf 91       	pop	r28
 9f6:	df 91       	pop	r29
 9f8:	08 95       	ret

000009fa <EXTI_u8INTEn_Dis>:

u8 EXTI_u8INTEn_Dis(u8 Copy_u8INT, u8 Copy_u8En_Dis)
{
 9fa:	df 93       	push	r29
 9fc:	cf 93       	push	r28
 9fe:	00 d0       	rcall	.+0      	; 0xa00 <EXTI_u8INTEn_Dis+0x6>
 a00:	00 d0       	rcall	.+0      	; 0xa02 <EXTI_u8INTEn_Dis+0x8>
 a02:	0f 92       	push	r0
 a04:	cd b7       	in	r28, 0x3d	; 61
 a06:	de b7       	in	r29, 0x3e	; 62
 a08:	89 83       	std	Y+1, r24	; 0x01
 a0a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INT)
 a0c:	89 81       	ldd	r24, Y+1	; 0x01
 a0e:	28 2f       	mov	r18, r24
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	3c 83       	std	Y+4, r19	; 0x04
 a14:	2b 83       	std	Y+3, r18	; 0x03
 a16:	8b 81       	ldd	r24, Y+3	; 0x03
 a18:	9c 81       	ldd	r25, Y+4	; 0x04
 a1a:	83 30       	cpi	r24, 0x03	; 3
 a1c:	91 05       	cpc	r25, r1
 a1e:	e9 f0       	breq	.+58     	; 0xa5a <EXTI_u8INTEn_Dis+0x60>
 a20:	2b 81       	ldd	r18, Y+3	; 0x03
 a22:	3c 81       	ldd	r19, Y+4	; 0x04
 a24:	25 30       	cpi	r18, 0x05	; 5
 a26:	31 05       	cpc	r19, r1
 a28:	59 f1       	breq	.+86     	; 0xa80 <EXTI_u8INTEn_Dis+0x86>
 a2a:	8b 81       	ldd	r24, Y+3	; 0x03
 a2c:	9c 81       	ldd	r25, Y+4	; 0x04
 a2e:	81 30       	cpi	r24, 0x01	; 1
 a30:	91 05       	cpc	r25, r1
 a32:	c1 f5       	brne	.+112    	; 0xaa4 <EXTI_u8INTEn_Dis+0xaa>
		{
		case INT0_INITIAL_STATE:
			ASSIGN_Bit(GICR, GICR_INT0, Copy_u8En_Dis);
 a34:	8a 81       	ldd	r24, Y+2	; 0x02
 a36:	81 30       	cpi	r24, 0x01	; 1
 a38:	41 f4       	brne	.+16     	; 0xa4a <EXTI_u8INTEn_Dis+0x50>
 a3a:	ab e5       	ldi	r26, 0x5B	; 91
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	eb e5       	ldi	r30, 0x5B	; 91
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	80 64       	ori	r24, 0x40	; 64
 a46:	8c 93       	st	X, r24
 a48:	2d c0       	rjmp	.+90     	; 0xaa4 <EXTI_u8INTEn_Dis+0xaa>
 a4a:	ab e5       	ldi	r26, 0x5B	; 91
 a4c:	b0 e0       	ldi	r27, 0x00	; 0
 a4e:	eb e5       	ldi	r30, 0x5B	; 91
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	8f 7b       	andi	r24, 0xBF	; 191
 a56:	8c 93       	st	X, r24
 a58:	25 c0       	rjmp	.+74     	; 0xaa4 <EXTI_u8INTEn_Dis+0xaa>
			break;

		case INT1_INITIAL_STATE:
			ASSIGN_Bit(GICR, GICR_INT1, Copy_u8En_Dis);
 a5a:	8a 81       	ldd	r24, Y+2	; 0x02
 a5c:	81 30       	cpi	r24, 0x01	; 1
 a5e:	41 f4       	brne	.+16     	; 0xa70 <EXTI_u8INTEn_Dis+0x76>
 a60:	ab e5       	ldi	r26, 0x5B	; 91
 a62:	b0 e0       	ldi	r27, 0x00	; 0
 a64:	eb e5       	ldi	r30, 0x5B	; 91
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
 a6a:	80 68       	ori	r24, 0x80	; 128
 a6c:	8c 93       	st	X, r24
 a6e:	1a c0       	rjmp	.+52     	; 0xaa4 <EXTI_u8INTEn_Dis+0xaa>
 a70:	ab e5       	ldi	r26, 0x5B	; 91
 a72:	b0 e0       	ldi	r27, 0x00	; 0
 a74:	eb e5       	ldi	r30, 0x5B	; 91
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	80 81       	ld	r24, Z
 a7a:	8f 77       	andi	r24, 0x7F	; 127
 a7c:	8c 93       	st	X, r24
 a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <EXTI_u8INTEn_Dis+0xaa>
			break;

		case INT2_INITIAL_STATE:
			ASSIGN_Bit(GICR, GICR_INT2, Copy_u8En_Dis);
 a80:	8a 81       	ldd	r24, Y+2	; 0x02
 a82:	81 30       	cpi	r24, 0x01	; 1
 a84:	41 f4       	brne	.+16     	; 0xa96 <EXTI_u8INTEn_Dis+0x9c>
 a86:	ab e5       	ldi	r26, 0x5B	; 91
 a88:	b0 e0       	ldi	r27, 0x00	; 0
 a8a:	eb e5       	ldi	r30, 0x5B	; 91
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	80 81       	ld	r24, Z
 a90:	80 62       	ori	r24, 0x20	; 32
 a92:	8c 93       	st	X, r24
 a94:	07 c0       	rjmp	.+14     	; 0xaa4 <EXTI_u8INTEn_Dis+0xaa>
 a96:	ab e5       	ldi	r26, 0x5B	; 91
 a98:	b0 e0       	ldi	r27, 0x00	; 0
 a9a:	eb e5       	ldi	r30, 0x5B	; 91
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	80 81       	ld	r24, Z
 aa0:	8f 7d       	andi	r24, 0xDF	; 223
 aa2:	8c 93       	st	X, r24
			break;
		}
}
 aa4:	0f 90       	pop	r0
 aa6:	0f 90       	pop	r0
 aa8:	0f 90       	pop	r0
 aaa:	0f 90       	pop	r0
 aac:	0f 90       	pop	r0
 aae:	cf 91       	pop	r28
 ab0:	df 91       	pop	r29
 ab2:	08 95       	ret

00000ab4 <EXTI_u8INT0SetCallback>:

u8 EXTI_u8INT0SetCallback(void (*Copy_PvINT0Func)(void))
{
 ab4:	df 93       	push	r29
 ab6:	cf 93       	push	r28
 ab8:	00 d0       	rcall	.+0      	; 0xaba <EXTI_u8INT0SetCallback+0x6>
 aba:	0f 92       	push	r0
 abc:	cd b7       	in	r28, 0x3d	; 61
 abe:	de b7       	in	r29, 0x3e	; 62
 ac0:	9b 83       	std	Y+3, r25	; 0x03
 ac2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =OK;
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT0Func != NULL)
 ac8:	8a 81       	ldd	r24, Y+2	; 0x02
 aca:	9b 81       	ldd	r25, Y+3	; 0x03
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	39 f0       	breq	.+14     	; 0xade <EXTI_u8INT0SetCallback+0x2a>
	{
		EXTI_pvINT0Func = Copy_PvINT0Func;
 ad0:	8a 81       	ldd	r24, Y+2	; 0x02
 ad2:	9b 81       	ldd	r25, Y+3	; 0x03
 ad4:	90 93 61 00 	sts	0x0061, r25
 ad8:	80 93 60 00 	sts	0x0060, r24
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <EXTI_u8INT0SetCallback+0x2e>
	}
	else
	{
		Local_u8ErrorStatus = NULL_Pointer;
 ade:	82 e0       	ldi	r24, 0x02	; 2
 ae0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
 ae2:	89 81       	ldd	r24, Y+1	; 0x01
}
 ae4:	0f 90       	pop	r0
 ae6:	0f 90       	pop	r0
 ae8:	0f 90       	pop	r0
 aea:	cf 91       	pop	r28
 aec:	df 91       	pop	r29
 aee:	08 95       	ret

00000af0 <EXTI_u8INT1SetCallback>:

u8 EXTI_u8INT1SetCallback(void (*Copy_PvINT1Func)(void))
{
 af0:	df 93       	push	r29
 af2:	cf 93       	push	r28
 af4:	00 d0       	rcall	.+0      	; 0xaf6 <EXTI_u8INT1SetCallback+0x6>
 af6:	0f 92       	push	r0
 af8:	cd b7       	in	r28, 0x3d	; 61
 afa:	de b7       	in	r29, 0x3e	; 62
 afc:	9b 83       	std	Y+3, r25	; 0x03
 afe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =OK;
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT1Func != NULL)
 b04:	8a 81       	ldd	r24, Y+2	; 0x02
 b06:	9b 81       	ldd	r25, Y+3	; 0x03
 b08:	00 97       	sbiw	r24, 0x00	; 0
 b0a:	39 f0       	breq	.+14     	; 0xb1a <EXTI_u8INT1SetCallback+0x2a>
	{
		EXTI_pvINT1Func = Copy_PvINT1Func;
 b0c:	8a 81       	ldd	r24, Y+2	; 0x02
 b0e:	9b 81       	ldd	r25, Y+3	; 0x03
 b10:	90 93 63 00 	sts	0x0063, r25
 b14:	80 93 62 00 	sts	0x0062, r24
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <EXTI_u8INT1SetCallback+0x2e>
	}
	else
	{
		Local_u8ErrorStatus = NULL_Pointer;
 b1a:	82 e0       	ldi	r24, 0x02	; 2
 b1c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
 b20:	0f 90       	pop	r0
 b22:	0f 90       	pop	r0
 b24:	0f 90       	pop	r0
 b26:	cf 91       	pop	r28
 b28:	df 91       	pop	r29
 b2a:	08 95       	ret

00000b2c <EXTI_u8INT2SetCallback>:

u8 EXTI_u8INT2SetCallback(void (*Copy_PvINT2Func)(void))
{
 b2c:	df 93       	push	r29
 b2e:	cf 93       	push	r28
 b30:	00 d0       	rcall	.+0      	; 0xb32 <EXTI_u8INT2SetCallback+0x6>
 b32:	0f 92       	push	r0
 b34:	cd b7       	in	r28, 0x3d	; 61
 b36:	de b7       	in	r29, 0x3e	; 62
 b38:	9b 83       	std	Y+3, r25	; 0x03
 b3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =OK;
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT2Func != NULL)
 b40:	8a 81       	ldd	r24, Y+2	; 0x02
 b42:	9b 81       	ldd	r25, Y+3	; 0x03
 b44:	00 97       	sbiw	r24, 0x00	; 0
 b46:	39 f0       	breq	.+14     	; 0xb56 <EXTI_u8INT2SetCallback+0x2a>
	{
		EXTI_pvINT2Func = Copy_PvINT2Func;
 b48:	8a 81       	ldd	r24, Y+2	; 0x02
 b4a:	9b 81       	ldd	r25, Y+3	; 0x03
 b4c:	90 93 65 00 	sts	0x0065, r25
 b50:	80 93 64 00 	sts	0x0064, r24
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <EXTI_u8INT2SetCallback+0x2e>
	}
	else
	{
		Local_u8ErrorStatus = NULL_Pointer;
 b56:	82 e0       	ldi	r24, 0x02	; 2
 b58:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 b5a:	89 81       	ldd	r24, Y+1	; 0x01
}
 b5c:	0f 90       	pop	r0
 b5e:	0f 90       	pop	r0
 b60:	0f 90       	pop	r0
 b62:	cf 91       	pop	r28
 b64:	df 91       	pop	r29
 b66:	08 95       	ret

00000b68 <__vector_1>:



void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
 b68:	1f 92       	push	r1
 b6a:	0f 92       	push	r0
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	0f 92       	push	r0
 b70:	11 24       	eor	r1, r1
 b72:	2f 93       	push	r18
 b74:	3f 93       	push	r19
 b76:	4f 93       	push	r20
 b78:	5f 93       	push	r21
 b7a:	6f 93       	push	r22
 b7c:	7f 93       	push	r23
 b7e:	8f 93       	push	r24
 b80:	9f 93       	push	r25
 b82:	af 93       	push	r26
 b84:	bf 93       	push	r27
 b86:	ef 93       	push	r30
 b88:	ff 93       	push	r31
 b8a:	df 93       	push	r29
 b8c:	cf 93       	push	r28
 b8e:	cd b7       	in	r28, 0x3d	; 61
 b90:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT0Func != NULL)
 b92:	80 91 60 00 	lds	r24, 0x0060
 b96:	90 91 61 00 	lds	r25, 0x0061
 b9a:	00 97       	sbiw	r24, 0x00	; 0
 b9c:	29 f0       	breq	.+10     	; 0xba8 <__vector_1+0x40>
	{
	EXTI_pvINT0Func();
 b9e:	e0 91 60 00 	lds	r30, 0x0060
 ba2:	f0 91 61 00 	lds	r31, 0x0061
 ba6:	09 95       	icall
	}
	else
	{
		// Do Nothing
	}
}
 ba8:	cf 91       	pop	r28
 baa:	df 91       	pop	r29
 bac:	ff 91       	pop	r31
 bae:	ef 91       	pop	r30
 bb0:	bf 91       	pop	r27
 bb2:	af 91       	pop	r26
 bb4:	9f 91       	pop	r25
 bb6:	8f 91       	pop	r24
 bb8:	7f 91       	pop	r23
 bba:	6f 91       	pop	r22
 bbc:	5f 91       	pop	r21
 bbe:	4f 91       	pop	r20
 bc0:	3f 91       	pop	r19
 bc2:	2f 91       	pop	r18
 bc4:	0f 90       	pop	r0
 bc6:	0f be       	out	0x3f, r0	; 63
 bc8:	0f 90       	pop	r0
 bca:	1f 90       	pop	r1
 bcc:	18 95       	reti

00000bce <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
 bce:	1f 92       	push	r1
 bd0:	0f 92       	push	r0
 bd2:	0f b6       	in	r0, 0x3f	; 63
 bd4:	0f 92       	push	r0
 bd6:	11 24       	eor	r1, r1
 bd8:	2f 93       	push	r18
 bda:	3f 93       	push	r19
 bdc:	4f 93       	push	r20
 bde:	5f 93       	push	r21
 be0:	6f 93       	push	r22
 be2:	7f 93       	push	r23
 be4:	8f 93       	push	r24
 be6:	9f 93       	push	r25
 be8:	af 93       	push	r26
 bea:	bf 93       	push	r27
 bec:	ef 93       	push	r30
 bee:	ff 93       	push	r31
 bf0:	df 93       	push	r29
 bf2:	cf 93       	push	r28
 bf4:	cd b7       	in	r28, 0x3d	; 61
 bf6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT1Func != NULL)
 bf8:	80 91 62 00 	lds	r24, 0x0062
 bfc:	90 91 63 00 	lds	r25, 0x0063
 c00:	00 97       	sbiw	r24, 0x00	; 0
 c02:	29 f0       	breq	.+10     	; 0xc0e <__vector_2+0x40>
	{
	EXTI_pvINT1Func();
 c04:	e0 91 62 00 	lds	r30, 0x0062
 c08:	f0 91 63 00 	lds	r31, 0x0063
 c0c:	09 95       	icall
	}
	else
	{
		// Do Nothing
	}
}
 c0e:	cf 91       	pop	r28
 c10:	df 91       	pop	r29
 c12:	ff 91       	pop	r31
 c14:	ef 91       	pop	r30
 c16:	bf 91       	pop	r27
 c18:	af 91       	pop	r26
 c1a:	9f 91       	pop	r25
 c1c:	8f 91       	pop	r24
 c1e:	7f 91       	pop	r23
 c20:	6f 91       	pop	r22
 c22:	5f 91       	pop	r21
 c24:	4f 91       	pop	r20
 c26:	3f 91       	pop	r19
 c28:	2f 91       	pop	r18
 c2a:	0f 90       	pop	r0
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	0f 90       	pop	r0
 c30:	1f 90       	pop	r1
 c32:	18 95       	reti

00000c34 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 c34:	1f 92       	push	r1
 c36:	0f 92       	push	r0
 c38:	0f b6       	in	r0, 0x3f	; 63
 c3a:	0f 92       	push	r0
 c3c:	11 24       	eor	r1, r1
 c3e:	2f 93       	push	r18
 c40:	3f 93       	push	r19
 c42:	4f 93       	push	r20
 c44:	5f 93       	push	r21
 c46:	6f 93       	push	r22
 c48:	7f 93       	push	r23
 c4a:	8f 93       	push	r24
 c4c:	9f 93       	push	r25
 c4e:	af 93       	push	r26
 c50:	bf 93       	push	r27
 c52:	ef 93       	push	r30
 c54:	ff 93       	push	r31
 c56:	df 93       	push	r29
 c58:	cf 93       	push	r28
 c5a:	cd b7       	in	r28, 0x3d	; 61
 c5c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT2Func != NULL)
 c5e:	80 91 64 00 	lds	r24, 0x0064
 c62:	90 91 65 00 	lds	r25, 0x0065
 c66:	00 97       	sbiw	r24, 0x00	; 0
 c68:	29 f0       	breq	.+10     	; 0xc74 <__vector_3+0x40>
	{
	EXTI_pvINT2Func();
 c6a:	e0 91 64 00 	lds	r30, 0x0064
 c6e:	f0 91 65 00 	lds	r31, 0x0065
 c72:	09 95       	icall
	}
	else
	{
		// Do Nothing
	}
}
 c74:	cf 91       	pop	r28
 c76:	df 91       	pop	r29
 c78:	ff 91       	pop	r31
 c7a:	ef 91       	pop	r30
 c7c:	bf 91       	pop	r27
 c7e:	af 91       	pop	r26
 c80:	9f 91       	pop	r25
 c82:	8f 91       	pop	r24
 c84:	7f 91       	pop	r23
 c86:	6f 91       	pop	r22
 c88:	5f 91       	pop	r21
 c8a:	4f 91       	pop	r20
 c8c:	3f 91       	pop	r19
 c8e:	2f 91       	pop	r18
 c90:	0f 90       	pop	r0
 c92:	0f be       	out	0x3f, r0	; 63
 c94:	0f 90       	pop	r0
 c96:	1f 90       	pop	r1
 c98:	18 95       	reti

00000c9a <GIE_voidEnable>:
#include"BIT_CALC.h"
#include"GIE_Private.h"
#include"GIE_Interface.h"

void GIE_voidEnable(void)
{
 c9a:	df 93       	push	r29
 c9c:	cf 93       	push	r28
 c9e:	cd b7       	in	r28, 0x3d	; 61
 ca0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 ca2:	af e5       	ldi	r26, 0x5F	; 95
 ca4:	b0 e0       	ldi	r27, 0x00	; 0
 ca6:	ef e5       	ldi	r30, 0x5F	; 95
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
 caa:	80 81       	ld	r24, Z
 cac:	80 68       	ori	r24, 0x80	; 128
 cae:	8c 93       	st	X, r24
}
 cb0:	cf 91       	pop	r28
 cb2:	df 91       	pop	r29
 cb4:	08 95       	ret

00000cb6 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
 cb6:	df 93       	push	r29
 cb8:	cf 93       	push	r28
 cba:	cd b7       	in	r28, 0x3d	; 61
 cbc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
 cbe:	af e5       	ldi	r26, 0x5F	; 95
 cc0:	b0 e0       	ldi	r27, 0x00	; 0
 cc2:	ef e5       	ldi	r30, 0x5F	; 95
 cc4:	f0 e0       	ldi	r31, 0x00	; 0
 cc6:	80 81       	ld	r24, Z
 cc8:	8f 77       	andi	r24, 0x7F	; 127
 cca:	8c 93       	st	X, r24
}
 ccc:	cf 91       	pop	r28
 cce:	df 91       	pop	r29
 cd0:	08 95       	ret

00000cd2 <INT0_ISR>:
#include"DIO_Interface.h"
#include"GIE_Interface.h"
#include"EXTI_Interface.h"

void INT0_ISR(void)
{
 cd2:	df 93       	push	r29
 cd4:	cf 93       	push	r28
 cd6:	cd b7       	in	r28, 0x3d	; 61
 cd8:	de b7       	in	r29, 0x3e	; 62
	static u8 flag =0;
	DIO_u8_SetPin_value(Group_C, DIO_u8_Pin_0, TOG_BIT(flag,0));
 cda:	90 91 66 00 	lds	r25, 0x0066
 cde:	81 e0       	ldi	r24, 0x01	; 1
 ce0:	89 27       	eor	r24, r25
 ce2:	80 93 66 00 	sts	0x0066, r24
 ce6:	90 91 66 00 	lds	r25, 0x0066
 cea:	82 e0       	ldi	r24, 0x02	; 2
 cec:	60 e0       	ldi	r22, 0x00	; 0
 cee:	49 2f       	mov	r20, r25
 cf0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8_SetPin_value>
}
 cf4:	cf 91       	pop	r28
 cf6:	df 91       	pop	r29
 cf8:	08 95       	ret

00000cfa <INT1_ISR>:
void INT1_ISR(void)
{
 cfa:	df 93       	push	r29
 cfc:	cf 93       	push	r28
 cfe:	cd b7       	in	r28, 0x3d	; 61
 d00:	de b7       	in	r29, 0x3e	; 62
	static u8 flag =0;
	DIO_u8_SetPin_value(Group_C, DIO_u8_Pin_1, TOG_BIT(flag,0));
 d02:	90 91 67 00 	lds	r25, 0x0067
 d06:	81 e0       	ldi	r24, 0x01	; 1
 d08:	89 27       	eor	r24, r25
 d0a:	80 93 67 00 	sts	0x0067, r24
 d0e:	90 91 67 00 	lds	r25, 0x0067
 d12:	82 e0       	ldi	r24, 0x02	; 2
 d14:	61 e0       	ldi	r22, 0x01	; 1
 d16:	49 2f       	mov	r20, r25
 d18:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8_SetPin_value>
}
 d1c:	cf 91       	pop	r28
 d1e:	df 91       	pop	r29
 d20:	08 95       	ret

00000d22 <INT2_ISR>:
void INT2_ISR(void)
{
 d22:	df 93       	push	r29
 d24:	cf 93       	push	r28
 d26:	cd b7       	in	r28, 0x3d	; 61
 d28:	de b7       	in	r29, 0x3e	; 62
	static u8 flag =0;
	DIO_u8_SetPin_value(Group_C, DIO_u8_Pin_2, TOG_BIT(flag,0));
 d2a:	90 91 68 00 	lds	r25, 0x0068
 d2e:	81 e0       	ldi	r24, 0x01	; 1
 d30:	89 27       	eor	r24, r25
 d32:	80 93 68 00 	sts	0x0068, r24
 d36:	90 91 68 00 	lds	r25, 0x0068
 d3a:	82 e0       	ldi	r24, 0x02	; 2
 d3c:	62 e0       	ldi	r22, 0x02	; 2
 d3e:	49 2f       	mov	r20, r25
 d40:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8_SetPin_value>
}
 d44:	cf 91       	pop	r28
 d46:	df 91       	pop	r29
 d48:	08 95       	ret

00000d4a <main>:


void main(void)
{
 d4a:	df 93       	push	r29
 d4c:	cf 93       	push	r28
 d4e:	cd b7       	in	r28, 0x3d	; 61
 d50:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_SetPin_Dir(Group_D, DIO_u8_Pin_2, DIO_u8_Input);
 d52:	83 e0       	ldi	r24, 0x03	; 3
 d54:	62 e0       	ldi	r22, 0x02	; 2
 d56:	40 e0       	ldi	r20, 0x00	; 0
 d58:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_value(Group_D, DIO_u8_Pin_2, DIO_u8_High);
 d5c:	83 e0       	ldi	r24, 0x03	; 3
 d5e:	62 e0       	ldi	r22, 0x02	; 2
 d60:	41 e0       	ldi	r20, 0x01	; 1
 d62:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8_SetPin_value>

	DIO_u8_SetPort_Dir(Group_C, DIO_u8_Output);
 d66:	82 e0       	ldi	r24, 0x02	; 2
 d68:	61 e0       	ldi	r22, 0x01	; 1
 d6a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_u8_SetPort_Dir>

	EXTI_voidINT0_Init();
 d6e:	0e 94 a2 03 	call	0x744	; 0x744 <EXTI_voidINT0_Init>

	EXTI_u8INT0SetCallback(&INT0_ISR);
 d72:	89 e6       	ldi	r24, 0x69	; 105
 d74:	96 e0       	ldi	r25, 0x06	; 6
 d76:	0e 94 5a 05 	call	0xab4	; 0xab4 <EXTI_u8INT0SetCallback>
	EXTI_u8INT1SetCallback(&INT1_ISR);
 d7a:	8d e7       	ldi	r24, 0x7D	; 125
 d7c:	96 e0       	ldi	r25, 0x06	; 6
 d7e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <EXTI_u8INT1SetCallback>
	EXTI_u8INT2SetCallback(&INT2_ISR);
 d82:	81 e9       	ldi	r24, 0x91	; 145
 d84:	96 e0       	ldi	r25, 0x06	; 6
 d86:	0e 94 96 05 	call	0xb2c	; 0xb2c <EXTI_u8INT2SetCallback>

	GIE_voidEnable();
 d8a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GIE_voidEnable>
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <main+0x44>

00000d90 <_exit>:
 d90:	f8 94       	cli

00000d92 <__stop_program>:
 d92:	ff cf       	rjmp	.-2      	; 0xd92 <__stop_program>
