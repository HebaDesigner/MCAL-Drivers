
ADC_New.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001f58  00001fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800068  00800068  00001ff4  2**0
                  ALLOC
  3 .stab         000019b0  00000000  00000000  00001ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f00  00000000  00000000  000039a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000048a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000049e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000679d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008438  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008825  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008ff3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a5 37       	cpi	r26, 0x75	; 117
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e5       	ldi	r30, 0x58	; 88
      78:	ff e1       	ldi	r31, 0x1F	; 31
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <main>
      8a:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:


u8 ADC_u8BusyState= IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if VOLT_REF == AREF			//AREF, Internal Vref turned off
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);

#elif VOLT_REF == AVCC			//AVCC with external capacitor at AREF pin
	CLR_BIT(ADMUX, ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX, ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24

#if BITS_ADJUST == BITS_8			/*ACTIVATE Left Adjust*/
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif BITS_ADJUST == BITS_10
	CLR_BIT(ADMUX, ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
#error "BITS_ADJUST is not exist"

#endif

	/*Set Prescaler to divide from Div_2 to Div_128*/   //select Div_128 //with Bit masking Not #if
	ADCSRA = ((ADCSRA &= 0b11111000) | ADC_PRESC);
     b78:	26 e2       	ldi	r18, 0x26	; 38
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	a6 e2       	ldi	r26, 0x26	; 38
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e6 e2       	ldi	r30, 0x26	; 38
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	88 7f       	andi	r24, 0xF8	; 248
     b88:	8c 93       	st	X, r24
     b8a:	8c 91       	ld	r24, X
     b8c:	87 60       	ori	r24, 0x07	; 7
     b8e:	f9 01       	movw	r30, r18
     b90:	80 83       	st	Z, r24

	/*ADC ENABLE*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24

}
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 copy_u8Channel, u8* copy_pu8Reading)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	29 97       	sbiw	r28, 0x09	; 9
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	8f 83       	std	Y+7, r24	; 0x07
     bbc:	79 87       	std	Y+9, r23	; 0x09
     bbe:	68 87       	std	Y+8, r22	; 0x08
	u32 Local_u32Counter=0;
     bc0:	1b 82       	std	Y+3, r1	; 0x03
     bc2:	1c 82       	std	Y+4, r1	; 0x04
     bc4:	1d 82       	std	Y+5, r1	; 0x05
     bc6:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8ErrorState=OK;
     bc8:	1a 82       	std	Y+2, r1	; 0x02

	if(ADC_u8BusyState == IDLE)
     bca:	80 91 71 00 	lds	r24, 0x0071
     bce:	88 23       	and	r24, r24
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <ADC_u8StartConversionSynch+0x2e>
     bd2:	5b c0       	rjmp	.+182    	; 0xc8a <ADC_u8StartConversionSynch+0xe4>
	{
		/*ADC is now BUSY*/
		ADC_u8BusyState= BUSY;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 71 00 	sts	0x0071, r24

		/*Bit_Mask	1: Clear bits in AMUX register
					2: Set the required channel into the MUX bits*/
		ADMUX = ((ADMUX &= 0b11100000) | copy_u8Channel);
     bda:	27 e2       	ldi	r18, 0x27	; 39
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	a7 e2       	ldi	r26, 0x27	; 39
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e7 e2       	ldi	r30, 0x27	; 39
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 7e       	andi	r24, 0xE0	; 224
     bea:	8c 93       	st	X, r24
     bec:	9c 91       	ld	r25, X
     bee:	8f 81       	ldd	r24, Y+7	; 0x07
     bf0:	89 2b       	or	r24, r25
     bf2:	f9 01       	movw	r30, r18
     bf4:	80 83       	st	Z, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	8c 93       	st	X, r24
     c04:	0b c0       	rjmp	.+22     	; 0xc1c <ADC_u8StartConversionSynch+0x76>

		/*Polling (busy waiting) until the conversion complete flag is set of counter reaching timeout value*/
		while (((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	ad 81       	ldd	r26, Y+5	; 0x05
     c0c:	be 81       	ldd	r27, Y+6	; 0x06
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	a1 1d       	adc	r26, r1
     c12:	b1 1d       	adc	r27, r1
     c14:	8b 83       	std	Y+3, r24	; 0x03
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	ad 83       	std	Y+5, r26	; 0x05
     c1a:	be 83       	std	Y+6, r27	; 0x06

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set of counter reaching timeout value*/
		while (((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
     c1c:	e6 e2       	ldi	r30, 0x26	; 38
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	82 95       	swap	r24
     c24:	8f 70       	andi	r24, 0x0F	; 15
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	81 70       	andi	r24, 0x01	; 1
     c2c:	90 70       	andi	r25, 0x00	; 0
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	61 f4       	brne	.+24     	; 0xc4a <ADC_u8StartConversionSynch+0xa4>
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	ad 81       	ldd	r26, Y+5	; 0x05
     c38:	be 81       	ldd	r27, Y+6	; 0x06
     c3a:	80 35       	cpi	r24, 0x50	; 80
     c3c:	f3 ec       	ldi	r31, 0xC3	; 195
     c3e:	9f 07       	cpc	r25, r31
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	af 07       	cpc	r26, r31
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	bf 07       	cpc	r27, r31
     c48:	f1 f6       	brne	.-68     	; 0xc06 <ADC_u8StartConversionSynch+0x60>
		{
			Local_u32Counter++;
		}
		if (Local_u32Counter == ADC_u32TIMEOUT)
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	ad 81       	ldd	r26, Y+5	; 0x05
     c50:	be 81       	ldd	r27, Y+6	; 0x06
     c52:	80 35       	cpi	r24, 0x50	; 80
     c54:	23 ec       	ldi	r18, 0xC3	; 195
     c56:	92 07       	cpc	r25, r18
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	a2 07       	cpc	r26, r18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	b2 07       	cpc	r27, r18
     c60:	19 f4       	brne	.+6      	; 0xc68 <ADC_u8StartConversionSynch+0xc2>
		{
			/*loop is broken because of timeout is reached*/
			u8 Local_u8ErrorState = NOK;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	13 c0       	rjmp	.+38     	; 0xc8e <ADC_u8StartConversionSynch+0xe8>
		}
		else
		{
			/*loop is broken because flag is raised*/
			/*Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c68:	a6 e2       	ldi	r26, 0x26	; 38
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e6 e2       	ldi	r30, 0x26	; 38
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 61       	ori	r24, 0x10	; 16
     c74:	8c 93       	st	X, r24

			/*Return the reading*/
			*copy_pu8Reading = ADC;
     c76:	e4 e2       	ldi	r30, 0x24	; 36
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	e8 85       	ldd	r30, Y+8	; 0x08
     c80:	f9 85       	ldd	r31, Y+9	; 0x09
     c82:	80 83       	st	Z, r24

			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState= IDLE;
     c84:	10 92 71 00 	sts	0x0071, r1
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <ADC_u8StartConversionSynch+0xe8>
	SET_BIT(ADCSRA,ADCSRA_ADSC);
#endif*/

	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c90:	29 96       	adiw	r28, 0x09	; 9
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 copy_u8Channel, u8* copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <ADC_u8StartConversionAsynch+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <ADC_u8StartConversionAsynch+0x8>
     caa:	00 d0       	rcall	.+0      	; 0xcac <ADC_u8StartConversionAsynch+0xa>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	8a 83       	std	Y+2, r24	; 0x02
     cb2:	7c 83       	std	Y+4, r23	; 0x04
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	5e 83       	std	Y+6, r21	; 0x06
     cb8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_uErrorState=OK;
     cba:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE)
     cbc:	80 91 71 00 	lds	r24, 0x0071
     cc0:	88 23       	and	r24, r24
     cc2:	c9 f5       	brne	.+114    	; 0xd36 <ADC_u8StartConversionAsynch+0x94>
	{
		if((copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	21 f0       	breq	.+8      	; 0xcd4 <ADC_u8StartConversionAsynch+0x32>
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	19 f4       	brne	.+6      	; 0xcda <ADC_u8StartConversionAsynch+0x38>
		{
			Local_uErrorState = NULL_POINTER;
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	30 c0       	rjmp	.+96     	; 0xd3a <ADC_u8StartConversionAsynch+0x98>
		}
		else
		{
			/*make ADC busy in order not to work until being idle*/
			ADC_u8BusyState= BUSY;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 71 00 	sts	0x0071, r24

			/*make ISR source: single channel asynchronous*/
			ADC_u8ISRSource = Single_Channel_Async;
     ce0:	10 92 73 00 	sts	0x0073, r1

			/*Initialize the reading variable globally*/
			ADC_pu8Reading = copy_pu8Reading;
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	90 93 69 00 	sts	0x0069, r25
     cec:	80 93 68 00 	sts	0x0068, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	90 93 6b 00 	sts	0x006B, r25
     cf8:	80 93 6a 00 	sts	0x006A, r24

			/*Bit_Mask	1: Clear bits in AMUX register
						2: Set the required channel into the MUX bits*/
			ADMUX = ((ADMUX &= 0b11100000)|copy_u8Channel);
     cfc:	27 e2       	ldi	r18, 0x27	; 39
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	a7 e2       	ldi	r26, 0x27	; 39
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e7 e2       	ldi	r30, 0x27	; 39
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 7e       	andi	r24, 0xE0	; 224
     d0c:	8c 93       	st	X, r24
     d0e:	9c 91       	ld	r25, X
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	89 2b       	or	r24, r25
     d14:	f9 01       	movw	r30, r18
     d16:	80 83       	st	Z, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d18:	a6 e2       	ldi	r26, 0x26	; 38
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e6 e2       	ldi	r30, 0x26	; 38
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 64       	ori	r24, 0x40	; 64
     d24:	8c 93       	st	X, r24

			/*ADC interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d26:	a6 e2       	ldi	r26, 0x26	; 38
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e6 e2       	ldi	r30, 0x26	; 38
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 60       	ori	r24, 0x08	; 8
     d32:	8c 93       	st	X, r24
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <ADC_u8StartConversionAsynch+0x98>
		}

	}
	else
	{
		Local_uErrorState = BUSY_FUNC;
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_uErrorState;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3c:	26 96       	adiw	r28, 0x06	; 6
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain* Copy_Chain)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <ADC_u8StartChainAsynch+0x6>
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9b 83       	std	Y+3, r25	; 0x03
     d5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_uErrorState = OK;
     d5e:	19 82       	std	Y+1, r1	; 0x01

	//Check Null Pointer
	if(Copy_Chain == NULL)
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	19 f4       	brne	.+6      	; 0xd6e <ADC_u8StartChainAsynch+0x20>
	{
		Local_uErrorState = NULL_POINTER;
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	54 c0       	rjmp	.+168    	; 0xe16 <ADC_u8StartChainAsynch+0xc8>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
     d6e:	80 91 71 00 	lds	r24, 0x0071
     d72:	88 23       	and	r24, r24
     d74:	09 f0       	breq	.+2      	; 0xd78 <ADC_u8StartChainAsynch+0x2a>
     d76:	4d c0       	rjmp	.+154    	; 0xe12 <ADC_u8StartChainAsynch+0xc4>
		{
			//make ADC busy in order not to work until being idle
			ADC_u8BusyState= BUSY;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 71 00 	sts	0x0071, r24

			/*make ISR source: Chain asynchronous*/
			ADC_u8ISRSource = Chain_Async;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 73 00 	sts	0x0073, r24

			//Initialize the Chain Channel Array globally
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;
     d84:	ea 81       	ldd	r30, Y+2	; 0x02
     d86:	fb 81       	ldd	r31, Y+3	; 0x03
     d88:	80 81       	ld	r24, Z
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	90 93 6d 00 	sts	0x006D, r25
     d90:	80 93 6c 00 	sts	0x006C, r24

			//Initialize the result array globally
			ADC_pu16ChainResultArr = Copy_Chain->Res;
     d94:	ea 81       	ldd	r30, Y+2	; 0x02
     d96:	fb 81       	ldd	r31, Y+3	; 0x03
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	90 93 6f 00 	sts	0x006F, r25
     da0:	80 93 6e 00 	sts	0x006E, r24

			//Initialize the Chain Size globally
			ADC_u8ChainSize = Copy_Chain->Size;
     da4:	ea 81       	ldd	r30, Y+2	; 0x02
     da6:	fb 81       	ldd	r31, Y+3	; 0x03
     da8:	84 81       	ldd	r24, Z+4	; 0x04
     daa:	80 93 72 00 	sts	0x0072, r24

			//Initialize the callback notification function globally
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotoficationFunc;
     dae:	ea 81       	ldd	r30, Y+2	; 0x02
     db0:	fb 81       	ldd	r31, Y+3	; 0x03
     db2:	85 81       	ldd	r24, Z+5	; 0x05
     db4:	96 81       	ldd	r25, Z+6	; 0x06
     db6:	90 93 6b 00 	sts	0x006B, r25
     dba:	80 93 6a 00 	sts	0x006A, r24

			//Initialize current conversation index globally
			ADC_pu8ChainConversationIndex = 0;
     dbe:	10 92 70 00 	sts	0x0070, r1

			//Bit_Mask	1: Clear bits in AMUX register
			//          2: Set the required channel (first channel) into the MUX bits
			ADMUX = ((ADMUX &= 0b11100000) | ADC_pu8ChainChannelArr[ADC_pu8ChainConversationIndex]);
     dc2:	47 e2       	ldi	r20, 0x27	; 39
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	a7 e2       	ldi	r26, 0x27	; 39
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e7 e2       	ldi	r30, 0x27	; 39
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 7e       	andi	r24, 0xE0	; 224
     dd2:	8c 93       	st	X, r24
     dd4:	6c 91       	ld	r22, X
     dd6:	20 91 6c 00 	lds	r18, 0x006C
     dda:	30 91 6d 00 	lds	r19, 0x006D
     dde:	80 91 70 00 	lds	r24, 0x0070
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	f9 01       	movw	r30, r18
     de8:	e8 0f       	add	r30, r24
     dea:	f9 1f       	adc	r31, r25
     dec:	80 81       	ld	r24, Z
     dee:	86 2b       	or	r24, r22
     df0:	fa 01       	movw	r30, r20
     df2:	80 83       	st	Z, r24

			//Start Conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     df4:	a6 e2       	ldi	r26, 0x26	; 38
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e6 e2       	ldi	r30, 0x26	; 38
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 64       	ori	r24, 0x40	; 64
     e00:	8c 93       	st	X, r24

			//ADC interrupt Enable
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e02:	a6 e2       	ldi	r26, 0x26	; 38
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e6 e2       	ldi	r30, 0x26	; 38
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 60       	ori	r24, 0x08	; 8
     e0e:	8c 93       	st	X, r24
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <ADC_u8StartChainAsynch+0xc8>
		}
		else
		{
			Local_uErrorState = BUSY_FUNC;
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_uErrorState;
     e16:	89 81       	ldd	r24, Y+1	; 0x01
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <__vector_16>:


void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	2f 93       	push	r18
     e30:	3f 93       	push	r19
     e32:	4f 93       	push	r20
     e34:	5f 93       	push	r21
     e36:	6f 93       	push	r22
     e38:	7f 93       	push	r23
     e3a:	8f 93       	push	r24
     e3c:	9f 93       	push	r25
     e3e:	af 93       	push	r26
     e40:	bf 93       	push	r27
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == Single_Channel_Async)
     e4e:	80 91 73 00 	lds	r24, 0x0073
     e52:	88 23       	and	r24, r24
     e54:	c9 f4       	brne	.+50     	; 0xe88 <__vector_16+0x64>
	{
		/*Read ADC result*/
		*ADC_pu8Reading = ADC;
     e56:	a0 91 68 00 	lds	r26, 0x0068
     e5a:	b0 91 69 00 	lds	r27, 0x0069
     e5e:	e4 e2       	ldi	r30, 0x24	; 36
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	8d 93       	st	X+, r24
     e68:	9c 93       	st	X, r25

		/*make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
     e6a:	10 92 71 00 	sts	0x0071, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
     e6e:	e0 91 6a 00 	lds	r30, 0x006A
     e72:	f0 91 6b 00 	lds	r31, 0x006B
     e76:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     e78:	a6 e2       	ldi	r26, 0x26	; 38
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e6 e2       	ldi	r30, 0x26	; 38
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	87 7f       	andi	r24, 0xF7	; 247
     e84:	8c 93       	st	X, r24
     e86:	53 c0       	rjmp	.+166    	; 0xf2e <__vector_16+0x10a>
	}
	else if(ADC_u8ISRSource == Chain_Async)
     e88:	80 91 73 00 	lds	r24, 0x0073
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	09 f0       	breq	.+2      	; 0xe92 <__vector_16+0x6e>
     e90:	4e c0       	rjmp	.+156    	; 0xf2e <__vector_16+0x10a>
	{
		/*Read ADC result*/
		ADC_pu16ChainResultArr[ADC_pu8ChainConversationIndex] = ADC;
     e92:	20 91 6e 00 	lds	r18, 0x006E
     e96:	30 91 6f 00 	lds	r19, 0x006F
     e9a:	80 91 70 00 	lds	r24, 0x0070
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	d9 01       	movw	r26, r18
     ea8:	a8 0f       	add	r26, r24
     eaa:	b9 1f       	adc	r27, r25
     eac:	e4 e2       	ldi	r30, 0x24	; 36
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	9c 93       	st	X, r25
     eb8:	8e 93       	st	-X, r24

		/*Increment Index*/
		ADC_pu8ChainConversationIndex++;
     eba:	80 91 70 00 	lds	r24, 0x0070
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 70 00 	sts	0x0070, r24

		/*check chain is finished or not*/
		if(ADC_pu8ChainConversationIndex == ADC_u8ChainSize)
     ec4:	90 91 70 00 	lds	r25, 0x0070
     ec8:	80 91 72 00 	lds	r24, 0x0072
     ecc:	98 17       	cp	r25, r24
     ece:	79 f4       	brne	.+30     	; 0xeee <__vector_16+0xca>
		{
			/*Chain is finished*/

			/*make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
     ed0:	10 92 71 00 	sts	0x0071, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
     ed4:	e0 91 6a 00 	lds	r30, 0x006A
     ed8:	f0 91 6b 00 	lds	r31, 0x006B
     edc:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     ede:	a6 e2       	ldi	r26, 0x26	; 38
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	87 7f       	andi	r24, 0xF7	; 247
     eea:	8c 93       	st	X, r24
     eec:	20 c0       	rjmp	.+64     	; 0xf2e <__vector_16+0x10a>
		{
			/*chain is not finished*/

			//Bit_Mask	1: Clear bits in AMUX register
			//          2: Set the required channel (next channel) into the MUX bits
			ADMUX = ((ADMUX &= 0b11100000)|ADC_pu8ChainChannelArr[ADC_pu8ChainConversationIndex]);
     eee:	47 e2       	ldi	r20, 0x27	; 39
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 7e       	andi	r24, 0xE0	; 224
     efe:	8c 93       	st	X, r24
     f00:	6c 91       	ld	r22, X
     f02:	20 91 6c 00 	lds	r18, 0x006C
     f06:	30 91 6d 00 	lds	r19, 0x006D
     f0a:	80 91 70 00 	lds	r24, 0x0070
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	e8 0f       	add	r30, r24
     f16:	f9 1f       	adc	r31, r25
     f18:	80 81       	ld	r24, Z
     f1a:	86 2b       	or	r24, r22
     f1c:	fa 01       	movw	r30, r20
     f1e:	80 83       	st	Z, r24

			/*Start new Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f20:	a6 e2       	ldi	r26, 0x26	; 38
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e6 e2       	ldi	r30, 0x26	; 38
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	8c 93       	st	X, r24
		}
	}
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "util/delay.h"

#define F_CPU 8000000

void CLCD_voidInit(void){
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	6c 97       	sbiw	r28, 0x1c	; 28
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61

	DIO_u8_SetPort_Dir(CLCD_DATA_PORT,DIO_u8_PORT_Output);
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	6f ef       	ldi	r22, 0xFF	; 255
     f6c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <DIO_u8_SetPort_Dir>

	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_Output);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Output);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Output);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	62 e0       	ldi	r22, 0x02	; 2
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_u8_SetPin_Dir>

	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e2       	ldi	r26, 0x20	; 32
     f9e:	b2 e4       	ldi	r27, 0x42	; 66
     fa0:	89 8f       	std	Y+25, r24	; 0x19
     fa2:	9a 8f       	std	Y+26, r25	; 0x1a
     fa4:	ab 8f       	std	Y+27, r26	; 0x1b
     fa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa8:	69 8d       	ldd	r22, Y+25	; 0x19
     faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	4a ef       	ldi	r20, 0xFA	; 250
     fb6:	54 e4       	ldi	r21, 0x44	; 68
     fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	8d 8b       	std	Y+21, r24	; 0x15
     fc2:	9e 8b       	std	Y+22, r25	; 0x16
     fc4:	af 8b       	std	Y+23, r26	; 0x17
     fc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc8:	6d 89       	ldd	r22, Y+21	; 0x15
     fca:	7e 89       	ldd	r23, Y+22	; 0x16
     fcc:	8f 89       	ldd	r24, Y+23	; 0x17
     fce:	98 8d       	ldd	r25, Y+24	; 0x18
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e8       	ldi	r20, 0x80	; 128
     fd6:	5f e3       	ldi	r21, 0x3F	; 63
     fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fdc:	88 23       	and	r24, r24
     fde:	2c f4       	brge	.+10     	; 0xfea <CLCD_voidInit+0x96>
		__ticks = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <CLCD_voidInit+0x114>
	else if (__tmp > 65535)
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	3f ef       	ldi	r19, 0xFF	; 255
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	57 e4       	ldi	r21, 0x47	; 71
     ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ffe:	18 16       	cp	r1, r24
    1000:	4c f5       	brge	.+82     	; 0x1054 <CLCD_voidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1002:	69 8d       	ldd	r22, Y+25	; 0x19
    1004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
    102a:	0f c0       	rjmp	.+30     	; 0x104a <CLCD_voidInit+0xf6>
    102c:	88 ec       	ldi	r24, 0xC8	; 200
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9a 8b       	std	Y+18, r25	; 0x12
    1032:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1034:	89 89       	ldd	r24, Y+17	; 0x11
    1036:	9a 89       	ldd	r25, Y+18	; 0x12
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <CLCD_voidInit+0xe4>
    103c:	9a 8b       	std	Y+18, r25	; 0x12
    103e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1040:	8b 89       	ldd	r24, Y+19	; 0x13
    1042:	9c 89       	ldd	r25, Y+20	; 0x14
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9c 8b       	std	Y+20, r25	; 0x14
    1048:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104a:	8b 89       	ldd	r24, Y+19	; 0x13
    104c:	9c 89       	ldd	r25, Y+20	; 0x14
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	69 f7       	brne	.-38     	; 0x102c <CLCD_voidInit+0xd8>
    1052:	14 c0       	rjmp	.+40     	; 0x107c <CLCD_voidInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1054:	6d 89       	ldd	r22, Y+21	; 0x15
    1056:	7e 89       	ldd	r23, Y+22	; 0x16
    1058:	8f 89       	ldd	r24, Y+23	; 0x17
    105a:	98 8d       	ldd	r25, Y+24	; 0x18
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9c 8b       	std	Y+20, r25	; 0x14
    1066:	8b 8b       	std	Y+19, r24	; 0x13
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	98 8b       	std	Y+16, r25	; 0x10
    106e:	8f 87       	std	Y+15, r24	; 0x0f
    1070:	8f 85       	ldd	r24, Y+15	; 0x0f
    1072:	98 89       	ldd	r25, Y+16	; 0x10
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <CLCD_voidInit+0x120>
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	8f 87       	std	Y+15, r24	; 0x0f

	/*wait for more than 30 msec*/
	_delay_ms(40);

	CLCD_voidSendCommand(lcd_Home);
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_FunctionSet8bit);
    1082:	88 e3       	ldi	r24, 0x38	; 56
    1084:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_DisplayOn);
    1088:	8c e0       	ldi	r24, 0x0C	; 12
    108a:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_Clear);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_EntryMode_Incr);
    1094:	86 e0       	ldi	r24, 0x06	; 6
    1096:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b0 e4       	ldi	r27, 0x40	; 64
    10a2:	8b 87       	std	Y+11, r24	; 0x0b
    10a4:	9c 87       	std	Y+12, r25	; 0x0c
    10a6:	ad 87       	std	Y+13, r26	; 0x0d
    10a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	4a ef       	ldi	r20, 0xFA	; 250
    10b8:	54 e4       	ldi	r21, 0x44	; 68
    10ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	8f 83       	std	Y+7, r24	; 0x07
    10c4:	98 87       	std	Y+8, r25	; 0x08
    10c6:	a9 87       	std	Y+9, r26	; 0x09
    10c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ca:	6f 81       	ldd	r22, Y+7	; 0x07
    10cc:	78 85       	ldd	r23, Y+8	; 0x08
    10ce:	89 85       	ldd	r24, Y+9	; 0x09
    10d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e8       	ldi	r20, 0x80	; 128
    10d8:	5f e3       	ldi	r21, 0x3F	; 63
    10da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10de:	88 23       	and	r24, r24
    10e0:	2c f4       	brge	.+10     	; 0x10ec <CLCD_voidInit+0x198>
		__ticks = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
    10ea:	3f c0       	rjmp	.+126    	; 0x116a <CLCD_voidInit+0x216>
	else if (__tmp > 65535)
    10ec:	6f 81       	ldd	r22, Y+7	; 0x07
    10ee:	78 85       	ldd	r23, Y+8	; 0x08
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	3f ef       	ldi	r19, 0xFF	; 255
    10f8:	4f e7       	ldi	r20, 0x7F	; 127
    10fa:	57 e4       	ldi	r21, 0x47	; 71
    10fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1100:	18 16       	cp	r1, r24
    1102:	4c f5       	brge	.+82     	; 0x1156 <CLCD_voidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1104:	6b 85       	ldd	r22, Y+11	; 0x0b
    1106:	7c 85       	ldd	r23, Y+12	; 0x0c
    1108:	8d 85       	ldd	r24, Y+13	; 0x0d
    110a:	9e 85       	ldd	r25, Y+14	; 0x0e
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e2       	ldi	r20, 0x20	; 32
    1112:	51 e4       	ldi	r21, 0x41	; 65
    1114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	bc 01       	movw	r22, r24
    111e:	cd 01       	movw	r24, r26
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	0f c0       	rjmp	.+30     	; 0x114c <CLCD_voidInit+0x1f8>
    112e:	88 ec       	ldi	r24, 0xC8	; 200
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	8b 83       	std	Y+3, r24	; 0x03
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <CLCD_voidInit+0x1e6>
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	9e 81       	ldd	r25, Y+6	; 0x06
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	69 f7       	brne	.-38     	; 0x112e <CLCD_voidInit+0x1da>
    1154:	14 c0       	rjmp	.+40     	; 0x117e <CLCD_voidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1156:	6f 81       	ldd	r22, Y+7	; 0x07
    1158:	78 85       	ldd	r23, Y+8	; 0x08
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <CLCD_voidInit+0x222>
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    117e:	6c 96       	adiw	r28, 0x1c	; 28
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command){
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	2f 97       	sbiw	r28, 0x0f	; 15
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	8f 87       	std	Y+15, r24	; 0x0f

	/*Set RS pin to low for command*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_Low);
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
	/*Set Rw pin to low for write*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Low);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
	/*Set command to data pins*/
	DIO_u8_SetPort_value(CLCD_DATA_PORT,Copy_u8Command);
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    11be:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_u8_SetPort_value>
	/*Set enable pulse*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	62 e0       	ldi	r22, 0x02	; 2
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_High);
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	62 e0       	ldi	r22, 0x02	; 2
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 e0       	ldi	r26, 0x00	; 0
    11dc:	b0 e4       	ldi	r27, 0x40	; 64
    11de:	8b 87       	std	Y+11, r24	; 0x0b
    11e0:	9c 87       	std	Y+12, r25	; 0x0c
    11e2:	ad 87       	std	Y+13, r26	; 0x0d
    11e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4a ef       	ldi	r20, 0xFA	; 250
    11f4:	54 e4       	ldi	r21, 0x44	; 68
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	8f 83       	std	Y+7, r24	; 0x07
    1200:	98 87       	std	Y+8, r25	; 0x08
    1202:	a9 87       	std	Y+9, r26	; 0x09
    1204:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1206:	6f 81       	ldd	r22, Y+7	; 0x07
    1208:	78 85       	ldd	r23, Y+8	; 0x08
    120a:	89 85       	ldd	r24, Y+9	; 0x09
    120c:	9a 85       	ldd	r25, Y+10	; 0x0a
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e8       	ldi	r20, 0x80	; 128
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    121a:	88 23       	and	r24, r24
    121c:	2c f4       	brge	.+10     	; 0x1228 <CLCD_voidSendCommand+0x98>
		__ticks = 1;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9e 83       	std	Y+6, r25	; 0x06
    1224:	8d 83       	std	Y+5, r24	; 0x05
    1226:	3f c0       	rjmp	.+126    	; 0x12a6 <CLCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    1228:	6f 81       	ldd	r22, Y+7	; 0x07
    122a:	78 85       	ldd	r23, Y+8	; 0x08
    122c:	89 85       	ldd	r24, Y+9	; 0x09
    122e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	3f ef       	ldi	r19, 0xFF	; 255
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	57 e4       	ldi	r21, 0x47	; 71
    1238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123c:	18 16       	cp	r1, r24
    123e:	4c f5       	brge	.+82     	; 0x1292 <CLCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1240:	6b 85       	ldd	r22, Y+11	; 0x0b
    1242:	7c 85       	ldd	r23, Y+12	; 0x0c
    1244:	8d 85       	ldd	r24, Y+13	; 0x0d
    1246:	9e 85       	ldd	r25, Y+14	; 0x0e
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e2       	ldi	r20, 0x20	; 32
    124e:	51 e4       	ldi	r21, 0x41	; 65
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	bc 01       	movw	r22, r24
    125a:	cd 01       	movw	r24, r26
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 83       	std	Y+5, r24	; 0x05
    1268:	0f c0       	rjmp	.+30     	; 0x1288 <CLCD_voidSendCommand+0xf8>
    126a:	88 ec       	ldi	r24, 0xC8	; 200
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <CLCD_voidSendCommand+0xe6>
    127a:	9c 83       	std	Y+4, r25	; 0x04
    127c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	69 f7       	brne	.-38     	; 0x126a <CLCD_voidSendCommand+0xda>
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <CLCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1292:	6f 81       	ldd	r22, Y+7	; 0x07
    1294:	78 85       	ldd	r23, Y+8	; 0x08
    1296:	89 85       	ldd	r24, Y+9	; 0x09
    1298:	9a 85       	ldd	r25, Y+10	; 0x0a
    129a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 83       	std	Y+5, r24	; 0x05
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <CLCD_voidSendCommand+0x122>
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	62 e0       	ldi	r22, 0x02	; 2
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>

}
    12c4:	2f 96       	adiw	r28, 0x0f	; 15
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <CLCD_voidWriteCharctr>:

void CLCD_voidWriteCharctr(u8 Copy_u8Data){
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	2f 97       	sbiw	r28, 0x0f	; 15
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high for data*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_High);
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
		/*Set Rw pin to low for write*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Low);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
		/*Set Data to data pins*/
	DIO_u8_SetPort_value(CLCD_DATA_PORT,Copy_u8Data);
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	6f 85       	ldd	r22, Y+15	; 0x0f
    1304:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_u8_SetPort_value>
		/*Set enable pulse*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	62 e0       	ldi	r22, 0x02	; 2
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_High);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	62 e0       	ldi	r22, 0x02	; 2
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a0 e0       	ldi	r26, 0x00	; 0
    1322:	b0 e4       	ldi	r27, 0x40	; 64
    1324:	8b 87       	std	Y+11, r24	; 0x0b
    1326:	9c 87       	std	Y+12, r25	; 0x0c
    1328:	ad 87       	std	Y+13, r26	; 0x0d
    132a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132c:	6b 85       	ldd	r22, Y+11	; 0x0b
    132e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1330:	8d 85       	ldd	r24, Y+13	; 0x0d
    1332:	9e 85       	ldd	r25, Y+14	; 0x0e
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a ef       	ldi	r20, 0xFA	; 250
    133a:	54 e4       	ldi	r21, 0x44	; 68
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	8f 83       	std	Y+7, r24	; 0x07
    1346:	98 87       	std	Y+8, r25	; 0x08
    1348:	a9 87       	std	Y+9, r26	; 0x09
    134a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    134c:	6f 81       	ldd	r22, Y+7	; 0x07
    134e:	78 85       	ldd	r23, Y+8	; 0x08
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1360:	88 23       	and	r24, r24
    1362:	2c f4       	brge	.+10     	; 0x136e <CLCD_voidWriteCharctr+0x98>
		__ticks = 1;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
    136c:	3f c0       	rjmp	.+126    	; 0x13ec <CLCD_voidWriteCharctr+0x116>
	else if (__tmp > 65535)
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3f ef       	ldi	r19, 0xFF	; 255
    137a:	4f e7       	ldi	r20, 0x7F	; 127
    137c:	57 e4       	ldi	r21, 0x47	; 71
    137e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1382:	18 16       	cp	r1, r24
    1384:	4c f5       	brge	.+82     	; 0x13d8 <CLCD_voidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e2       	ldi	r20, 0x20	; 32
    1394:	51 e4       	ldi	r21, 0x41	; 65
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	0f c0       	rjmp	.+30     	; 0x13ce <CLCD_voidWriteCharctr+0xf8>
    13b0:	88 ec       	ldi	r24, 0xC8	; 200
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9c 83       	std	Y+4, r25	; 0x04
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <CLCD_voidWriteCharctr+0xe6>
    13c0:	9c 83       	std	Y+4, r25	; 0x04
    13c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	69 f7       	brne	.-38     	; 0x13b0 <CLCD_voidWriteCharctr+0xda>
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <CLCD_voidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	9e 83       	std	Y+6, r25	; 0x06
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <CLCD_voidWriteCharctr+0x122>
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	62 e0       	ldi	r22, 0x02	; 2
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_u8_SetPin_value>
}
    140a:	2f 96       	adiw	r28, 0x0f	; 15
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <CLCD_voidWriteString>:

void CLCD_voidWriteString (u8* Copy_pcString)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <CLCD_voidWriteString+0x6>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	9b 83       	std	Y+3, r25	; 0x03
    142a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    142c:	19 82       	std	Y+1, r1	; 0x01
    142e:	0e c0       	rjmp	.+28     	; 0x144c <CLCD_voidWriteString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidWriteCharctr(Copy_pcString[Local_u8Counter]);
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	fc 01       	movw	r30, r24
    143c:	e2 0f       	add	r30, r18
    143e:	f3 1f       	adc	r31, r19
    1440:	80 81       	ld	r24, Z
    1442:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>
		Local_u8Counter++;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	8f 5f       	subi	r24, 0xFF	; 255
    144a:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidWriteString (u8* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	fc 01       	movw	r30, r24
    1458:	e2 0f       	add	r30, r18
    145a:	f3 1f       	adc	r31, r19
    145c:	80 81       	ld	r24, Z
    145e:	88 23       	and	r24, r24
    1460:	39 f7       	brne	.-50     	; 0x1430 <CLCD_voidWriteString+0x14>
	{
		CLCD_voidWriteCharctr(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <CLCD_Gotoxy>:

void CLCD_Gotoxy (u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <CLCD_Gotoxy+0x6>
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	8a 83       	std	Y+2, r24	; 0x02
    147c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if (cpy_u8Xpos==0)
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	88 23       	and	r24, r24
    1482:	19 f4       	brne	.+6      	; 0x148a <CLCD_Gotoxy+0x1c>
	{
		/*location in first line*/
		Local_u8Address=cpy_u8Ypos;
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	06 c0       	rjmp	.+12     	; 0x1496 <CLCD_Gotoxy+0x28>
	}
	else if (cpy_u8Xpos==1)
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	19 f4       	brne	.+6      	; 0x1496 <CLCD_Gotoxy+0x28>
	{
		/*location in second line*/
		Local_u8Address=cpy_u8Ypos+0x40;
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	80 5c       	subi	r24, 0xC0	; 192
    1494:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Set DDRAM Adress 0b10000000=128*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	80 58       	subi	r24, 0x80	; 128
    149a:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <CLCD_voidWriteOneExtraChar>:

//Store and write only one character in specific position//
void CLCD_voidWriteOneExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_pos,u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	27 97       	sbiw	r28, 0x07	; 7
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	8b 83       	std	Y+3, r24	; 0x03
    14c2:	6d 83       	std	Y+5, r22	; 0x05
    14c4:	4e 83       	std	Y+6, r20	; 0x06
    14c6:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAdress=0,Local_u8Iterator;
    14c8:	1a 82       	std	Y+2, r1	; 0x02

	//Calculate the CGRAM Address whose each block is 8 bytes
	local_u8CGRAMAdress=cpy_ExtraChar_pos*8;
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	8a 83       	std	Y+2, r24	; 0x02

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 5c       	subi	r24, 0xC0	; 192
    14e2:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    14e6:	19 82       	std	Y+1, r1	; 0x01
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <CLCD_voidWriteOneExtraChar+0x5c>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	fc 01       	movw	r30, r24
    14f6:	e2 0f       	add	r30, r18
    14f8:	f3 1f       	adc	r31, r19
    14fa:	80 81       	ld	r24, Z
    14fc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	89 30       	cpi	r24, 0x09	; 9
    150a:	78 f3       	brcs	.-34     	; 0x14ea <CLCD_voidWriteOneExtraChar+0x40>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(cpy_u8Xpos,cpy_u8Ypos);
    150c:	8e 81       	ldd	r24, Y+6	; 0x06
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	0e 94 37 0a 	call	0x146e	; 0x146e <CLCD_Gotoxy>

	//Display the pattern written in the CGRAM
	CLCD_voidWriteCharctr(cpy_ExtraChar_pos);
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>
}
    151a:	27 96       	adiw	r28, 0x07	; 7
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <CLCD_voidWriteExtraChar>:

//Store and write many characters//
//ExtraChar_No-> Many characters will be store (one char or 2 or ...8 characters) then written
void CLCD_voidWriteExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_No,u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <CLCD_voidWriteExtraChar+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <CLCD_voidWriteExtraChar+0x8>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <CLCD_voidWriteExtraChar+0xa>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	9b 83       	std	Y+3, r25	; 0x03
    153c:	8a 83       	std	Y+2, r24	; 0x02
    153e:	6c 83       	std	Y+4, r22	; 0x04
    1540:	4d 83       	std	Y+5, r20	; 0x05
    1542:	2e 83       	std	Y+6, r18	; 0x06
	u8 Local_u8Iterator;

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(64);
    1544:	80 e4       	ldi	r24, 0x40	; 64
    1546:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<(cpy_ExtraChar_No*8);Local_u8Iterator++)
    154a:	19 82       	std	Y+1, r1	; 0x01
    154c:	0e c0       	rjmp	.+28     	; 0x156a <CLCD_voidWriteExtraChar+0x3e>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	9b 81       	ldd	r25, Y+3	; 0x03
    1558:	fc 01       	movw	r30, r24
    155a:	e2 0f       	add	r30, r18
    155c:	f3 1f       	adc	r31, r19
    155e:	80 81       	ld	r24, Z
    1560:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<(cpy_ExtraChar_No*8);Local_u8Iterator++)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	28 17       	cp	r18, r24
    1584:	39 07       	cpc	r19, r25
    1586:	1c f3       	brlt	.-58     	; 0x154e <CLCD_voidWriteExtraChar+0x22>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(cpy_u8Xpos,cpy_u8Ypos);
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	6e 81       	ldd	r22, Y+6	; 0x06
    158c:	0e 94 37 0a 	call	0x146e	; 0x146e <CLCD_Gotoxy>

	//For arabic to write from right to left
	//CLCD_voidSendCommand(lcd_EntryMode_Decr);

	//Display the pattern written in the CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<cpy_ExtraChar_No;Local_u8Iterator++)
    1590:	19 82       	std	Y+1, r1	; 0x01
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <CLCD_voidWriteExtraChar+0x74>
		{
			CLCD_voidWriteCharctr(Local_u8Iterator);
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>

	//For arabic to write from right to left
	//CLCD_voidSendCommand(lcd_EntryMode_Decr);

	//Display the pattern written in the CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<cpy_ExtraChar_No;Local_u8Iterator++)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	8f 5f       	subi	r24, 0xFF	; 255
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	99 81       	ldd	r25, Y+1	; 0x01
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	98 17       	cp	r25, r24
    15a6:	b0 f3       	brcs	.-20     	; 0x1594 <CLCD_voidWriteExtraChar+0x68>
		{
			CLCD_voidWriteCharctr(Local_u8Iterator);
		}
}
    15a8:	26 96       	adiw	r28, 0x06	; 6
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <CLCD_voidStoreOneExtraChar>:

//Store only one character without write on screen in specific position//
void CLCD_voidStoreOneExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_pos)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <CLCD_voidStoreOneExtraChar+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <CLCD_voidStoreOneExtraChar+0x8>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	8b 83       	std	Y+3, r24	; 0x03
    15cc:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_u8CGRAMAdress=0,Local_u8Iterator;
    15ce:	1a 82       	std	Y+2, r1	; 0x02

	//Calculate the CGRAM Address whose each block is 8 bytes
	local_u8CGRAMAdress=cpy_ExtraChar_pos*8;
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	8a 83       	std	Y+2, r24	; 0x02

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	80 5c       	subi	r24, 0xC0	; 192
    15e8:	0e 94 c8 08 	call	0x1190	; 0x1190 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    15ec:	19 82       	std	Y+1, r1	; 0x01
    15ee:	0e c0       	rjmp	.+28     	; 0x160c <CLCD_voidStoreOneExtraChar+0x52>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	fc 01       	movw	r30, r24
    15fc:	e2 0f       	add	r30, r18
    15fe:	f3 1f       	adc	r31, r19
    1600:	80 81       	ld	r24, Z
    1602:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	8f 5f       	subi	r24, 0xFF	; 255
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	89 30       	cpi	r24, 0x09	; 9
    1610:	78 f3       	brcs	.-34     	; 0x15f0 <CLCD_voidStoreOneExtraChar+0x36>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(0,0);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	0e 94 37 0a 	call	0x146e	; 0x146e <CLCD_Gotoxy>

	//Display the pattern written in the CGRAM
	//CLCD_voidWriteCharctr(cpy_ExtraChar_pos);
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Cpy_Number)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <CLCD_voidWriteNumber+0x6>
    1630:	00 d0       	rcall	.+0      	; 0x1632 <CLCD_voidWriteNumber+0x8>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	69 83       	std	Y+1, r22	; 0x01
    1638:	7a 83       	std	Y+2, r23	; 0x02
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	9c 83       	std	Y+4, r25	; 0x04
CLCD_voidWriteCharctr((Cpy_Number/1000)+48);
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	ab 81       	ldd	r26, Y+3	; 0x03
    1644:	bc 81       	ldd	r27, Y+4	; 0x04
    1646:	28 ee       	ldi	r18, 0xE8	; 232
    1648:	33 e0       	ldi	r19, 0x03	; 3
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodsi4>
    1656:	da 01       	movw	r26, r20
    1658:	c9 01       	movw	r24, r18
    165a:	80 5d       	subi	r24, 0xD0	; 208
    165c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr(((Cpy_Number%1000)/100)+48);
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	ab 81       	ldd	r26, Y+3	; 0x03
    1666:	bc 81       	ldd	r27, Y+4	; 0x04
    1668:	28 ee       	ldi	r18, 0xE8	; 232
    166a:	33 e0       	ldi	r19, 0x03	; 3
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodsi4>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	24 e6       	ldi	r18, 0x64	; 100
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodsi4>
    168c:	da 01       	movw	r26, r20
    168e:	c9 01       	movw	r24, r18
    1690:	80 5d       	subi	r24, 0xD0	; 208
    1692:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr(((Cpy_Number%100)/10)+48);
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	ab 81       	ldd	r26, Y+3	; 0x03
    169c:	bc 81       	ldd	r27, Y+4	; 0x04
    169e:	24 e6       	ldi	r18, 0x64	; 100
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodsi4>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	2a e0       	ldi	r18, 0x0A	; 10
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodsi4>
    16c2:	da 01       	movw	r26, r20
    16c4:	c9 01       	movw	r24, r18
    16c6:	80 5d       	subi	r24, 0xD0	; 208
    16c8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr((Cpy_Number%10)+48);
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	ab 81       	ldd	r26, Y+3	; 0x03
    16d2:	bc 81       	ldd	r27, Y+4	; 0x04
    16d4:	2a e0       	ldi	r18, 0x0A	; 10
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodsi4>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	80 5d       	subi	r24, 0xD0	; 208
    16ea:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>
}
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <CLCD_voidWriteOneNumber>:

void CLCD_voidWriteOneNumber(u8 Cpy_OneNumber)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidWriteCharctr((Cpy_OneNumber%10)+48);
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a e0       	ldi	r25, 0x0A	; 10
    170c:	69 2f       	mov	r22, r25
    170e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__udivmodqi4>
    1712:	89 2f       	mov	r24, r25
    1714:	80 5d       	subi	r24, 0xD0	; 208
    1716:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_voidWriteCharctr>

}
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <DIO_u8_SetPin_value>:
#include"BIT_CALC.h"
#include"DIO_Private.h"
#include"DIO_Interface.h"

u8 DIO_u8_SetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Val)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <DIO_u8_SetPin_value+0x6>
    1728:	00 d0       	rcall	.+0      	; 0x172a <DIO_u8_SetPin_value+0x8>
    172a:	00 d0       	rcall	.+0      	; 0x172c <DIO_u8_SetPin_value+0xa>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	6a 83       	std	Y+2, r22	; 0x02
    1734:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	88 30       	cpi	r24, 0x08	; 8
    173a:	08 f0       	brcs	.+2      	; 0x173e <DIO_u8_SetPin_value+0x1c>
    173c:	e0 c0       	rjmp	.+448    	; 0x18fe <DIO_u8_SetPin_value+0x1dc>

		if( (Copy_u8_Pin_Val == DIO_u8_Low) || (Copy_u8_Pin_Val == DIO_u8_High) ){
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	88 23       	and	r24, r24
    1742:	21 f0       	breq	.+8      	; 0x174c <DIO_u8_SetPin_value+0x2a>
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	09 f0       	breq	.+2      	; 0x174c <DIO_u8_SetPin_value+0x2a>
    174a:	d7 c0       	rjmp	.+430    	; 0x18fa <DIO_u8_SetPin_value+0x1d8>

			switch(Copy_u8_PortID){
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	3e 83       	std	Y+6, r19	; 0x06
    1754:	2d 83       	std	Y+5, r18	; 0x05
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <DIO_u8_SetPin_value+0x40>
    1760:	43 c0       	rjmp	.+134    	; 0x17e8 <DIO_u8_SetPin_value+0xc6>
    1762:	2d 81       	ldd	r18, Y+5	; 0x05
    1764:	3e 81       	ldd	r19, Y+6	; 0x06
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	2c f4       	brge	.+10     	; 0x1776 <DIO_u8_SetPin_value+0x54>
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	71 f0       	breq	.+28     	; 0x1790 <DIO_u8_SetPin_value+0x6e>
    1774:	bd c0       	rjmp	.+378    	; 0x18f0 <DIO_u8_SetPin_value+0x1ce>
    1776:	2d 81       	ldd	r18, Y+5	; 0x05
    1778:	3e 81       	ldd	r19, Y+6	; 0x06
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <DIO_u8_SetPin_value+0x60>
    1780:	5f c0       	rjmp	.+190    	; 0x1840 <DIO_u8_SetPin_value+0x11e>
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <DIO_u8_SetPin_value+0x6c>
    178c:	85 c0       	rjmp	.+266    	; 0x1898 <DIO_u8_SetPin_value+0x176>
    178e:	b0 c0       	rjmp	.+352    	; 0x18f0 <DIO_u8_SetPin_value+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_PORTA, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	a1 f4       	brne	.+40     	; 0x17be <DIO_u8_SetPin_value+0x9c>
    1796:	ab e3       	ldi	r26, 0x3B	; 59
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	eb e3       	ldi	r30, 0x3B	; 59
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_u8_SetPin_value+0x92>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_u8_SetPin_value+0x8e>
    17b8:	84 2b       	or	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	9b c0       	rjmp	.+310    	; 0x18f4 <DIO_u8_SetPin_value+0x1d2>
    17be:	ab e3       	ldi	r26, 0x3B	; 59
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_u8_SetPin_value+0xba>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_u8_SetPin_value+0xb6>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	86 c0       	rjmp	.+268    	; 0x18f4 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_PORTB, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	a1 f4       	brne	.+40     	; 0x1816 <DIO_u8_SetPin_value+0xf4>
    17ee:	a8 e3       	ldi	r26, 0x38	; 56
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e8 e3       	ldi	r30, 0x38	; 56
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <DIO_u8_SetPin_value+0xea>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <DIO_u8_SetPin_value+0xe6>
    1810:	84 2b       	or	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	6f c0       	rjmp	.+222    	; 0x18f4 <DIO_u8_SetPin_value+0x1d2>
    1816:	a8 e3       	ldi	r26, 0x38	; 56
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e8 e3       	ldi	r30, 0x38	; 56
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <DIO_u8_SetPin_value+0x112>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <DIO_u8_SetPin_value+0x10e>
    1838:	80 95       	com	r24
    183a:	84 23       	and	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	5a c0       	rjmp	.+180    	; 0x18f4 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_PORTC, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	a1 f4       	brne	.+40     	; 0x186e <DIO_u8_SetPin_value+0x14c>
    1846:	a5 e3       	ldi	r26, 0x35	; 53
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e3       	ldi	r30, 0x35	; 53
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_u8_SetPin_value+0x142>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_u8_SetPin_value+0x13e>
    1868:	84 2b       	or	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	43 c0       	rjmp	.+134    	; 0x18f4 <DIO_u8_SetPin_value+0x1d2>
    186e:	a5 e3       	ldi	r26, 0x35	; 53
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_u8_SetPin_value+0x16a>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_u8_SetPin_value+0x166>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	2e c0       	rjmp	.+92     	; 0x18f4 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_PORTD, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	a1 f4       	brne	.+40     	; 0x18c6 <DIO_u8_SetPin_value+0x1a4>
    189e:	a2 e3       	ldi	r26, 0x32	; 50
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e2 e3       	ldi	r30, 0x32	; 50
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_u8_SetPin_value+0x19a>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_u8_SetPin_value+0x196>
    18c0:	84 2b       	or	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	17 c0       	rjmp	.+46     	; 0x18f4 <DIO_u8_SetPin_value+0x1d2>
    18c6:	a2 e3       	ldi	r26, 0x32	; 50
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e2 e3       	ldi	r30, 0x32	; 50
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_u8_SetPin_value+0x1c2>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_u8_SetPin_value+0x1be>
    18e8:	80 95       	com	r24
    18ea:	84 23       	and	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_u8_SetPin_value+0x1d2>
			break;

			default: return Invalid_u8_Error ;
    18f0:	1c 82       	std	Y+4, r1	; 0x04
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <DIO_u8_SetPin_value+0x1de>
			}
		}else
             return Invalid_u8_Error ;
	}else
         return Invalid_u8_Error ;
	return Valid;
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <DIO_u8_SetPin_value+0x1de>
			break;

			default: return Invalid_u8_Error ;
			}
		}else
             return Invalid_u8_Error ;
    18fa:	1c 82       	std	Y+4, r1	; 0x04
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <DIO_u8_SetPin_value+0x1de>
	}else
         return Invalid_u8_Error ;
    18fe:	1c 82       	std	Y+4, r1	; 0x04
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
	return Valid;
}
    1902:	26 96       	adiw	r28, 0x06	; 6
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <DIO_u8_SetPin_Dir>:

u8 DIO_u8_SetPin_Dir(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Dir)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <DIO_u8_SetPin_Dir+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <DIO_u8_SetPin_Dir+0x8>
    191c:	00 d0       	rcall	.+0      	; 0x191e <DIO_u8_SetPin_Dir+0xa>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	6a 83       	std	Y+2, r22	; 0x02
    1926:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	88 30       	cpi	r24, 0x08	; 8
    192c:	08 f0       	brcs	.+2      	; 0x1930 <DIO_u8_SetPin_Dir+0x1c>
    192e:	e0 c0       	rjmp	.+448    	; 0x1af0 <DIO_u8_SetPin_Dir+0x1dc>

		if((Copy_u8_Pin_Dir == DIO_u8_Input) || (Copy_u8_Pin_Dir == DIO_u8_Output)){
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	88 23       	and	r24, r24
    1934:	21 f0       	breq	.+8      	; 0x193e <DIO_u8_SetPin_Dir+0x2a>
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	09 f0       	breq	.+2      	; 0x193e <DIO_u8_SetPin_Dir+0x2a>
    193c:	d7 c0       	rjmp	.+430    	; 0x1aec <DIO_u8_SetPin_Dir+0x1d8>

			switch(Copy_u8_PortID){
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3e 83       	std	Y+6, r19	; 0x06
    1946:	2d 83       	std	Y+5, r18	; 0x05
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <DIO_u8_SetPin_Dir+0x40>
    1952:	43 c0       	rjmp	.+134    	; 0x19da <DIO_u8_SetPin_Dir+0xc6>
    1954:	2d 81       	ldd	r18, Y+5	; 0x05
    1956:	3e 81       	ldd	r19, Y+6	; 0x06
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	2c f4       	brge	.+10     	; 0x1968 <DIO_u8_SetPin_Dir+0x54>
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	71 f0       	breq	.+28     	; 0x1982 <DIO_u8_SetPin_Dir+0x6e>
    1966:	bd c0       	rjmp	.+378    	; 0x1ae2 <DIO_u8_SetPin_Dir+0x1ce>
    1968:	2d 81       	ldd	r18, Y+5	; 0x05
    196a:	3e 81       	ldd	r19, Y+6	; 0x06
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <DIO_u8_SetPin_Dir+0x60>
    1972:	5f c0       	rjmp	.+190    	; 0x1a32 <DIO_u8_SetPin_Dir+0x11e>
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <DIO_u8_SetPin_Dir+0x6c>
    197e:	85 c0       	rjmp	.+266    	; 0x1a8a <DIO_u8_SetPin_Dir+0x176>
    1980:	b0 c0       	rjmp	.+352    	; 0x1ae2 <DIO_u8_SetPin_Dir+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_DDRA, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	a1 f4       	brne	.+40     	; 0x19b0 <DIO_u8_SetPin_Dir+0x9c>
    1988:	aa e3       	ldi	r26, 0x3A	; 58
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ea e3       	ldi	r30, 0x3A	; 58
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_u8_SetPin_Dir+0x92>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_u8_SetPin_Dir+0x8e>
    19aa:	84 2b       	or	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	9b c0       	rjmp	.+310    	; 0x1ae6 <DIO_u8_SetPin_Dir+0x1d2>
    19b0:	aa e3       	ldi	r26, 0x3A	; 58
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ea e3       	ldi	r30, 0x3A	; 58
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_u8_SetPin_Dir+0xba>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_u8_SetPin_Dir+0xb6>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	86 c0       	rjmp	.+268    	; 0x1ae6 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_DDRB, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	a1 f4       	brne	.+40     	; 0x1a08 <DIO_u8_SetPin_Dir+0xf4>
    19e0:	a7 e3       	ldi	r26, 0x37	; 55
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e7 e3       	ldi	r30, 0x37	; 55
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <DIO_u8_SetPin_Dir+0xea>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <DIO_u8_SetPin_Dir+0xe6>
    1a02:	84 2b       	or	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	6f c0       	rjmp	.+222    	; 0x1ae6 <DIO_u8_SetPin_Dir+0x1d2>
    1a08:	a7 e3       	ldi	r26, 0x37	; 55
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e7 e3       	ldi	r30, 0x37	; 55
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_u8_SetPin_Dir+0x112>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_u8_SetPin_Dir+0x10e>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	5a c0       	rjmp	.+180    	; 0x1ae6 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_DDRC, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	a1 f4       	brne	.+40     	; 0x1a60 <DIO_u8_SetPin_Dir+0x14c>
    1a38:	a4 e3       	ldi	r26, 0x34	; 52
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e4 e3       	ldi	r30, 0x34	; 52
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_u8_SetPin_Dir+0x142>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_u8_SetPin_Dir+0x13e>
    1a5a:	84 2b       	or	r24, r20
    1a5c:	8c 93       	st	X, r24
    1a5e:	43 c0       	rjmp	.+134    	; 0x1ae6 <DIO_u8_SetPin_Dir+0x1d2>
    1a60:	a4 e3       	ldi	r26, 0x34	; 52
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e4 e3       	ldi	r30, 0x34	; 52
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_u8_SetPin_Dir+0x16a>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <DIO_u8_SetPin_Dir+0x166>
    1a82:	80 95       	com	r24
    1a84:	84 23       	and	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	2e c0       	rjmp	.+92     	; 0x1ae6 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_DDRD, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	a1 f4       	brne	.+40     	; 0x1ab8 <DIO_u8_SetPin_Dir+0x1a4>
    1a90:	a1 e3       	ldi	r26, 0x31	; 49
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e1 e3       	ldi	r30, 0x31	; 49
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_u8_SetPin_Dir+0x19a>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_u8_SetPin_Dir+0x196>
    1ab2:	84 2b       	or	r24, r20
    1ab4:	8c 93       	st	X, r24
    1ab6:	17 c0       	rjmp	.+46     	; 0x1ae6 <DIO_u8_SetPin_Dir+0x1d2>
    1ab8:	a1 e3       	ldi	r26, 0x31	; 49
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e1 e3       	ldi	r30, 0x31	; 49
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_u8_SetPin_Dir+0x1c2>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_u8_SetPin_Dir+0x1be>
    1ada:	80 95       	com	r24
    1adc:	84 23       	and	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <DIO_u8_SetPin_Dir+0x1d2>
			break;

			default: return Invalid_u8_Error;
    1ae2:	1c 82       	std	Y+4, r1	; 0x04
    1ae4:	06 c0       	rjmp	.+12     	; 0x1af2 <DIO_u8_SetPin_Dir+0x1de>
		}else
			return Invalid_u8_Error;
	}else
		return Invalid_u8_Error;

	return Valid;
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <DIO_u8_SetPin_Dir+0x1de>
			break;

			default: return Invalid_u8_Error;
			}
		}else
			return Invalid_u8_Error;
    1aec:	1c 82       	std	Y+4, r1	; 0x04
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <DIO_u8_SetPin_Dir+0x1de>
	}else
		return Invalid_u8_Error;
    1af0:	1c 82       	std	Y+4, r1	; 0x04
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04

	return Valid;
}
    1af4:	26 96       	adiw	r28, 0x06	; 6
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <DIO_u8_SetPort_value>:

u8 DIO_u8_SetPort_value(u8 Copy_u8_PortID, u8 Copy_u8_Port_Val)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <DIO_u8_SetPort_value+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <DIO_u8_SetPort_value+0x8>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	d1 f0       	breq	.+52     	; 0x1b60 <DIO_u8_SetPort_value+0x5a>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <DIO_u8_SetPort_value+0x3a>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <DIO_u8_SetPort_value+0x50>
    1b3e:	1f c0       	rjmp	.+62     	; 0x1b7e <DIO_u8_SetPort_value+0x78>
    1b40:	2c 81       	ldd	r18, Y+4	; 0x04
    1b42:	3d 81       	ldd	r19, Y+5	; 0x05
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	81 f0       	breq	.+32     	; 0x1b6a <DIO_u8_SetPort_value+0x64>
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	91 05       	cpc	r25, r1
    1b52:	81 f0       	breq	.+32     	; 0x1b74 <DIO_u8_SetPort_value+0x6e>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <DIO_u8_SetPort_value+0x78>
	{
	case Group_A: DIO_u8_PORTA = Copy_u8_Port_Val;
    1b56:	eb e3       	ldi	r30, 0x3B	; 59
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	80 83       	st	Z, r24
    1b5e:	11 c0       	rjmp	.+34     	; 0x1b82 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_B: DIO_u8_PORTB = Copy_u8_Port_Val;
    1b60:	e8 e3       	ldi	r30, 0x38	; 56
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	80 83       	st	Z, r24
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_C: DIO_u8_PORTC = Copy_u8_Port_Val;
    1b6a:	e5 e3       	ldi	r30, 0x35	; 53
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	80 83       	st	Z, r24
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_D: DIO_u8_PORTD = Copy_u8_Port_Val;
    1b74:	e2 e3       	ldi	r30, 0x32	; 50
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	80 83       	st	Z, r24
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_u8_SetPort_value+0x7c>
			break;
	default: return Invalid_u8_Error ;
    1b7e:	1b 82       	std	Y+3, r1	; 0x03
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <DIO_u8_SetPort_value+0x80>
	}
	return Valid;
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	9b 83       	std	Y+3, r25	; 0x03
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <DIO_u8_SetPort_Dir>:

u8 DIO_u8_SetPort_Dir(u8 Copy_u8_PortID, u8 Copy_u8_Port_Dir)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DIO_u8_SetPort_Dir+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <DIO_u8_SetPort_Dir+0x8>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3d 83       	std	Y+5, r19	; 0x05
    1bb2:	2c 83       	std	Y+4, r18	; 0x04
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	d1 f0       	breq	.+52     	; 0x1bf2 <DIO_u8_SetPort_Dir+0x5a>
    1bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <DIO_u8_SetPort_Dir+0x3a>
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bca:	9d 81       	ldd	r25, Y+5	; 0x05
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <DIO_u8_SetPort_Dir+0x50>
    1bd0:	1f c0       	rjmp	.+62     	; 0x1c10 <DIO_u8_SetPort_Dir+0x78>
    1bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	81 f0       	breq	.+32     	; 0x1bfc <DIO_u8_SetPort_Dir+0x64>
    1bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bde:	9d 81       	ldd	r25, Y+5	; 0x05
    1be0:	83 30       	cpi	r24, 0x03	; 3
    1be2:	91 05       	cpc	r25, r1
    1be4:	81 f0       	breq	.+32     	; 0x1c06 <DIO_u8_SetPort_Dir+0x6e>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <DIO_u8_SetPort_Dir+0x78>
	{
	case Group_A: DIO_u8_DDRA = Copy_u8_Port_Dir;
    1be8:	ea e3       	ldi	r30, 0x3A	; 58
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
    1bf0:	11 c0       	rjmp	.+34     	; 0x1c14 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_B: DIO_u8_DDRB = Copy_u8_Port_Dir;
    1bf2:	e7 e3       	ldi	r30, 0x37	; 55
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	80 83       	st	Z, r24
    1bfa:	0c c0       	rjmp	.+24     	; 0x1c14 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_C: DIO_u8_DDRC = Copy_u8_Port_Dir;
    1bfc:	e4 e3       	ldi	r30, 0x34	; 52
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	80 83       	st	Z, r24
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_D: DIO_u8_DDRD = Copy_u8_Port_Dir;
    1c06:	e1 e3       	ldi	r30, 0x31	; 49
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	80 83       	st	Z, r24
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <DIO_u8_SetPort_Dir+0x7c>
			break;
	default: return Invalid_u8_Error ;
    1c10:	1b 82       	std	Y+3, r1	; 0x03
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_u8_SetPort_Dir+0x80>
	}

	return Valid;
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <DIO_u8_GetPin_value>:

u8 DIO_u8_GetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID, u8 *Copy_Pu8_u8_Pin_Val)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	27 97       	sbiw	r28, 0x07	; 7
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	6a 83       	std	Y+2, r22	; 0x02
    1c42:	5c 83       	std	Y+4, r21	; 0x04
    1c44:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8_PortID)
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3f 83       	std	Y+7, r19	; 0x07
    1c4e:	2e 83       	std	Y+6, r18	; 0x06
    1c50:	4e 81       	ldd	r20, Y+6	; 0x06
    1c52:	5f 81       	ldd	r21, Y+7	; 0x07
    1c54:	41 30       	cpi	r20, 0x01	; 1
    1c56:	51 05       	cpc	r21, r1
    1c58:	59 f1       	breq	.+86     	; 0x1cb0 <DIO_u8_GetPin_value+0x86>
    1c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	34 f4       	brge	.+12     	; 0x1c70 <DIO_u8_GetPin_value+0x46>
    1c64:	2e 81       	ldd	r18, Y+6	; 0x06
    1c66:	3f 81       	ldd	r19, Y+7	; 0x07
    1c68:	21 15       	cp	r18, r1
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	69 f0       	breq	.+26     	; 0x1c88 <DIO_u8_GetPin_value+0x5e>
    1c6e:	5c c0       	rjmp	.+184    	; 0x1d28 <DIO_u8_GetPin_value+0xfe>
    1c70:	4e 81       	ldd	r20, Y+6	; 0x06
    1c72:	5f 81       	ldd	r21, Y+7	; 0x07
    1c74:	42 30       	cpi	r20, 0x02	; 2
    1c76:	51 05       	cpc	r21, r1
    1c78:	79 f1       	breq	.+94     	; 0x1cd8 <DIO_u8_GetPin_value+0xae>
    1c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	91 05       	cpc	r25, r1
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <DIO_u8_GetPin_value+0x5c>
    1c84:	3d c0       	rjmp	.+122    	; 0x1d00 <DIO_u8_GetPin_value+0xd6>
    1c86:	50 c0       	rjmp	.+160    	; 0x1d28 <DIO_u8_GetPin_value+0xfe>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINA,Copy_u8_Pin_ID);
    1c88:	e9 e3       	ldi	r30, 0x39	; 57
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a9 01       	movw	r20, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_u8_GetPin_value+0x76>
    1c9c:	55 95       	asr	r21
    1c9e:	47 95       	ror	r20
    1ca0:	8a 95       	dec	r24
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <DIO_u8_GetPin_value+0x72>
    1ca4:	ca 01       	movw	r24, r20
    1ca6:	81 70       	andi	r24, 0x01	; 1
    1ca8:	eb 81       	ldd	r30, Y+3	; 0x03
    1caa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cac:	80 83       	st	Z, r24
    1cae:	3e c0       	rjmp	.+124    	; 0x1d2c <DIO_u8_GetPin_value+0x102>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINB,Copy_u8_Pin_ID);
    1cb0:	e6 e3       	ldi	r30, 0x36	; 54
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_u8_GetPin_value+0x9e>
    1cc4:	55 95       	asr	r21
    1cc6:	47 95       	ror	r20
    1cc8:	8a 95       	dec	r24
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_u8_GetPin_value+0x9a>
    1ccc:	ca 01       	movw	r24, r20
    1cce:	81 70       	andi	r24, 0x01	; 1
    1cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd4:	80 83       	st	Z, r24
    1cd6:	2a c0       	rjmp	.+84     	; 0x1d2c <DIO_u8_GetPin_value+0x102>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINC,Copy_u8_Pin_ID);
    1cd8:	e3 e3       	ldi	r30, 0x33	; 51
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a9 01       	movw	r20, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_u8_GetPin_value+0xc6>
    1cec:	55 95       	asr	r21
    1cee:	47 95       	ror	r20
    1cf0:	8a 95       	dec	r24
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <DIO_u8_GetPin_value+0xc2>
    1cf4:	ca 01       	movw	r24, r20
    1cf6:	81 70       	andi	r24, 0x01	; 1
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	80 83       	st	Z, r24
    1cfe:	16 c0       	rjmp	.+44     	; 0x1d2c <DIO_u8_GetPin_value+0x102>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PIND,Copy_u8_Pin_ID);
    1d00:	e0 e3       	ldi	r30, 0x30	; 48
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a9 01       	movw	r20, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_u8_GetPin_value+0xee>
    1d14:	55 95       	asr	r21
    1d16:	47 95       	ror	r20
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <DIO_u8_GetPin_value+0xea>
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	81 70       	andi	r24, 0x01	; 1
    1d20:	eb 81       	ldd	r30, Y+3	; 0x03
    1d22:	fc 81       	ldd	r31, Y+4	; 0x04
    1d24:	80 83       	st	Z, r24
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_u8_GetPin_value+0x102>
			break;
	default: return Invalid_u8_Error ;
    1d28:	1d 82       	std	Y+5, r1	; 0x05
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <DIO_u8_GetPin_value+0x106>
	}
	return Valid;
    1d2c:	51 e0       	ldi	r21, 0x01	; 1
    1d2e:	5d 83       	std	Y+5, r21	; 0x05
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d32:	27 96       	adiw	r28, 0x07	; 7
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <DIO_u8_GetPort_value>:

u8 DIO_u8_GetPort_value(u8 Copy_u8_PortID, u8 *Copy_Pu8_u8_Pin_Val)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <DIO_u8_GetPort_value+0x6>
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <DIO_u8_GetPort_value+0x8>
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <DIO_u8_GetPort_value+0xa>
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	7b 83       	std	Y+3, r23	; 0x03
    1d56:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	3e 83       	std	Y+6, r19	; 0x06
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	91 05       	cpc	r25, r1
    1d6a:	e1 f0       	breq	.+56     	; 0x1da4 <DIO_u8_GetPort_value+0x60>
    1d6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d70:	22 30       	cpi	r18, 0x02	; 2
    1d72:	31 05       	cpc	r19, r1
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <DIO_u8_GetPort_value+0x3c>
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	61 f0       	breq	.+24     	; 0x1d96 <DIO_u8_GetPort_value+0x52>
    1d7e:	27 c0       	rjmp	.+78     	; 0x1dce <DIO_u8_GetPort_value+0x8a>
    1d80:	2d 81       	ldd	r18, Y+5	; 0x05
    1d82:	3e 81       	ldd	r19, Y+6	; 0x06
    1d84:	22 30       	cpi	r18, 0x02	; 2
    1d86:	31 05       	cpc	r19, r1
    1d88:	a1 f0       	breq	.+40     	; 0x1db2 <DIO_u8_GetPort_value+0x6e>
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	83 30       	cpi	r24, 0x03	; 3
    1d90:	91 05       	cpc	r25, r1
    1d92:	b1 f0       	breq	.+44     	; 0x1dc0 <DIO_u8_GetPort_value+0x7c>
    1d94:	1c c0       	rjmp	.+56     	; 0x1dce <DIO_u8_GetPort_value+0x8a>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTA;
    1d96:	eb e3       	ldi	r30, 0x3B	; 59
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1da0:	80 83       	st	Z, r24
    1da2:	17 c0       	rjmp	.+46     	; 0x1dd2 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTB;
    1da4:	e8 e3       	ldi	r30, 0x38	; 56
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	80 83       	st	Z, r24
    1db0:	10 c0       	rjmp	.+32     	; 0x1dd2 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTC;
    1db2:	e5 e3       	ldi	r30, 0x35	; 53
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dba:	fb 81       	ldd	r31, Y+3	; 0x03
    1dbc:	80 83       	st	Z, r24
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTD;
    1dc0:	e2 e3       	ldi	r30, 0x32	; 50
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dca:	80 83       	st	Z, r24
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <DIO_u8_GetPort_value+0x8e>
			break;
	default: return Invalid_u8_Error ;
    1dce:	1c 82       	std	Y+4, r1	; 0x04
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_u8_GetPort_value+0x92>
	}
	return Valid;
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1dd8:	26 96       	adiw	r28, 0x06	; 6
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <GIE_voidEnable>:
#include"BIT_CALC.h"
#include"GIE_Private.h"
#include"GIE_Interface.h"

void GIE_voidEnable(void)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1df2:	af e5       	ldi	r26, 0x5F	; 95
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ef e5       	ldi	r30, 0x5F	; 95
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 68       	ori	r24, 0x80	; 128
    1dfe:	8c 93       	st	X, r24
}
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1e0e:	af e5       	ldi	r26, 0x5F	; 95
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	ef e5       	ldi	r30, 0x5F	; 95
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8f 77       	andi	r24, 0x7F	; 127
    1e1a:	8c 93       	st	X, r24
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <ADCNotification>:
#include "ADC_NInterface.h"

u8 App_u8ADCReading;

void ADCNotification(void)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_SetPort_value(Group_D , App_u8ADCReading);
    1e2a:	90 91 74 00 	lds	r25, 0x0074
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    1e30:	69 2f       	mov	r22, r25
    1e32:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_u8_SetPort_value>
}
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <main>:

void main(void){
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62

	//A0 --- i/p
	DIO_u8_SetPin_Dir(Group_A, DIO_u8_Pin_0, DIO_u8_Input);
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(Group_D, DIO_u8_Pin_7, DIO_u8_Output);
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	67 e0       	ldi	r22, 0x07	; 7
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(Group_D, DIO_u8_Pin_6, DIO_u8_Output);
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	66 e0       	ldi	r22, 0x06	; 6
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(Group_D, DIO_u8_Pin_5, DIO_u8_Output);
    1e62:	83 e0       	ldi	r24, 0x03	; 3
    1e64:	65 e0       	ldi	r22, 0x05	; 5
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_u8_SetPin_Dir>

	ADC_voidInit();
    1e6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	CLCD_voidInit();
    1e70:	0e 94 aa 07 	call	0xf54	; 0xf54 <CLCD_voidInit>

	// Enable global interrupt
	GIE_voidEnable();
    1e74:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GIE_voidEnable>

	while(1)
	{
		ADC_u8StartConversionAsynch(Channel_A0, &App_u8ADCReading, &ADCNotification);
    1e78:	24 e7       	ldi	r18, 0x74	; 116
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	41 e1       	ldi	r20, 0x11	; 17
    1e7e:	5f e0       	ldi	r21, 0x0F	; 15
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	b9 01       	movw	r22, r18
    1e84:	0e 94 51 06 	call	0xca2	; 0xca2 <ADC_u8StartConversionAsynch>
    1e88:	f7 cf       	rjmp	.-18     	; 0x1e78 <main+0x3c>

00001e8a <__udivmodqi4>:
    1e8a:	99 1b       	sub	r25, r25
    1e8c:	79 e0       	ldi	r23, 0x09	; 9
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <__udivmodqi4_ep>

00001e90 <__udivmodqi4_loop>:
    1e90:	99 1f       	adc	r25, r25
    1e92:	96 17       	cp	r25, r22
    1e94:	08 f0       	brcs	.+2      	; 0x1e98 <__udivmodqi4_ep>
    1e96:	96 1b       	sub	r25, r22

00001e98 <__udivmodqi4_ep>:
    1e98:	88 1f       	adc	r24, r24
    1e9a:	7a 95       	dec	r23
    1e9c:	c9 f7       	brne	.-14     	; 0x1e90 <__udivmodqi4_loop>
    1e9e:	80 95       	com	r24
    1ea0:	08 95       	ret

00001ea2 <__udivmodsi4>:
    1ea2:	a1 e2       	ldi	r26, 0x21	; 33
    1ea4:	1a 2e       	mov	r1, r26
    1ea6:	aa 1b       	sub	r26, r26
    1ea8:	bb 1b       	sub	r27, r27
    1eaa:	fd 01       	movw	r30, r26
    1eac:	0d c0       	rjmp	.+26     	; 0x1ec8 <__udivmodsi4_ep>

00001eae <__udivmodsi4_loop>:
    1eae:	aa 1f       	adc	r26, r26
    1eb0:	bb 1f       	adc	r27, r27
    1eb2:	ee 1f       	adc	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	a2 17       	cp	r26, r18
    1eb8:	b3 07       	cpc	r27, r19
    1eba:	e4 07       	cpc	r30, r20
    1ebc:	f5 07       	cpc	r31, r21
    1ebe:	20 f0       	brcs	.+8      	; 0x1ec8 <__udivmodsi4_ep>
    1ec0:	a2 1b       	sub	r26, r18
    1ec2:	b3 0b       	sbc	r27, r19
    1ec4:	e4 0b       	sbc	r30, r20
    1ec6:	f5 0b       	sbc	r31, r21

00001ec8 <__udivmodsi4_ep>:
    1ec8:	66 1f       	adc	r22, r22
    1eca:	77 1f       	adc	r23, r23
    1ecc:	88 1f       	adc	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	1a 94       	dec	r1
    1ed2:	69 f7       	brne	.-38     	; 0x1eae <__udivmodsi4_loop>
    1ed4:	60 95       	com	r22
    1ed6:	70 95       	com	r23
    1ed8:	80 95       	com	r24
    1eda:	90 95       	com	r25
    1edc:	9b 01       	movw	r18, r22
    1ede:	ac 01       	movw	r20, r24
    1ee0:	bd 01       	movw	r22, r26
    1ee2:	cf 01       	movw	r24, r30
    1ee4:	08 95       	ret

00001ee6 <__prologue_saves__>:
    1ee6:	2f 92       	push	r2
    1ee8:	3f 92       	push	r3
    1eea:	4f 92       	push	r4
    1eec:	5f 92       	push	r5
    1eee:	6f 92       	push	r6
    1ef0:	7f 92       	push	r7
    1ef2:	8f 92       	push	r8
    1ef4:	9f 92       	push	r9
    1ef6:	af 92       	push	r10
    1ef8:	bf 92       	push	r11
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	ca 1b       	sub	r28, r26
    1f10:	db 0b       	sbc	r29, r27
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	09 94       	ijmp

00001f1e <__epilogue_restores__>:
    1f1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f20:	39 88       	ldd	r3, Y+17	; 0x11
    1f22:	48 88       	ldd	r4, Y+16	; 0x10
    1f24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f30:	b9 84       	ldd	r11, Y+9	; 0x09
    1f32:	c8 84       	ldd	r12, Y+8	; 0x08
    1f34:	df 80       	ldd	r13, Y+7	; 0x07
    1f36:	ee 80       	ldd	r14, Y+6	; 0x06
    1f38:	fd 80       	ldd	r15, Y+5	; 0x05
    1f3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f40:	b9 81       	ldd	r27, Y+1	; 0x01
    1f42:	ce 0f       	add	r28, r30
    1f44:	d1 1d       	adc	r29, r1
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	ed 01       	movw	r28, r26
    1f52:	08 95       	ret

00001f54 <_exit>:
    1f54:	f8 94       	cli

00001f56 <__stop_program>:
    1f56:	ff cf       	rjmp	.-2      	; 0x1f56 <__stop_program>
