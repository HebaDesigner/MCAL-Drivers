
Timer_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000013  00800060  00800060  0000115c  2**0
                  ALLOC
  2 .stab         00001314  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000993  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__vector_4>
      14:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__vector_5>
      18:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__vector_6>
      1c:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__vector_7>
      20:	0c 94 76 07 	jmp	0xeec	; 0xeec <__vector_8>
      24:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_9>
      28:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__vector_10>
      2c:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 53 08 	call	0x10a6	; 0x10a6 <main>
      74:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8_SetPin_value>:
#include"BIT_CALC.h"
#include"DIO_Private.h"
#include"DIO_Interface.h"

u8 DIO_u8_SetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Val)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <DIO_u8_SetPin_value+0x6>
      82:	00 d0       	rcall	.+0      	; 0x84 <DIO_u8_SetPin_value+0x8>
      84:	00 d0       	rcall	.+0      	; 0x86 <DIO_u8_SetPin_value+0xa>
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	89 83       	std	Y+1, r24	; 0x01
      8c:	6a 83       	std	Y+2, r22	; 0x02
      8e:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
      90:	8a 81       	ldd	r24, Y+2	; 0x02
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	08 f0       	brcs	.+2      	; 0x98 <DIO_u8_SetPin_value+0x1c>
      96:	e0 c0       	rjmp	.+448    	; 0x258 <DIO_u8_SetPin_value+0x1dc>

		if( (Copy_u8_Pin_Val == DIO_u8_Low) || (Copy_u8_Pin_Val == DIO_u8_High) ){
      98:	8b 81       	ldd	r24, Y+3	; 0x03
      9a:	88 23       	and	r24, r24
      9c:	21 f0       	breq	.+8      	; 0xa6 <DIO_u8_SetPin_value+0x2a>
      9e:	8b 81       	ldd	r24, Y+3	; 0x03
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_u8_SetPin_value+0x2a>
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <DIO_u8_SetPin_value+0x1d8>

			switch(Copy_u8_PortID){
      a6:	89 81       	ldd	r24, Y+1	; 0x01
      a8:	28 2f       	mov	r18, r24
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	3e 83       	std	Y+6, r19	; 0x06
      ae:	2d 83       	std	Y+5, r18	; 0x05
      b0:	8d 81       	ldd	r24, Y+5	; 0x05
      b2:	9e 81       	ldd	r25, Y+6	; 0x06
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	91 05       	cpc	r25, r1
      b8:	09 f4       	brne	.+2      	; 0xbc <DIO_u8_SetPin_value+0x40>
      ba:	43 c0       	rjmp	.+134    	; 0x142 <DIO_u8_SetPin_value+0xc6>
      bc:	2d 81       	ldd	r18, Y+5	; 0x05
      be:	3e 81       	ldd	r19, Y+6	; 0x06
      c0:	22 30       	cpi	r18, 0x02	; 2
      c2:	31 05       	cpc	r19, r1
      c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8_SetPin_value+0x54>
      c6:	8d 81       	ldd	r24, Y+5	; 0x05
      c8:	9e 81       	ldd	r25, Y+6	; 0x06
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	71 f0       	breq	.+28     	; 0xea <DIO_u8_SetPin_value+0x6e>
      ce:	bd c0       	rjmp	.+378    	; 0x24a <DIO_u8_SetPin_value+0x1ce>
      d0:	2d 81       	ldd	r18, Y+5	; 0x05
      d2:	3e 81       	ldd	r19, Y+6	; 0x06
      d4:	22 30       	cpi	r18, 0x02	; 2
      d6:	31 05       	cpc	r19, r1
      d8:	09 f4       	brne	.+2      	; 0xdc <DIO_u8_SetPin_value+0x60>
      da:	5f c0       	rjmp	.+190    	; 0x19a <DIO_u8_SetPin_value+0x11e>
      dc:	8d 81       	ldd	r24, Y+5	; 0x05
      de:	9e 81       	ldd	r25, Y+6	; 0x06
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	91 05       	cpc	r25, r1
      e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_u8_SetPin_value+0x6c>
      e6:	85 c0       	rjmp	.+266    	; 0x1f2 <DIO_u8_SetPin_value+0x176>
      e8:	b0 c0       	rjmp	.+352    	; 0x24a <DIO_u8_SetPin_value+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_PORTA, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
      ea:	8b 81       	ldd	r24, Y+3	; 0x03
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	a1 f4       	brne	.+40     	; 0x118 <DIO_u8_SetPin_value+0x9c>
      f0:	ab e3       	ldi	r26, 0x3B	; 59
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	eb e3       	ldi	r30, 0x3B	; 59
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	48 2f       	mov	r20, r24
      fc:	8a 81       	ldd	r24, Y+2	; 0x02
      fe:	28 2f       	mov	r18, r24
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 2e       	mov	r0, r18
     108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_u8_SetPin_value+0x92>
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	0a 94       	dec	r0
     110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_u8_SetPin_value+0x8e>
     112:	84 2b       	or	r24, r20
     114:	8c 93       	st	X, r24
     116:	9b c0       	rjmp	.+310    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
     118:	ab e3       	ldi	r26, 0x3B	; 59
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	eb e3       	ldi	r30, 0x3B	; 59
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	48 2f       	mov	r20, r24
     124:	8a 81       	ldd	r24, Y+2	; 0x02
     126:	28 2f       	mov	r18, r24
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	02 2e       	mov	r0, r18
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_u8_SetPin_value+0xba>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	0a 94       	dec	r0
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_u8_SetPin_value+0xb6>
     13a:	80 95       	com	r24
     13c:	84 23       	and	r24, r20
     13e:	8c 93       	st	X, r24
     140:	86 c0       	rjmp	.+268    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_PORTB, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	a1 f4       	brne	.+40     	; 0x170 <DIO_u8_SetPin_value+0xf4>
     148:	a8 e3       	ldi	r26, 0x38	; 56
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e8 e3       	ldi	r30, 0x38	; 56
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	48 2f       	mov	r20, r24
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	28 2f       	mov	r18, r24
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	02 2e       	mov	r0, r18
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_u8_SetPin_value+0xea>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	0a 94       	dec	r0
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_u8_SetPin_value+0xe6>
     16a:	84 2b       	or	r24, r20
     16c:	8c 93       	st	X, r24
     16e:	6f c0       	rjmp	.+222    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
     170:	a8 e3       	ldi	r26, 0x38	; 56
     172:	b0 e0       	ldi	r27, 0x00	; 0
     174:	e8 e3       	ldi	r30, 0x38	; 56
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	48 2f       	mov	r20, r24
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	02 2e       	mov	r0, r18
     188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_u8_SetPin_value+0x112>
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	0a 94       	dec	r0
     190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_u8_SetPin_value+0x10e>
     192:	80 95       	com	r24
     194:	84 23       	and	r24, r20
     196:	8c 93       	st	X, r24
     198:	5a c0       	rjmp	.+180    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_PORTC, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
     19a:	8b 81       	ldd	r24, Y+3	; 0x03
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	a1 f4       	brne	.+40     	; 0x1c8 <DIO_u8_SetPin_value+0x14c>
     1a0:	a5 e3       	ldi	r26, 0x35	; 53
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e5 e3       	ldi	r30, 0x35	; 53
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	48 2f       	mov	r20, r24
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	28 2f       	mov	r18, r24
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	02 2e       	mov	r0, r18
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_u8_SetPin_value+0x142>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_u8_SetPin_value+0x13e>
     1c2:	84 2b       	or	r24, r20
     1c4:	8c 93       	st	X, r24
     1c6:	43 c0       	rjmp	.+134    	; 0x24e <DIO_u8_SetPin_value+0x1d2>
     1c8:	a5 e3       	ldi	r26, 0x35	; 53
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	e5 e3       	ldi	r30, 0x35	; 53
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	48 2f       	mov	r20, r24
     1d4:	8a 81       	ldd	r24, Y+2	; 0x02
     1d6:	28 2f       	mov	r18, r24
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	02 2e       	mov	r0, r18
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_u8_SetPin_value+0x16a>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	0a 94       	dec	r0
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_u8_SetPin_value+0x166>
     1ea:	80 95       	com	r24
     1ec:	84 23       	and	r24, r20
     1ee:	8c 93       	st	X, r24
     1f0:	2e c0       	rjmp	.+92     	; 0x24e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_PORTD, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	a1 f4       	brne	.+40     	; 0x220 <DIO_u8_SetPin_value+0x1a4>
     1f8:	a2 e3       	ldi	r26, 0x32	; 50
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e2 e3       	ldi	r30, 0x32	; 50
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	48 2f       	mov	r20, r24
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	28 2f       	mov	r18, r24
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	02 2e       	mov	r0, r18
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_u8_SetPin_value+0x19a>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	0a 94       	dec	r0
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_u8_SetPin_value+0x196>
     21a:	84 2b       	or	r24, r20
     21c:	8c 93       	st	X, r24
     21e:	17 c0       	rjmp	.+46     	; 0x24e <DIO_u8_SetPin_value+0x1d2>
     220:	a2 e3       	ldi	r26, 0x32	; 50
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e2 e3       	ldi	r30, 0x32	; 50
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	48 2f       	mov	r20, r24
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	28 2f       	mov	r18, r24
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	02 2e       	mov	r0, r18
     238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_u8_SetPin_value+0x1c2>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	0a 94       	dec	r0
     240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_u8_SetPin_value+0x1be>
     242:	80 95       	com	r24
     244:	84 23       	and	r24, r20
     246:	8c 93       	st	X, r24
     248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_u8_SetPin_value+0x1d2>
			break;

			default: return Invalid_u8_Error ;
     24a:	1c 82       	std	Y+4, r1	; 0x04
     24c:	06 c0       	rjmp	.+12     	; 0x25a <DIO_u8_SetPin_value+0x1de>
			}
		}else
             return Invalid_u8_Error ;
	}else
         return Invalid_u8_Error ;
	return Valid;
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	9c 83       	std	Y+4, r25	; 0x04
     252:	03 c0       	rjmp	.+6      	; 0x25a <DIO_u8_SetPin_value+0x1de>
			break;

			default: return Invalid_u8_Error ;
			}
		}else
             return Invalid_u8_Error ;
     254:	1c 82       	std	Y+4, r1	; 0x04
     256:	01 c0       	rjmp	.+2      	; 0x25a <DIO_u8_SetPin_value+0x1de>
	}else
         return Invalid_u8_Error ;
     258:	1c 82       	std	Y+4, r1	; 0x04
     25a:	8c 81       	ldd	r24, Y+4	; 0x04
	return Valid;
}
     25c:	26 96       	adiw	r28, 0x06	; 6
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <DIO_u8_SetPin_Dir>:

u8 DIO_u8_SetPin_Dir(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Dir)
{
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <DIO_u8_SetPin_Dir+0x6>
     274:	00 d0       	rcall	.+0      	; 0x276 <DIO_u8_SetPin_Dir+0x8>
     276:	00 d0       	rcall	.+0      	; 0x278 <DIO_u8_SetPin_Dir+0xa>
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
     27c:	89 83       	std	Y+1, r24	; 0x01
     27e:	6a 83       	std	Y+2, r22	; 0x02
     280:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	88 30       	cpi	r24, 0x08	; 8
     286:	08 f0       	brcs	.+2      	; 0x28a <DIO_u8_SetPin_Dir+0x1c>
     288:	e0 c0       	rjmp	.+448    	; 0x44a <DIO_u8_SetPin_Dir+0x1dc>

		if((Copy_u8_Pin_Dir == DIO_u8_Input) || (Copy_u8_Pin_Dir == DIO_u8_Output)){
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	88 23       	and	r24, r24
     28e:	21 f0       	breq	.+8      	; 0x298 <DIO_u8_SetPin_Dir+0x2a>
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	09 f0       	breq	.+2      	; 0x298 <DIO_u8_SetPin_Dir+0x2a>
     296:	d7 c0       	rjmp	.+430    	; 0x446 <DIO_u8_SetPin_Dir+0x1d8>

			switch(Copy_u8_PortID){
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	28 2f       	mov	r18, r24
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	3e 83       	std	Y+6, r19	; 0x06
     2a0:	2d 83       	std	Y+5, r18	; 0x05
     2a2:	8d 81       	ldd	r24, Y+5	; 0x05
     2a4:	9e 81       	ldd	r25, Y+6	; 0x06
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	91 05       	cpc	r25, r1
     2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_u8_SetPin_Dir+0x40>
     2ac:	43 c0       	rjmp	.+134    	; 0x334 <DIO_u8_SetPin_Dir+0xc6>
     2ae:	2d 81       	ldd	r18, Y+5	; 0x05
     2b0:	3e 81       	ldd	r19, Y+6	; 0x06
     2b2:	22 30       	cpi	r18, 0x02	; 2
     2b4:	31 05       	cpc	r19, r1
     2b6:	2c f4       	brge	.+10     	; 0x2c2 <DIO_u8_SetPin_Dir+0x54>
     2b8:	8d 81       	ldd	r24, Y+5	; 0x05
     2ba:	9e 81       	ldd	r25, Y+6	; 0x06
     2bc:	00 97       	sbiw	r24, 0x00	; 0
     2be:	71 f0       	breq	.+28     	; 0x2dc <DIO_u8_SetPin_Dir+0x6e>
     2c0:	bd c0       	rjmp	.+378    	; 0x43c <DIO_u8_SetPin_Dir+0x1ce>
     2c2:	2d 81       	ldd	r18, Y+5	; 0x05
     2c4:	3e 81       	ldd	r19, Y+6	; 0x06
     2c6:	22 30       	cpi	r18, 0x02	; 2
     2c8:	31 05       	cpc	r19, r1
     2ca:	09 f4       	brne	.+2      	; 0x2ce <DIO_u8_SetPin_Dir+0x60>
     2cc:	5f c0       	rjmp	.+190    	; 0x38c <DIO_u8_SetPin_Dir+0x11e>
     2ce:	8d 81       	ldd	r24, Y+5	; 0x05
     2d0:	9e 81       	ldd	r25, Y+6	; 0x06
     2d2:	83 30       	cpi	r24, 0x03	; 3
     2d4:	91 05       	cpc	r25, r1
     2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_u8_SetPin_Dir+0x6c>
     2d8:	85 c0       	rjmp	.+266    	; 0x3e4 <DIO_u8_SetPin_Dir+0x176>
     2da:	b0 c0       	rjmp	.+352    	; 0x43c <DIO_u8_SetPin_Dir+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_DDRA, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	a1 f4       	brne	.+40     	; 0x30a <DIO_u8_SetPin_Dir+0x9c>
     2e2:	aa e3       	ldi	r26, 0x3A	; 58
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	ea e3       	ldi	r30, 0x3A	; 58
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	48 2f       	mov	r20, r24
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
     2f0:	28 2f       	mov	r18, r24
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	02 2e       	mov	r0, r18
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_u8_SetPin_Dir+0x92>
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	0a 94       	dec	r0
     302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_u8_SetPin_Dir+0x8e>
     304:	84 2b       	or	r24, r20
     306:	8c 93       	st	X, r24
     308:	9b c0       	rjmp	.+310    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
     30a:	aa e3       	ldi	r26, 0x3A	; 58
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	ea e3       	ldi	r30, 0x3A	; 58
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	48 2f       	mov	r20, r24
     316:	8a 81       	ldd	r24, Y+2	; 0x02
     318:	28 2f       	mov	r18, r24
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	02 2e       	mov	r0, r18
     322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8_SetPin_Dir+0xba>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8_SetPin_Dir+0xb6>
     32c:	80 95       	com	r24
     32e:	84 23       	and	r24, r20
     330:	8c 93       	st	X, r24
     332:	86 c0       	rjmp	.+268    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_DDRB, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
     334:	8b 81       	ldd	r24, Y+3	; 0x03
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	a1 f4       	brne	.+40     	; 0x362 <DIO_u8_SetPin_Dir+0xf4>
     33a:	a7 e3       	ldi	r26, 0x37	; 55
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e7 e3       	ldi	r30, 0x37	; 55
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	48 2f       	mov	r20, r24
     346:	8a 81       	ldd	r24, Y+2	; 0x02
     348:	28 2f       	mov	r18, r24
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 2e       	mov	r0, r18
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8_SetPin_Dir+0xea>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	0a 94       	dec	r0
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8_SetPin_Dir+0xe6>
     35c:	84 2b       	or	r24, r20
     35e:	8c 93       	st	X, r24
     360:	6f c0       	rjmp	.+222    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
     362:	a7 e3       	ldi	r26, 0x37	; 55
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e7 e3       	ldi	r30, 0x37	; 55
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	48 2f       	mov	r20, r24
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	28 2f       	mov	r18, r24
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	02 2e       	mov	r0, r18
     37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_u8_SetPin_Dir+0x112>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	0a 94       	dec	r0
     382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_u8_SetPin_Dir+0x10e>
     384:	80 95       	com	r24
     386:	84 23       	and	r24, r20
     388:	8c 93       	st	X, r24
     38a:	5a c0       	rjmp	.+180    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_DDRC, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
     38c:	8b 81       	ldd	r24, Y+3	; 0x03
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	a1 f4       	brne	.+40     	; 0x3ba <DIO_u8_SetPin_Dir+0x14c>
     392:	a4 e3       	ldi	r26, 0x34	; 52
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	e4 e3       	ldi	r30, 0x34	; 52
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	48 2f       	mov	r20, r24
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	28 2f       	mov	r18, r24
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	02 2e       	mov	r0, r18
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_u8_SetPin_Dir+0x142>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_u8_SetPin_Dir+0x13e>
     3b4:	84 2b       	or	r24, r20
     3b6:	8c 93       	st	X, r24
     3b8:	43 c0       	rjmp	.+134    	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
     3ba:	a4 e3       	ldi	r26, 0x34	; 52
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	e4 e3       	ldi	r30, 0x34	; 52
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	48 2f       	mov	r20, r24
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	28 2f       	mov	r18, r24
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	02 2e       	mov	r0, r18
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8_SetPin_Dir+0x16a>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	0a 94       	dec	r0
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8_SetPin_Dir+0x166>
     3dc:	80 95       	com	r24
     3de:	84 23       	and	r24, r20
     3e0:	8c 93       	st	X, r24
     3e2:	2e c0       	rjmp	.+92     	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_DDRD, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
     3e4:	8b 81       	ldd	r24, Y+3	; 0x03
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	a1 f4       	brne	.+40     	; 0x412 <DIO_u8_SetPin_Dir+0x1a4>
     3ea:	a1 e3       	ldi	r26, 0x31	; 49
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	e1 e3       	ldi	r30, 0x31	; 49
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	48 2f       	mov	r20, r24
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	28 2f       	mov	r18, r24
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	02 2e       	mov	r0, r18
     402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_u8_SetPin_Dir+0x19a>
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	0a 94       	dec	r0
     40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_u8_SetPin_Dir+0x196>
     40c:	84 2b       	or	r24, r20
     40e:	8c 93       	st	X, r24
     410:	17 c0       	rjmp	.+46     	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
     412:	a1 e3       	ldi	r26, 0x31	; 49
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	e1 e3       	ldi	r30, 0x31	; 49
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	48 2f       	mov	r20, r24
     41e:	8a 81       	ldd	r24, Y+2	; 0x02
     420:	28 2f       	mov	r18, r24
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	02 2e       	mov	r0, r18
     42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8_SetPin_Dir+0x1c2>
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	0a 94       	dec	r0
     432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_u8_SetPin_Dir+0x1be>
     434:	80 95       	com	r24
     436:	84 23       	and	r24, r20
     438:	8c 93       	st	X, r24
     43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8_SetPin_Dir+0x1d2>
			break;

			default: return Invalid_u8_Error;
     43c:	1c 82       	std	Y+4, r1	; 0x04
     43e:	06 c0       	rjmp	.+12     	; 0x44c <DIO_u8_SetPin_Dir+0x1de>
		}else
			return Invalid_u8_Error;
	}else
		return Invalid_u8_Error;

	return Valid;
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	9c 83       	std	Y+4, r25	; 0x04
     444:	03 c0       	rjmp	.+6      	; 0x44c <DIO_u8_SetPin_Dir+0x1de>
			break;

			default: return Invalid_u8_Error;
			}
		}else
			return Invalid_u8_Error;
     446:	1c 82       	std	Y+4, r1	; 0x04
     448:	01 c0       	rjmp	.+2      	; 0x44c <DIO_u8_SetPin_Dir+0x1de>
	}else
		return Invalid_u8_Error;
     44a:	1c 82       	std	Y+4, r1	; 0x04
     44c:	8c 81       	ldd	r24, Y+4	; 0x04

	return Valid;
}
     44e:	26 96       	adiw	r28, 0x06	; 6
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	cf 91       	pop	r28
     45c:	df 91       	pop	r29
     45e:	08 95       	ret

00000460 <DIO_u8_SetPort_value>:

u8 DIO_u8_SetPort_value(u8 Copy_u8_PortID, u8 Copy_u8_Port_Val)
{
     460:	df 93       	push	r29
     462:	cf 93       	push	r28
     464:	00 d0       	rcall	.+0      	; 0x466 <DIO_u8_SetPort_value+0x6>
     466:	00 d0       	rcall	.+0      	; 0x468 <DIO_u8_SetPort_value+0x8>
     468:	0f 92       	push	r0
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	28 2f       	mov	r18, r24
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	3d 83       	std	Y+5, r19	; 0x05
     47a:	2c 83       	std	Y+4, r18	; 0x04
     47c:	8c 81       	ldd	r24, Y+4	; 0x04
     47e:	9d 81       	ldd	r25, Y+5	; 0x05
     480:	81 30       	cpi	r24, 0x01	; 1
     482:	91 05       	cpc	r25, r1
     484:	d1 f0       	breq	.+52     	; 0x4ba <DIO_u8_SetPort_value+0x5a>
     486:	2c 81       	ldd	r18, Y+4	; 0x04
     488:	3d 81       	ldd	r19, Y+5	; 0x05
     48a:	22 30       	cpi	r18, 0x02	; 2
     48c:	31 05       	cpc	r19, r1
     48e:	2c f4       	brge	.+10     	; 0x49a <DIO_u8_SetPort_value+0x3a>
     490:	8c 81       	ldd	r24, Y+4	; 0x04
     492:	9d 81       	ldd	r25, Y+5	; 0x05
     494:	00 97       	sbiw	r24, 0x00	; 0
     496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_u8_SetPort_value+0x50>
     498:	1f c0       	rjmp	.+62     	; 0x4d8 <DIO_u8_SetPort_value+0x78>
     49a:	2c 81       	ldd	r18, Y+4	; 0x04
     49c:	3d 81       	ldd	r19, Y+5	; 0x05
     49e:	22 30       	cpi	r18, 0x02	; 2
     4a0:	31 05       	cpc	r19, r1
     4a2:	81 f0       	breq	.+32     	; 0x4c4 <DIO_u8_SetPort_value+0x64>
     4a4:	8c 81       	ldd	r24, Y+4	; 0x04
     4a6:	9d 81       	ldd	r25, Y+5	; 0x05
     4a8:	83 30       	cpi	r24, 0x03	; 3
     4aa:	91 05       	cpc	r25, r1
     4ac:	81 f0       	breq	.+32     	; 0x4ce <DIO_u8_SetPort_value+0x6e>
     4ae:	14 c0       	rjmp	.+40     	; 0x4d8 <DIO_u8_SetPort_value+0x78>
	{
	case Group_A: DIO_u8_PORTA = Copy_u8_Port_Val;
     4b0:	eb e3       	ldi	r30, 0x3B	; 59
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	80 83       	st	Z, r24
     4b8:	11 c0       	rjmp	.+34     	; 0x4dc <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_B: DIO_u8_PORTB = Copy_u8_Port_Val;
     4ba:	e8 e3       	ldi	r30, 0x38	; 56
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	80 83       	st	Z, r24
     4c2:	0c c0       	rjmp	.+24     	; 0x4dc <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_C: DIO_u8_PORTC = Copy_u8_Port_Val;
     4c4:	e5 e3       	ldi	r30, 0x35	; 53
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	80 83       	st	Z, r24
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_D: DIO_u8_PORTD = Copy_u8_Port_Val;
     4ce:	e2 e3       	ldi	r30, 0x32	; 50
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	8a 81       	ldd	r24, Y+2	; 0x02
     4d4:	80 83       	st	Z, r24
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8_SetPort_value+0x7c>
			break;
	default: return Invalid_u8_Error ;
     4d8:	1b 82       	std	Y+3, r1	; 0x03
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_u8_SetPort_value+0x80>
	}
	return Valid;
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	9b 83       	std	Y+3, r25	; 0x03
     4e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	cf 91       	pop	r28
     4ee:	df 91       	pop	r29
     4f0:	08 95       	ret

000004f2 <DIO_u8_SetPort_Dir>:

u8 DIO_u8_SetPort_Dir(u8 Copy_u8_PortID, u8 Copy_u8_Port_Dir)
{
     4f2:	df 93       	push	r29
     4f4:	cf 93       	push	r28
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <DIO_u8_SetPort_Dir+0x6>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <DIO_u8_SetPort_Dir+0x8>
     4fa:	0f 92       	push	r0
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	28 2f       	mov	r18, r24
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	3d 83       	std	Y+5, r19	; 0x05
     50c:	2c 83       	std	Y+4, r18	; 0x04
     50e:	8c 81       	ldd	r24, Y+4	; 0x04
     510:	9d 81       	ldd	r25, Y+5	; 0x05
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	91 05       	cpc	r25, r1
     516:	d1 f0       	breq	.+52     	; 0x54c <DIO_u8_SetPort_Dir+0x5a>
     518:	2c 81       	ldd	r18, Y+4	; 0x04
     51a:	3d 81       	ldd	r19, Y+5	; 0x05
     51c:	22 30       	cpi	r18, 0x02	; 2
     51e:	31 05       	cpc	r19, r1
     520:	2c f4       	brge	.+10     	; 0x52c <DIO_u8_SetPort_Dir+0x3a>
     522:	8c 81       	ldd	r24, Y+4	; 0x04
     524:	9d 81       	ldd	r25, Y+5	; 0x05
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	61 f0       	breq	.+24     	; 0x542 <DIO_u8_SetPort_Dir+0x50>
     52a:	1f c0       	rjmp	.+62     	; 0x56a <DIO_u8_SetPort_Dir+0x78>
     52c:	2c 81       	ldd	r18, Y+4	; 0x04
     52e:	3d 81       	ldd	r19, Y+5	; 0x05
     530:	22 30       	cpi	r18, 0x02	; 2
     532:	31 05       	cpc	r19, r1
     534:	81 f0       	breq	.+32     	; 0x556 <DIO_u8_SetPort_Dir+0x64>
     536:	8c 81       	ldd	r24, Y+4	; 0x04
     538:	9d 81       	ldd	r25, Y+5	; 0x05
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	91 05       	cpc	r25, r1
     53e:	81 f0       	breq	.+32     	; 0x560 <DIO_u8_SetPort_Dir+0x6e>
     540:	14 c0       	rjmp	.+40     	; 0x56a <DIO_u8_SetPort_Dir+0x78>
	{
	case Group_A: DIO_u8_DDRA = Copy_u8_Port_Dir;
     542:	ea e3       	ldi	r30, 0x3A	; 58
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	80 83       	st	Z, r24
     54a:	11 c0       	rjmp	.+34     	; 0x56e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_B: DIO_u8_DDRB = Copy_u8_Port_Dir;
     54c:	e7 e3       	ldi	r30, 0x37	; 55
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	8a 81       	ldd	r24, Y+2	; 0x02
     552:	80 83       	st	Z, r24
     554:	0c c0       	rjmp	.+24     	; 0x56e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_C: DIO_u8_DDRC = Copy_u8_Port_Dir;
     556:	e4 e3       	ldi	r30, 0x34	; 52
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	80 83       	st	Z, r24
     55e:	07 c0       	rjmp	.+14     	; 0x56e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_D: DIO_u8_DDRD = Copy_u8_Port_Dir;
     560:	e1 e3       	ldi	r30, 0x31	; 49
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	80 83       	st	Z, r24
     568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_u8_SetPort_Dir+0x7c>
			break;
	default: return Invalid_u8_Error ;
     56a:	1b 82       	std	Y+3, r1	; 0x03
     56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_u8_SetPort_Dir+0x80>
	}

	return Valid;
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	9b 83       	std	Y+3, r25	; 0x03
     572:	8b 81       	ldd	r24, Y+3	; 0x03
}
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	cf 91       	pop	r28
     580:	df 91       	pop	r29
     582:	08 95       	ret

00000584 <DIO_u8_GetPin_value>:

u8 DIO_u8_GetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID, u8 *Copy_Pu8_u8_Pin_Val)
{
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	27 97       	sbiw	r28, 0x07	; 7
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	6a 83       	std	Y+2, r22	; 0x02
     59c:	5c 83       	std	Y+4, r21	; 0x04
     59e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8_PortID)
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	28 2f       	mov	r18, r24
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	3f 83       	std	Y+7, r19	; 0x07
     5a8:	2e 83       	std	Y+6, r18	; 0x06
     5aa:	4e 81       	ldd	r20, Y+6	; 0x06
     5ac:	5f 81       	ldd	r21, Y+7	; 0x07
     5ae:	41 30       	cpi	r20, 0x01	; 1
     5b0:	51 05       	cpc	r21, r1
     5b2:	59 f1       	breq	.+86     	; 0x60a <DIO_u8_GetPin_value+0x86>
     5b4:	8e 81       	ldd	r24, Y+6	; 0x06
     5b6:	9f 81       	ldd	r25, Y+7	; 0x07
     5b8:	82 30       	cpi	r24, 0x02	; 2
     5ba:	91 05       	cpc	r25, r1
     5bc:	34 f4       	brge	.+12     	; 0x5ca <DIO_u8_GetPin_value+0x46>
     5be:	2e 81       	ldd	r18, Y+6	; 0x06
     5c0:	3f 81       	ldd	r19, Y+7	; 0x07
     5c2:	21 15       	cp	r18, r1
     5c4:	31 05       	cpc	r19, r1
     5c6:	69 f0       	breq	.+26     	; 0x5e2 <DIO_u8_GetPin_value+0x5e>
     5c8:	5c c0       	rjmp	.+184    	; 0x682 <DIO_u8_GetPin_value+0xfe>
     5ca:	4e 81       	ldd	r20, Y+6	; 0x06
     5cc:	5f 81       	ldd	r21, Y+7	; 0x07
     5ce:	42 30       	cpi	r20, 0x02	; 2
     5d0:	51 05       	cpc	r21, r1
     5d2:	79 f1       	breq	.+94     	; 0x632 <DIO_u8_GetPin_value+0xae>
     5d4:	8e 81       	ldd	r24, Y+6	; 0x06
     5d6:	9f 81       	ldd	r25, Y+7	; 0x07
     5d8:	83 30       	cpi	r24, 0x03	; 3
     5da:	91 05       	cpc	r25, r1
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <DIO_u8_GetPin_value+0x5c>
     5de:	3d c0       	rjmp	.+122    	; 0x65a <DIO_u8_GetPin_value+0xd6>
     5e0:	50 c0       	rjmp	.+160    	; 0x682 <DIO_u8_GetPin_value+0xfe>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINA,Copy_u8_Pin_ID);
     5e2:	e9 e3       	ldi	r30, 0x39	; 57
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	28 2f       	mov	r18, r24
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a9 01       	movw	r20, r18
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_u8_GetPin_value+0x76>
     5f6:	55 95       	asr	r21
     5f8:	47 95       	ror	r20
     5fa:	8a 95       	dec	r24
     5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_u8_GetPin_value+0x72>
     5fe:	ca 01       	movw	r24, r20
     600:	81 70       	andi	r24, 0x01	; 1
     602:	eb 81       	ldd	r30, Y+3	; 0x03
     604:	fc 81       	ldd	r31, Y+4	; 0x04
     606:	80 83       	st	Z, r24
     608:	3e c0       	rjmp	.+124    	; 0x686 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINB,Copy_u8_Pin_ID);
     60a:	e6 e3       	ldi	r30, 0x36	; 54
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	28 2f       	mov	r18, r24
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	8a 81       	ldd	r24, Y+2	; 0x02
     616:	88 2f       	mov	r24, r24
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a9 01       	movw	r20, r18
     61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_u8_GetPin_value+0x9e>
     61e:	55 95       	asr	r21
     620:	47 95       	ror	r20
     622:	8a 95       	dec	r24
     624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_u8_GetPin_value+0x9a>
     626:	ca 01       	movw	r24, r20
     628:	81 70       	andi	r24, 0x01	; 1
     62a:	eb 81       	ldd	r30, Y+3	; 0x03
     62c:	fc 81       	ldd	r31, Y+4	; 0x04
     62e:	80 83       	st	Z, r24
     630:	2a c0       	rjmp	.+84     	; 0x686 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINC,Copy_u8_Pin_ID);
     632:	e3 e3       	ldi	r30, 0x33	; 51
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	28 2f       	mov	r18, r24
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	88 2f       	mov	r24, r24
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_u8_GetPin_value+0xc6>
     646:	55 95       	asr	r21
     648:	47 95       	ror	r20
     64a:	8a 95       	dec	r24
     64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_u8_GetPin_value+0xc2>
     64e:	ca 01       	movw	r24, r20
     650:	81 70       	andi	r24, 0x01	; 1
     652:	eb 81       	ldd	r30, Y+3	; 0x03
     654:	fc 81       	ldd	r31, Y+4	; 0x04
     656:	80 83       	st	Z, r24
     658:	16 c0       	rjmp	.+44     	; 0x686 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PIND,Copy_u8_Pin_ID);
     65a:	e0 e3       	ldi	r30, 0x30	; 48
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	28 2f       	mov	r18, r24
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	88 2f       	mov	r24, r24
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_u8_GetPin_value+0xee>
     66e:	55 95       	asr	r21
     670:	47 95       	ror	r20
     672:	8a 95       	dec	r24
     674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_u8_GetPin_value+0xea>
     676:	ca 01       	movw	r24, r20
     678:	81 70       	andi	r24, 0x01	; 1
     67a:	eb 81       	ldd	r30, Y+3	; 0x03
     67c:	fc 81       	ldd	r31, Y+4	; 0x04
     67e:	80 83       	st	Z, r24
     680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_u8_GetPin_value+0x102>
			break;
	default: return Invalid_u8_Error ;
     682:	1d 82       	std	Y+5, r1	; 0x05
     684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_u8_GetPin_value+0x106>
	}
	return Valid;
     686:	51 e0       	ldi	r21, 0x01	; 1
     688:	5d 83       	std	Y+5, r21	; 0x05
     68a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     68c:	27 96       	adiw	r28, 0x07	; 7
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <DIO_u8_GetPort_value>:

u8 DIO_u8_GetPort_value(u8 Copy_u8_PortID, u8 *Copy_Pu8_u8_Pin_Val)
{
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <DIO_u8_GetPort_value+0x6>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <DIO_u8_GetPort_value+0x8>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <DIO_u8_GetPort_value+0xa>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	7b 83       	std	Y+3, r23	; 0x03
     6b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	3e 83       	std	Y+6, r19	; 0x06
     6ba:	2d 83       	std	Y+5, r18	; 0x05
     6bc:	8d 81       	ldd	r24, Y+5	; 0x05
     6be:	9e 81       	ldd	r25, Y+6	; 0x06
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	91 05       	cpc	r25, r1
     6c4:	e1 f0       	breq	.+56     	; 0x6fe <DIO_u8_GetPort_value+0x60>
     6c6:	2d 81       	ldd	r18, Y+5	; 0x05
     6c8:	3e 81       	ldd	r19, Y+6	; 0x06
     6ca:	22 30       	cpi	r18, 0x02	; 2
     6cc:	31 05       	cpc	r19, r1
     6ce:	2c f4       	brge	.+10     	; 0x6da <DIO_u8_GetPort_value+0x3c>
     6d0:	8d 81       	ldd	r24, Y+5	; 0x05
     6d2:	9e 81       	ldd	r25, Y+6	; 0x06
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	61 f0       	breq	.+24     	; 0x6f0 <DIO_u8_GetPort_value+0x52>
     6d8:	27 c0       	rjmp	.+78     	; 0x728 <DIO_u8_GetPort_value+0x8a>
     6da:	2d 81       	ldd	r18, Y+5	; 0x05
     6dc:	3e 81       	ldd	r19, Y+6	; 0x06
     6de:	22 30       	cpi	r18, 0x02	; 2
     6e0:	31 05       	cpc	r19, r1
     6e2:	a1 f0       	breq	.+40     	; 0x70c <DIO_u8_GetPort_value+0x6e>
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	9e 81       	ldd	r25, Y+6	; 0x06
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	91 05       	cpc	r25, r1
     6ec:	b1 f0       	breq	.+44     	; 0x71a <DIO_u8_GetPort_value+0x7c>
     6ee:	1c c0       	rjmp	.+56     	; 0x728 <DIO_u8_GetPort_value+0x8a>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTA;
     6f0:	eb e3       	ldi	r30, 0x3B	; 59
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	ea 81       	ldd	r30, Y+2	; 0x02
     6f8:	fb 81       	ldd	r31, Y+3	; 0x03
     6fa:	80 83       	st	Z, r24
     6fc:	17 c0       	rjmp	.+46     	; 0x72c <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTB;
     6fe:	e8 e3       	ldi	r30, 0x38	; 56
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	ea 81       	ldd	r30, Y+2	; 0x02
     706:	fb 81       	ldd	r31, Y+3	; 0x03
     708:	80 83       	st	Z, r24
     70a:	10 c0       	rjmp	.+32     	; 0x72c <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTC;
     70c:	e5 e3       	ldi	r30, 0x35	; 53
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	80 81       	ld	r24, Z
     712:	ea 81       	ldd	r30, Y+2	; 0x02
     714:	fb 81       	ldd	r31, Y+3	; 0x03
     716:	80 83       	st	Z, r24
     718:	09 c0       	rjmp	.+18     	; 0x72c <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTD;
     71a:	e2 e3       	ldi	r30, 0x32	; 50
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	ea 81       	ldd	r30, Y+2	; 0x02
     722:	fb 81       	ldd	r31, Y+3	; 0x03
     724:	80 83       	st	Z, r24
     726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_u8_GetPort_value+0x8e>
			break;
	default: return Invalid_u8_Error ;
     728:	1c 82       	std	Y+4, r1	; 0x04
     72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_u8_GetPort_value+0x92>
	}
	return Valid;
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	9c 83       	std	Y+4, r25	; 0x04
     730:	8c 81       	ldd	r24, Y+4	; 0x04
}
     732:	26 96       	adiw	r28, 0x06	; 6
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	cf 91       	pop	r28
     740:	df 91       	pop	r29
     742:	08 95       	ret

00000744 <GIE_voidEnable>:
#include"BIT_CALC.h"
#include"GIE_Private.h"
#include"GIE_Interface.h"

void GIE_voidEnable(void)
{
     744:	df 93       	push	r29
     746:	cf 93       	push	r28
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     74c:	af e5       	ldi	r26, 0x5F	; 95
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	ef e5       	ldi	r30, 0x5F	; 95
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	80 68       	ori	r24, 0x80	; 128
     758:	8c 93       	st	X, r24
}
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	08 95       	ret

00000760 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     768:	af e5       	ldi	r26, 0x5F	; 95
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	ef e5       	ldi	r30, 0x5F	; 95
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	8f 77       	andi	r24, 0x7F	; 127
     774:	8c 93       	st	X, r24
}
     776:	cf 91       	pop	r28
     778:	df 91       	pop	r29
     77a:	08 95       	ret

0000077c <TIM0_voidInitialize>:
#include "Timer_register.h"
#include "Timer_interface.h"

void (*TIMERS_pvCallBack_Func[8])(void) = {NULL};

void TIM0_voidInitialize(void){
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0_Register,WGM00);
#elif 	TIM0_WAVEFORM_MODE== CTC_MODE
	SET_BIT(TCCR0_Register,WGM01);
	CLR_BIT(TCCR0_Register,WGM00);
#elif	 TIM0_WAVEFORM_MODE== FASTPWM_MODE
	SET_BIT(TCCR0_Register,WGM01);
     784:	a3 e5       	ldi	r26, 0x53	; 83
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	e3 e5       	ldi	r30, 0x53	; 83
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	88 60       	ori	r24, 0x08	; 8
     790:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register,WGM00);
     792:	a3 e5       	ldi	r26, 0x53	; 83
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	e3 e5       	ldi	r30, 0x53	; 83
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	80 64       	ori	r24, 0x40	; 64
     79e:	8c 93       	st	X, r24
#else
#endif
		//PRESCALER Selection
	/*Clock Select (Prescaler) to be used by the Timer/Counter*/
	TCCR0_Register = ((TCCR0_Register &= 0b11111000) | TIM0_CLOCK_SELECT);
     7a0:	23 e5       	ldi	r18, 0x53	; 83
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	a3 e5       	ldi	r26, 0x53	; 83
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	e3 e5       	ldi	r30, 0x53	; 83
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	88 7f       	andi	r24, 0xF8	; 248
     7b0:	8c 93       	st	X, r24
     7b2:	8c 91       	ld	r24, X
     7b4:	82 60       	ori	r24, 0x02	; 2
     7b6:	f9 01       	movw	r30, r18
     7b8:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_Register,COM00);
#elif 	TIM0_COMPARE_MODE == OC0_TOGGLE					//Only on non PWM mode
	CLR_BIT(TCCR0_Register,COM01);
	SET_BIT(TCCR0_Register,COM00);
#elif 	TIM0_COMPARE_MODE == OC0_CLEAR_NON_INVERTED		//CLEAR BIT IN NON PWM AND NON INVERTED IN PWM PHASECORRECT OR FAST PWM
	SET_BIT(TCCR0_Register,COM01);
     7ba:	a3 e5       	ldi	r26, 0x53	; 83
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	e3 e5       	ldi	r30, 0x53	; 83
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	80 62       	ori	r24, 0x20	; 32
     7c6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_Register,COM00);
     7c8:	a3 e5       	ldi	r26, 0x53	; 83
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	e3 e5       	ldi	r30, 0x53	; 83
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	8f 7e       	andi	r24, 0xEF	; 239
     7d4:	8c 93       	st	X, r24
#elif 	TIM0_COMPARE_MODE == OC0_SET_INVERTED			//SET BIT IN NON PWM AND INVERTED IN PWM PHASECORRECT OR FAST PWM
	SET_BIT(TCCR0_Register,COM01);
	SET_BIT(TCCR0_Register,COM00);
#else
#endif
}
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <TIM0_voidDisable>:

/*Timer0 Disable*/
void TIM0_voidDisable(void){
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
	TCCR0_Register=((TCCR0_Register&0b11111000)|(0));
     7e4:	a3 e5       	ldi	r26, 0x53	; 83
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e3 e5       	ldi	r30, 0x53	; 83
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	88 7f       	andi	r24, 0xF8	; 248
     7f0:	8c 93       	st	X, r24
}
     7f2:	cf 91       	pop	r28
     7f4:	df 91       	pop	r29
     7f6:	08 95       	ret

000007f8 <TIM0_voidSetTimerReg>:

/*Preoload Value Set*/
void TIM0_voidSetTimerReg(u8 Copy_u8Value){
     7f8:	df 93       	push	r29
     7fa:	cf 93       	push	r28
     7fc:	0f 92       	push	r0
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_Register=Copy_u8Value;
     804:	e2 e5       	ldi	r30, 0x52	; 82
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	80 83       	st	Z, r24
}
     80c:	0f 90       	pop	r0
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	08 95       	ret

00000814 <Timer0_u16ReadTimerValue>:

/*Preoload Value Read*/
u16 Timer0_u16ReadTimerValue(void)
{
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_Register ;
     81c:	e2 e5       	ldi	r30, 0x52	; 82
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	88 2f       	mov	r24, r24
     824:	90 e0       	ldi	r25, 0x00	; 0
}
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	08 95       	ret

0000082c <TIM0_voidSetCompareVal>:

/*Compare Match Value Set*/
void TIM0_voidSetCompareVal(u8 Copy_u8Value){
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	0f 92       	push	r0
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	89 83       	std	Y+1, r24	; 0x01
	OCR0_Register=Copy_u8Value;
     838:	ec e5       	ldi	r30, 0x5C	; 92
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	80 83       	st	Z, r24
}
     840:	0f 90       	pop	r0
     842:	cf 91       	pop	r28
     844:	df 91       	pop	r29
     846:	08 95       	ret

00000848 <TIM0_VoidDutyCyclePercentage>:

/*Auto Generating OCR0 value by Duty cycle percentage */
void TIM0_VoidDutyCyclePercentage(u8 Copy_u8PersantageValue)
{
     848:	df 93       	push	r29
     84a:	cf 93       	push	r28
     84c:	0f 92       	push	r0
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	89 83       	std	Y+1, r24	; 0x01
	if(((TIM0_WAVEFORM_MODE== FASTPWM_MODE) || (TIM0_WAVEFORM_MODE== PWM_FASECORRECT_MODE)) && (TIM0_COMPARE_MODE == OC0_CLEAR_NON_INVERTED))
	{
		OCR0_Register = 256 * (Copy_u8PersantageValue/100);
     854:	ec e5       	ldi	r30, 0x5C	; 92
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	94 e6       	ldi	r25, 0x64	; 100
     85c:	69 2f       	mov	r22, r25
     85e:	0e 94 66 08 	call	0x10cc	; 0x10cc <__udivmodqi4>
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	98 2f       	mov	r25, r24
     868:	88 27       	eor	r24, r24
     86a:	80 83       	st	Z, r24
	else if(((TIM0_WAVEFORM_MODE== FASTPWM_MODE) || (TIM0_WAVEFORM_MODE== PWM_FASECORRECT_MODE)) && (TIM0_COMPARE_MODE == OC0_SET_INVERTED))
	{
		OCR0_Register = 256 * (1-(Copy_u8PersantageValue/100));
	}
	else{ };
}
     86c:	0f 90       	pop	r0
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	08 95       	ret

00000874 <TIM1_voidInitialize>:


/*************************************************************TIMER1**************************************************************/

void TIM1_voidInitialize(void){
     874:	df 93       	push	r29
     876:	cf 93       	push	r28
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62

#elif	TIM1_WAVEFORM_MODE== CTC_ICR1
	TCCR1B_Register=((TCCR1B_Register&0b11100111)|(24));
	TCCR1A_Register=((TCCR1A_Register&0b11111100)|(0));
#elif	TIM1_WAVEFORM_MODE== PWM_FAST_ICR1
	TCCR1B_Register=((TCCR1B_Register&0b11100111)|(24));
     87c:	ae e4       	ldi	r26, 0x4E	; 78
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	ee e4       	ldi	r30, 0x4E	; 78
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	88 61       	ori	r24, 0x18	; 24
     888:	8c 93       	st	X, r24
	TCCR1A_Register=((TCCR1A_Register&0b11111100)|(2));
     88a:	af e4       	ldi	r26, 0x4F	; 79
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	ef e4       	ldi	r30, 0x4F	; 79
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	8c 7f       	andi	r24, 0xFC	; 252
     896:	82 60       	ori	r24, 0x02	; 2
     898:	8c 93       	st	X, r24
	TCCR1A_Register=((TCCR1A_Register&0b11111100)|(3));
#else
#endif

	//Clock Select (Prescaler) to be used by the Timer1/Counter (TCCR1B)
	TCCR1B_Register = ((TCCR1B_Register &= 0b11111000) | TIM1_CLOCK_SELECT);
     89a:	2e e4       	ldi	r18, 0x4E	; 78
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	ae e4       	ldi	r26, 0x4E	; 78
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	ee e4       	ldi	r30, 0x4E	; 78
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	88 7f       	andi	r24, 0xF8	; 248
     8aa:	8c 93       	st	X, r24
     8ac:	8c 91       	ld	r24, X
     8ae:	82 60       	ori	r24, 0x02	; 2
     8b0:	f9 01       	movw	r30, r18
     8b2:	80 83       	st	Z, r24
#if 	TIM1A_COMPARE_MODE == OC1A_DISCONNECTED			//In all modes
	TCCR1A_Register=((TCCR1A_Register&0b00111111)|(0));
#elif 	TIM1A_COMPARE_MODE == OC1A_TOGGLE					//Only on non PWM mode TOGGLE ON COMPARE MATCH
	TCCR1A_Register=((TCCR1A_Register&0b00111111)|(64));
#elif 	TIM1A_COMPARE_MODE == OC1A_CLEAR_NON_INVERTED		//CLEAR BIT IN NON PWM AND NON INVERTED IN PWM PHASECORRECT OR FAST PWM
	TCCR1A_Register=((TCCR1A_Register&0b00111111)|(128));
     8b4:	af e4       	ldi	r26, 0x4F	; 79
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	ef e4       	ldi	r30, 0x4F	; 79
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	8f 73       	andi	r24, 0x3F	; 63
     8c0:	80 68       	ori	r24, 0x80	; 128
     8c2:	8c 93       	st	X, r24
#if 	TIM1B_COMPARE_MODE == OC1B_DISCONNECTED			//In all modes
	TCCR1B_Register=((TCCR1B_Register&0b00111111)|(0));
#elif 	TIM1B_COMPARE_MODE == OC1B_TOGGLE					//Only on non PWM mode TOGGLE ON COMPARE MATCH
	TCCR1B_Register=((TCCR1B_Register&0b00111111)|(64));
#elif 	TIM1B_COMPARE_MODE == OC1B_CLEAR_NON_INVERTED		//CLEAR BIT IN NON PWM AND NON INVERTED IN PWM PHASECORRECT OR FAST PWM
	TCCR1B_Register=((TCCR1B_Register&0b00111111)|(128));
     8c4:	ae e4       	ldi	r26, 0x4E	; 78
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	ee e4       	ldi	r30, 0x4E	; 78
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	8f 73       	andi	r24, 0x3F	; 63
     8d0:	80 68       	ori	r24, 0x80	; 128
     8d2:	8c 93       	st	X, r24
#elif 	TIM1B_COMPARE_MODE == OC1B_SET_INVERTED			//SET BIT IN NON PWM AND INVERTED IN PWM PHASECORRECT OR FAST PWM
	TCCR1B_Register=((TCCR1B_Register&0b00111111)|(192));
#else
#endif
}
     8d4:	cf 91       	pop	r28
     8d6:	df 91       	pop	r29
     8d8:	08 95       	ret

000008da <TIM1_voidDisable>:

/*Timer1 Disable*/
void TIM1_voidDisable(void){
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_Register=((TCCR1B_Register&0b11111000)|(0));
     8e2:	ae e4       	ldi	r26, 0x4E	; 78
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	ee e4       	ldi	r30, 0x4E	; 78
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	88 7f       	andi	r24, 0xF8	; 248
     8ee:	8c 93       	st	X, r24
}
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	08 95       	ret

000008f6 <TIM1_voidSetTimerReg>:

/*Preoload Value Set*/
void TIM1_voidSetTimerReg(u16 Copy_u16Value){
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <TIM1_voidSetTimerReg+0x6>
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	9a 83       	std	Y+2, r25	; 0x02
     902:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Register=Copy_u16Value;
     904:	ec e4       	ldi	r30, 0x4C	; 76
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	91 83       	std	Z+1, r25	; 0x01
     90e:	80 83       	st	Z, r24
}
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	cf 91       	pop	r28
     916:	df 91       	pop	r29
     918:	08 95       	ret

0000091a <Timer1_u16ReadTimerValue>:

/*Preoload Value Read*/
u16 Timer1_u16ReadTimerValue(void)
{
     91a:	df 93       	push	r29
     91c:	cf 93       	push	r28
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_Register ;
     922:	ec e4       	ldi	r30, 0x4C	; 76
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
}
     92a:	cf 91       	pop	r28
     92c:	df 91       	pop	r29
     92e:	08 95       	ret

00000930 <TIM1_voidSetCompareValChannel_A>:

/*Compare Match Value on Channel A Set*/
void TIM1_voidSetCompareValChannel_A(u16 Copy_u16Value){
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	00 d0       	rcall	.+0      	; 0x936 <TIM1_voidSetCompareValChannel_A+0x6>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	9a 83       	std	Y+2, r25	; 0x02
     93c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Register=Copy_u16Value;
     93e:	ea e4       	ldi	r30, 0x4A	; 74
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	08 95       	ret

00000954 <TIM1_voidSetCompareValChannel_B>:

/*Compare Match Value on Channel B Set*/
void TIM1_voidSetCompareValChannel_B(u16 Copy_u16Value){
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	00 d0       	rcall	.+0      	; 0x95a <TIM1_voidSetCompareValChannel_B+0x6>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Register=Copy_u16Value;
     962:	e8 e4       	ldi	r30, 0x48	; 72
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	91 83       	std	Z+1, r25	; 0x01
     96c:	80 83       	st	Z, r24
}
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	cf 91       	pop	r28
     974:	df 91       	pop	r29
     976:	08 95       	ret

00000978 <TIM1_voidSetInputCapture>:

/*Input Capture Register ICR1 Value Set*/
void TIM1_voidSetInputCapture(u16 Copy_u16Value){
     978:	df 93       	push	r29
     97a:	cf 93       	push	r28
     97c:	00 d0       	rcall	.+0      	; 0x97e <TIM1_voidSetInputCapture+0x6>
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	9a 83       	std	Y+2, r25	; 0x02
     984:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Register=Copy_u16Value;
     986:	e6 e4       	ldi	r30, 0x46	; 70
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	91 83       	std	Z+1, r25	; 0x01
     990:	80 83       	st	Z, r24
}
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	08 95       	ret

0000099c <ICU_voidInit>:


/***************************************************************ICU***************************************************************/
void ICU_voidInit(void)
{
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
	/*Set trigger source to Rising Edge Initially*/
	SET_BIT(TCCR1B_Register,ICES1);
     9a4:	ae e4       	ldi	r26, 0x4E	; 78
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	ee e4       	ldi	r30, 0x4E	; 78
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	80 64       	ori	r24, 0x40	; 64
     9b0:	8c 93       	st	X, r24

	/*Enable Input Capture interrupt*/
	SET_BIT(TIMSK_Register,TICIE1);
     9b2:	a9 e5       	ldi	r26, 0x59	; 89
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	e9 e5       	ldi	r30, 0x59	; 89
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	80 62       	ori	r24, 0x20	; 32
     9be:	8c 93       	st	X, r24
}
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <ICU_u16ReadInputCaptuer>:

u16 ICU_u16ReadInputCaptuer(void)
{
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
	return ICR1_Register;
     9ce:	e6 e4       	ldi	r30, 0x46	; 70
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
}
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	08 95       	ret

000009dc <ICU_u8SetTriggerEdge>:

u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <ICU_u8SetTriggerEdge+0x6>
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Edge == ICU_RISING_EDGE )
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	41 f4       	brne	.+16     	; 0xa02 <ICU_u8SetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B_Register,ICES1);
     9f2:	ae e4       	ldi	r26, 0x4E	; 78
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	ee e4       	ldi	r30, 0x4E	; 78
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	80 64       	ori	r24, 0x40	; 64
     9fe:	8c 93       	st	X, r24
     a00:	0d c0       	rjmp	.+26     	; 0xa1c <ICU_u8SetTriggerEdge+0x40>
	}
	else if(Copy_u8Edge == ICU_FALLING_EDGE )
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	88 23       	and	r24, r24
     a06:	41 f4       	brne	.+16     	; 0xa18 <ICU_u8SetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B_Register,ICES1);
     a08:	ae e4       	ldi	r26, 0x4E	; 78
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	ee e4       	ldi	r30, 0x4E	; 78
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	8f 7b       	andi	r24, 0xBF	; 191
     a14:	8c 93       	st	X, r24
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <ICU_u8SetTriggerEdge+0x40>
	}
	else
	{
		Local_u8ErrorState = NOK;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	cf 91       	pop	r28
     a24:	df 91       	pop	r29
     a26:	08 95       	ret

00000a28 <TIM2_voidInitialize>:


/*********************************************************************************************************************************/

void TIM2_voidInitialize(void){
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2_Register,WGM20);
#elif 	TIM2_WAVEFORM_MODE== CTC_MODE
	SET_BIT(TCCR2_Register,WGM21);
	CLR_BIT(TCCR2_Register,WGM20);
#elif	 TIM2_WAVEFORM_MODE== FASTPWM_MODE
	SET_BIT(TCCR2_Register,WGM21);
     a30:	a5 e4       	ldi	r26, 0x45	; 69
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	e5 e4       	ldi	r30, 0x45	; 69
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	88 60       	ori	r24, 0x08	; 8
     a3c:	8c 93       	st	X, r24
	SET_BIT(TCCR2_Register,WGM20);
     a3e:	a5 e4       	ldi	r26, 0x45	; 69
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	e5 e4       	ldi	r30, 0x45	; 69
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	80 64       	ori	r24, 0x40	; 64
     a4a:	8c 93       	st	X, r24
#else
#endif
		//Clock Select (Prescaler) to be used by the Timer2/Counter (TCCR2)
	TCCR2_Register = ((TCCR2_Register &= 0b11111000) | TIM2_CLOCK_SELECT);
     a4c:	25 e4       	ldi	r18, 0x45	; 69
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	a5 e4       	ldi	r26, 0x45	; 69
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	e5 e4       	ldi	r30, 0x45	; 69
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	88 7f       	andi	r24, 0xF8	; 248
     a5c:	8c 93       	st	X, r24
     a5e:	8c 91       	ld	r24, X
     a60:	82 60       	ori	r24, 0x02	; 2
     a62:	f9 01       	movw	r30, r18
     a64:	80 83       	st	Z, r24
	CLR_BIT(TCCR2_Register,COM20);
#elif 	TIM2_COMPARE_MODE == OC2_TOGGLE					//Only on non PWM mode
	CLR_BIT(TCCR2_Register,COM21);
	SET_BIT(TCCR2_Register,COM20);
#elif 	TIM2_COMPARE_MODE == OC2_CLEAR_NON_INVERTED		//CLEAR BIT IN NON PWM AND NON INVERTED IN PWM PHASECORRECT OR FAST PWM
	SET_BIT(TCCR2_Register,COM21);
     a66:	a5 e4       	ldi	r26, 0x45	; 69
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e5 e4       	ldi	r30, 0x45	; 69
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	80 62       	ori	r24, 0x20	; 32
     a72:	8c 93       	st	X, r24
	CLR_BIT(TCCR2_Register,COM20);
     a74:	a5 e4       	ldi	r26, 0x45	; 69
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	e5 e4       	ldi	r30, 0x45	; 69
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	8f 7e       	andi	r24, 0xEF	; 239
     a80:	8c 93       	st	X, r24
#elif 	TIM2_COMPARE_MODE == OC2_SET_INVERTED			//SET BIT IN NON PWM AND INVERTED IN PWM PHASECORRECT OR FAST PWM
	SET_BIT(TCCR2_Register,COM21);
	SET_BIT(TCCR2_Register,COM20);
#else
#endif
}
     a82:	cf 91       	pop	r28
     a84:	df 91       	pop	r29
     a86:	08 95       	ret

00000a88 <TIM2_voidDisable>:

/*Timer2 Disable*/
void TIM2_voidDisable(void){
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
	TCCR2_Register=((TCCR2_Register&0b11111000)|(0));
     a90:	a5 e4       	ldi	r26, 0x45	; 69
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	e5 e4       	ldi	r30, 0x45	; 69
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	88 7f       	andi	r24, 0xF8	; 248
     a9c:	8c 93       	st	X, r24
}
     a9e:	cf 91       	pop	r28
     aa0:	df 91       	pop	r29
     aa2:	08 95       	ret

00000aa4 <TIM2_voidSetTimerReg>:

/*Preoload Value Set*/
void TIM2_voidSetTimerReg(u8 Copy_u8Value){
     aa4:	df 93       	push	r29
     aa6:	cf 93       	push	r28
     aa8:	0f 92       	push	r0
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_Register=Copy_u8Value;
     ab0:	e4 e4       	ldi	r30, 0x44	; 68
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	80 83       	st	Z, r24
}
     ab8:	0f 90       	pop	r0
     aba:	cf 91       	pop	r28
     abc:	df 91       	pop	r29
     abe:	08 95       	ret

00000ac0 <Timer2_u16ReadTimerValue>:


u16 Timer2_u16ReadTimerValue(void)
{
     ac0:	df 93       	push	r29
     ac2:	cf 93       	push	r28
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
	return TCCR2_Register ;
     ac8:	e5 e4       	ldi	r30, 0x45	; 69
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
}
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	08 95       	ret

00000ad8 <TIM2_voidSetCompareVal>:

/*Compare Match Value Set*/
void TIM2_voidSetCompareVal(u8 Copy_u8Value){
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	0f 92       	push	r0
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Register=Copy_u8Value;
     ae4:	e3 e4       	ldi	r30, 0x43	; 67
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	80 83       	st	Z, r24
}
     aec:	0f 90       	pop	r0
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	08 95       	ret

00000af4 <TIM2_VoidDutyCyclePercentage>:

/*Auto Generating OCR0 value by Duty cycle percentage */
void TIM2_VoidDutyCyclePercentage(u8 Copy_u8PersantageValue)
{
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	0f 92       	push	r0
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	89 83       	std	Y+1, r24	; 0x01
	if(((TIM2_WAVEFORM_MODE== FASTPWM_MODE) || (TIM2_WAVEFORM_MODE== PWM_FASECORRECT_MODE)) && (TIM2_COMPARE_MODE == OC2_CLEAR_NON_INVERTED))
	{
		OCR2_Register = 256 * (Copy_u8PersantageValue/100);
     b00:	e3 e4       	ldi	r30, 0x43	; 67
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	94 e6       	ldi	r25, 0x64	; 100
     b08:	69 2f       	mov	r22, r25
     b0a:	0e 94 66 08 	call	0x10cc	; 0x10cc <__udivmodqi4>
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	98 2f       	mov	r25, r24
     b14:	88 27       	eor	r24, r24
     b16:	80 83       	st	Z, r24
	else if(((TIM2_WAVEFORM_MODE== FASTPWM_MODE) || (TIM2_WAVEFORM_MODE== PWM_FASECORRECT_MODE)) && (TIM2_COMPARE_MODE == OC2_SET_INVERTED))
	{
		OCR2_Register = 256 * (1-(Copy_u8PersantageValue/100));
	}
	else{ };
}
     b18:	0f 90       	pop	r0
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	08 95       	ret

00000b20 <Timers_voidEn_Dis_Interrupt>:


/*************************************************************ALL TIMERS***********************************************************/

void Timers_voidEn_Dis_Interrupt(u16 Copy_TIM_INT_Mask, u8 Copy_En_Dis)
{
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	00 d0       	rcall	.+0      	; 0xb26 <Timers_voidEn_Dis_Interrupt+0x6>
     b26:	00 d0       	rcall	.+0      	; 0xb28 <Timers_voidEn_Dis_Interrupt+0x8>
     b28:	00 d0       	rcall	.+0      	; 0xb2a <Timers_voidEn_Dis_Interrupt+0xa>
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	9b 83       	std	Y+3, r25	; 0x03
     b30:	8a 83       	std	Y+2, r24	; 0x02
     b32:	6c 83       	std	Y+4, r22	; 0x04
	u8 	Local_u8ErrorState = OK;
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_TIM_INT_Mask)
     b38:	8a 81       	ldd	r24, Y+2	; 0x02
     b3a:	9b 81       	ldd	r25, Y+3	; 0x03
     b3c:	9e 83       	std	Y+6, r25	; 0x06
     b3e:	8d 83       	std	Y+5, r24	; 0x05
     b40:	8d 81       	ldd	r24, Y+5	; 0x05
     b42:	9e 81       	ldd	r25, Y+6	; 0x06
     b44:	83 30       	cpi	r24, 0x03	; 3
     b46:	91 05       	cpc	r25, r1
     b48:	09 f4       	brne	.+2      	; 0xb4c <Timers_voidEn_Dis_Interrupt+0x2c>
     b4a:	6f c0       	rjmp	.+222    	; 0xc2a <Timers_voidEn_Dis_Interrupt+0x10a>
     b4c:	8d 81       	ldd	r24, Y+5	; 0x05
     b4e:	9e 81       	ldd	r25, Y+6	; 0x06
     b50:	84 30       	cpi	r24, 0x04	; 4
     b52:	91 05       	cpc	r25, r1
     b54:	60 f4       	brcc	.+24     	; 0xb6e <Timers_voidEn_Dis_Interrupt+0x4e>
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	9e 81       	ldd	r25, Y+6	; 0x06
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	91 05       	cpc	r25, r1
     b5e:	b9 f1       	breq	.+110    	; 0xbce <Timers_voidEn_Dis_Interrupt+0xae>
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	91 05       	cpc	r25, r1
     b68:	08 f0       	brcs	.+2      	; 0xb6c <Timers_voidEn_Dis_Interrupt+0x4c>
     b6a:	48 c0       	rjmp	.+144    	; 0xbfc <Timers_voidEn_Dis_Interrupt+0xdc>
     b6c:	19 c0       	rjmp	.+50     	; 0xba0 <Timers_voidEn_Dis_Interrupt+0x80>
     b6e:	8d 81       	ldd	r24, Y+5	; 0x05
     b70:	9e 81       	ldd	r25, Y+6	; 0x06
     b72:	85 30       	cpi	r24, 0x05	; 5
     b74:	91 05       	cpc	r25, r1
     b76:	09 f4       	brne	.+2      	; 0xb7a <Timers_voidEn_Dis_Interrupt+0x5a>
     b78:	86 c0       	rjmp	.+268    	; 0xc86 <Timers_voidEn_Dis_Interrupt+0x166>
     b7a:	8d 81       	ldd	r24, Y+5	; 0x05
     b7c:	9e 81       	ldd	r25, Y+6	; 0x06
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	91 05       	cpc	r25, r1
     b82:	08 f4       	brcc	.+2      	; 0xb86 <Timers_voidEn_Dis_Interrupt+0x66>
     b84:	69 c0       	rjmp	.+210    	; 0xc58 <Timers_voidEn_Dis_Interrupt+0x138>
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	86 30       	cpi	r24, 0x06	; 6
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <Timers_voidEn_Dis_Interrupt+0x72>
     b90:	90 c0       	rjmp	.+288    	; 0xcb2 <Timers_voidEn_Dis_Interrupt+0x192>
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	9e 81       	ldd	r25, Y+6	; 0x06
     b96:	87 30       	cpi	r24, 0x07	; 7
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <Timers_voidEn_Dis_Interrupt+0x7e>
     b9c:	a0 c0       	rjmp	.+320    	; 0xcde <Timers_voidEn_Dis_Interrupt+0x1be>
     b9e:	b5 c0       	rjmp	.+362    	; 0xd0a <Timers_voidEn_Dis_Interrupt+0x1ea>
	{
	//TIMER0 Overflow_Interrupt_Enable
	case TIM0_OVF_INT:
	{
		if(Copy_En_Dis == Enable)
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	41 f4       	brne	.+16     	; 0xbb6 <Timers_voidEn_Dis_Interrupt+0x96>
		{
			SET_BIT(TIMSK_Register,TOIE0);
     ba6:	a9 e5       	ldi	r26, 0x59	; 89
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e9 e5       	ldi	r30, 0x59	; 89
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	8c 93       	st	X, r24
     bb4:	ac c0       	rjmp	.+344    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	88 23       	and	r24, r24
     bba:	09 f0       	breq	.+2      	; 0xbbe <Timers_voidEn_Dis_Interrupt+0x9e>
     bbc:	a8 c0       	rjmp	.+336    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,TOIE0);
     bbe:	a9 e5       	ldi	r26, 0x59	; 89
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e9 e5       	ldi	r30, 0x59	; 89
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	8c 93       	st	X, r24
     bcc:	a0 c0       	rjmp	.+320    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER0 Compare Match Interrupt Enable
	case TIM0_Comp_INT:
	{
		if(Copy_En_Dis == Enable)
     bce:	8c 81       	ldd	r24, Y+4	; 0x04
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	41 f4       	brne	.+16     	; 0xbe4 <Timers_voidEn_Dis_Interrupt+0xc4>
		{
			SET_BIT(TIMSK_Register,OCIE0);
     bd4:	a9 e5       	ldi	r26, 0x59	; 89
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e9 e5       	ldi	r30, 0x59	; 89
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	82 60       	ori	r24, 0x02	; 2
     be0:	8c 93       	st	X, r24
     be2:	95 c0       	rjmp	.+298    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	88 23       	and	r24, r24
     be8:	09 f0       	breq	.+2      	; 0xbec <Timers_voidEn_Dis_Interrupt+0xcc>
     bea:	91 c0       	rjmp	.+290    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,OCIE0);
     bec:	a9 e5       	ldi	r26, 0x59	; 89
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e9 e5       	ldi	r30, 0x59	; 89
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	8d 7f       	andi	r24, 0xFD	; 253
     bf8:	8c 93       	st	X, r24
     bfa:	89 c0       	rjmp	.+274    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//Input_Capture_Interrupt_Enable
	case TIM1_ICU_INT:
	{
		if(Copy_En_Dis == Enable)
     bfc:	8c 81       	ldd	r24, Y+4	; 0x04
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	41 f4       	brne	.+16     	; 0xc12 <Timers_voidEn_Dis_Interrupt+0xf2>
		{
			SET_BIT(TIMSK_Register,TICIE1);
     c02:	a9 e5       	ldi	r26, 0x59	; 89
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e9 e5       	ldi	r30, 0x59	; 89
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 62       	ori	r24, 0x20	; 32
     c0e:	8c 93       	st	X, r24
     c10:	7e c0       	rjmp	.+252    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	88 23       	and	r24, r24
     c16:	09 f0       	breq	.+2      	; 0xc1a <Timers_voidEn_Dis_Interrupt+0xfa>
     c18:	7a c0       	rjmp	.+244    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,TICIE1);
     c1a:	a9 e5       	ldi	r26, 0x59	; 89
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e9 e5       	ldi	r30, 0x59	; 89
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8f 7d       	andi	r24, 0xDF	; 223
     c26:	8c 93       	st	X, r24
     c28:	72 c0       	rjmp	.+228    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER1 Compare A Match Interrupt Enable
	case TIM1_Comp_A_INT:
	{
		if(Copy_En_Dis == Enable)
     c2a:	8c 81       	ldd	r24, Y+4	; 0x04
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	41 f4       	brne	.+16     	; 0xc40 <Timers_voidEn_Dis_Interrupt+0x120>
		{
			SET_BIT(TIMSK_Register,OCIE1A);
     c30:	a9 e5       	ldi	r26, 0x59	; 89
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e9 e5       	ldi	r30, 0x59	; 89
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	80 61       	ori	r24, 0x10	; 16
     c3c:	8c 93       	st	X, r24
     c3e:	67 c0       	rjmp	.+206    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	88 23       	and	r24, r24
     c44:	09 f0       	breq	.+2      	; 0xc48 <Timers_voidEn_Dis_Interrupt+0x128>
     c46:	63 c0       	rjmp	.+198    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,OCIE1A);
     c48:	a9 e5       	ldi	r26, 0x59	; 89
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e9 e5       	ldi	r30, 0x59	; 89
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8f 7e       	andi	r24, 0xEF	; 239
     c54:	8c 93       	st	X, r24
     c56:	5b c0       	rjmp	.+182    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
	}
	//TIMER1 Compare B Match Interrupt Enable
	case TIM1_Comp_B_INT:
	{

		if(Copy_En_Dis == Enable)
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	41 f4       	brne	.+16     	; 0xc6e <Timers_voidEn_Dis_Interrupt+0x14e>
		{
			SET_BIT(TIMSK_Register,OCIE1B);
     c5e:	a9 e5       	ldi	r26, 0x59	; 89
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e9 e5       	ldi	r30, 0x59	; 89
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	88 60       	ori	r24, 0x08	; 8
     c6a:	8c 93       	st	X, r24
     c6c:	50 c0       	rjmp	.+160    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	88 23       	and	r24, r24
     c72:	09 f0       	breq	.+2      	; 0xc76 <Timers_voidEn_Dis_Interrupt+0x156>
     c74:	4c c0       	rjmp	.+152    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,OCIE1B);
     c76:	a9 e5       	ldi	r26, 0x59	; 89
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e9 e5       	ldi	r30, 0x59	; 89
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	87 7f       	andi	r24, 0xF7	; 247
     c82:	8c 93       	st	X, r24
     c84:	44 c0       	rjmp	.+136    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER1 Overflow_Interrupt_Enable
	case TIM1_OVF_INT:
	{
		if(Copy_En_Dis == Enable)
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	41 f4       	brne	.+16     	; 0xc9c <Timers_voidEn_Dis_Interrupt+0x17c>
		{
			SET_BIT(TIMSK_Register,TOIE1);
     c8c:	a9 e5       	ldi	r26, 0x59	; 89
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e9 e5       	ldi	r30, 0x59	; 89
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	8c 93       	st	X, r24
     c9a:	39 c0       	rjmp	.+114    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	88 23       	and	r24, r24
     ca0:	b1 f5       	brne	.+108    	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,TOIE1);
     ca2:	a9 e5       	ldi	r26, 0x59	; 89
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e9 e5       	ldi	r30, 0x59	; 89
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8b 7f       	andi	r24, 0xFB	; 251
     cae:	8c 93       	st	X, r24
     cb0:	2e c0       	rjmp	.+92     	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER2 Overflow_Interrupt_Enable
	case TIM2_OVF_INT:
	{
		if(Copy_En_Dis == Enable)
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	41 f4       	brne	.+16     	; 0xcc8 <Timers_voidEn_Dis_Interrupt+0x1a8>
		{
			SET_BIT(TIMSK_Register,TOIE2);
     cb8:	a9 e5       	ldi	r26, 0x59	; 89
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e9 e5       	ldi	r30, 0x59	; 89
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 64       	ori	r24, 0x40	; 64
     cc4:	8c 93       	st	X, r24
     cc6:	23 c0       	rjmp	.+70     	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
     cc8:	8c 81       	ldd	r24, Y+4	; 0x04
     cca:	88 23       	and	r24, r24
     ccc:	01 f5       	brne	.+64     	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,TOIE2);
     cce:	a9 e5       	ldi	r26, 0x59	; 89
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e9 e5       	ldi	r30, 0x59	; 89
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 7b       	andi	r24, 0xBF	; 191
     cda:	8c 93       	st	X, r24
     cdc:	18 c0       	rjmp	.+48     	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER2 Compare Match Interrupt Enable
	case TIM2_Comp_INT:
	{
		if(Copy_En_Dis == Enable)
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	41 f4       	brne	.+16     	; 0xcf4 <Timers_voidEn_Dis_Interrupt+0x1d4>
		{
			SET_BIT(TIMSK_Register,OCIE2);
     ce4:	a9 e5       	ldi	r26, 0x59	; 89
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e9 e5       	ldi	r30, 0x59	; 89
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	8c 93       	st	X, r24
     cf2:	0d c0       	rjmp	.+26     	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	88 23       	and	r24, r24
     cf8:	51 f4       	brne	.+20     	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,OCIE2);
     cfa:	a9 e5       	ldi	r26, 0x59	; 89
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 e5       	ldi	r30, 0x59	; 89
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	8c 93       	st	X, r24
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		break;
	}
	default:
	{
		Local_u8ErrorState = NOK;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	}
}
     d0e:	26 96       	adiw	r28, 0x06	; 6
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <TIMERS_u8SetCallBack>:

u8 TIMERS_u8SetCallBack(void (*Copy_pvCallBackFunc[8])(void), u16 INT_Name)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <TIMERS_u8SetCallBack+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <TIMERS_u8SetCallBack+0x8>
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	9b 83       	std	Y+3, r25	; 0x03
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	7d 83       	std	Y+5, r23	; 0x05
     d34:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus = OK;
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBackFunc[INT_Name] != NULL)
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	9c 01       	movw	r18, r24
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	fc 01       	movw	r30, r24
     d4a:	e2 0f       	add	r30, r18
     d4c:	f3 1f       	adc	r31, r19
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	61 f0       	breq	.+24     	; 0xd6e <TIMERS_u8SetCallBack+0x4e>
	{
		TIMERS_pvCallBack_Func[INT_Name] = Copy_pvCallBackFunc;
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	2a 81       	ldd	r18, Y+2	; 0x02
     d5c:	3b 81       	ldd	r19, Y+3	; 0x03
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	fc 01       	movw	r30, r24
     d64:	e0 5a       	subi	r30, 0xA0	; 160
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	31 83       	std	Z+1, r19	; 0x01
     d6a:	20 83       	st	Z, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <TIMERS_u8SetCallBack+0x52>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <__vector_4>:


//TIMER2 COMP
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
     d84:	1f 92       	push	r1
     d86:	0f 92       	push	r0
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	0f 92       	push	r0
     d8c:	11 24       	eor	r1, r1
     d8e:	2f 93       	push	r18
     d90:	3f 93       	push	r19
     d92:	4f 93       	push	r20
     d94:	5f 93       	push	r21
     d96:	6f 93       	push	r22
     d98:	7f 93       	push	r23
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
     d9e:	af 93       	push	r26
     da0:	bf 93       	push	r27
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM2_Comp_INT]();
     dae:	e0 91 6e 00 	lds	r30, 0x006E
     db2:	f0 91 6f 00 	lds	r31, 0x006F
     db6:	09 95       	icall
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <__vector_5>:

//TIMER2 Over flow
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	2f 93       	push	r18
     dea:	3f 93       	push	r19
     dec:	4f 93       	push	r20
     dee:	5f 93       	push	r21
     df0:	6f 93       	push	r22
     df2:	7f 93       	push	r23
     df4:	8f 93       	push	r24
     df6:	9f 93       	push	r25
     df8:	af 93       	push	r26
     dfa:	bf 93       	push	r27
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM2_OVF_INT]();
     e08:	e0 91 6c 00 	lds	r30, 0x006C
     e0c:	f0 91 6d 00 	lds	r31, 0x006D
     e10:	09 95       	icall
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__vector_6>:

//TIMER1 ICU_Capt
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM1_ICU_INT]();
     e62:	e0 91 64 00 	lds	r30, 0x0064
     e66:	f0 91 65 00 	lds	r31, 0x0065
     e6a:	09 95       	icall
}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <__vector_7>:


//TIMER1 COMPA
void __vector_7 (void)__attribute__((signal));
void __vector_7 (void)
{
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	6f 93       	push	r22
     ea6:	7f 93       	push	r23
     ea8:	8f 93       	push	r24
     eaa:	9f 93       	push	r25
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM1_Comp_A_INT]();
     ebc:	e0 91 66 00 	lds	r30, 0x0066
     ec0:	f0 91 67 00 	lds	r31, 0x0067
     ec4:	09 95       	icall
}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <__vector_8>:

//TIMER1 COMPB
void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	2f 93       	push	r18
     ef8:	3f 93       	push	r19
     efa:	4f 93       	push	r20
     efc:	5f 93       	push	r21
     efe:	6f 93       	push	r22
     f00:	7f 93       	push	r23
     f02:	8f 93       	push	r24
     f04:	9f 93       	push	r25
     f06:	af 93       	push	r26
     f08:	bf 93       	push	r27
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM1_Comp_B_INT]();
     f16:	e0 91 68 00 	lds	r30, 0x0068
     f1a:	f0 91 69 00 	lds	r31, 0x0069
     f1e:	09 95       	icall
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <__vector_9>:

//TIMER1 Over flow
void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM1_OVF_INT]();
     f70:	e0 91 6a 00 	lds	r30, 0x006A
     f74:	f0 91 6b 00 	lds	r31, 0x006B
     f78:	09 95       	icall
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	0f 90       	pop	r0
     f9c:	1f 90       	pop	r1
     f9e:	18 95       	reti

00000fa0 <__vector_10>:

//TIMER0 COMP
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	11 24       	eor	r1, r1
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM0_Comp_INT]();
     fca:	e0 91 62 00 	lds	r30, 0x0062
     fce:	f0 91 63 00 	lds	r31, 0x0063
     fd2:	09 95       	icall
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	ff 91       	pop	r31
     fda:	ef 91       	pop	r30
     fdc:	bf 91       	pop	r27
     fde:	af 91       	pop	r26
     fe0:	9f 91       	pop	r25
     fe2:	8f 91       	pop	r24
     fe4:	7f 91       	pop	r23
     fe6:	6f 91       	pop	r22
     fe8:	5f 91       	pop	r21
     fea:	4f 91       	pop	r20
     fec:	3f 91       	pop	r19
     fee:	2f 91       	pop	r18
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_11>:

//TIMER0 Overflow
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	4f 93       	push	r20
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM0_OVF_INT]();
    1024:	e0 91 60 00 	lds	r30, 0x0060
    1028:	f0 91 61 00 	lds	r31, 0x0061
    102c:	09 95       	icall
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <LED>:
#include"DIO_Interface.h"
#include"GIE_Interface.h"
#include"TIMER_Interface.h"

void LED(void)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	static u8 Local_u8LEDState = 0;
	Local_u16Counter++;
    105c:	80 91 71 00 	lds	r24, 0x0071
    1060:	90 91 72 00 	lds	r25, 0x0072
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	90 93 72 00 	sts	0x0072, r25
    106a:	80 93 71 00 	sts	0x0071, r24

	if(Local_u16Counter == 4000)
    106e:	80 91 71 00 	lds	r24, 0x0071
    1072:	90 91 72 00 	lds	r25, 0x0072
    1076:	2f e0       	ldi	r18, 0x0F	; 15
    1078:	80 3a       	cpi	r24, 0xA0	; 160
    107a:	92 07       	cpc	r25, r18
    107c:	89 f4       	brne	.+34     	; 0x10a0 <LED+0x4c>
	{
		TOG_BIT(Local_u8LEDState,0);
    107e:	90 91 70 00 	lds	r25, 0x0070
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	89 27       	eor	r24, r25
    1086:	80 93 70 00 	sts	0x0070, r24
		DIO_u8_SetPin_value(Group_B, DIO_u8_Pin_3, Local_u8LEDState);
    108a:	90 91 70 00 	lds	r25, 0x0070
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	63 e0       	ldi	r22, 0x03	; 3
    1092:	49 2f       	mov	r20, r25
    1094:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8_SetPin_value>
		Local_u16Counter = 0;
    1098:	10 92 72 00 	sts	0x0072, r1
    109c:	10 92 71 00 	sts	0x0071, r1
	}

}
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <main>:

void main(void)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_SetPort_Dir(Group_B,DIO_u8_PORT_Output);
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	6f ef       	ldi	r22, 0xFF	; 255
    10b2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_u8_SetPort_Dir>
	TIM0_voidInitialize();
    10b6:	0e 94 be 03 	call	0x77c	; 0x77c <TIM0_voidInitialize>
	TIMERS_u8SetCallBack(&LED, TIM0_Comp_INT);
    10ba:	8a e2       	ldi	r24, 0x2A	; 42
    10bc:	98 e0       	ldi	r25, 0x08	; 8
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	0e 94 90 06 	call	0xd20	; 0xd20 <TIMERS_u8SetCallBack>
	GIE_voidEnable();
    10c6:	0e 94 a2 03 	call	0x744	; 0x744 <GIE_voidEnable>
    10ca:	ff cf       	rjmp	.-2      	; 0x10ca <main+0x24>

000010cc <__udivmodqi4>:
    10cc:	99 1b       	sub	r25, r25
    10ce:	79 e0       	ldi	r23, 0x09	; 9
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <__udivmodqi4_ep>

000010d2 <__udivmodqi4_loop>:
    10d2:	99 1f       	adc	r25, r25
    10d4:	96 17       	cp	r25, r22
    10d6:	08 f0       	brcs	.+2      	; 0x10da <__udivmodqi4_ep>
    10d8:	96 1b       	sub	r25, r22

000010da <__udivmodqi4_ep>:
    10da:	88 1f       	adc	r24, r24
    10dc:	7a 95       	dec	r23
    10de:	c9 f7       	brne	.-14     	; 0x10d2 <__udivmodqi4_loop>
    10e0:	80 95       	com	r24
    10e2:	08 95       	ret

000010e4 <_exit>:
    10e4:	f8 94       	cli

000010e6 <__stop_program>:
    10e6:	ff cf       	rjmp	.-2      	; 0x10e6 <__stop_program>
